{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "",
  "home_page_url": "https://modyqyw.top/",
  "feed_url": "https://modyqyw.top/feed.json",
  "author": {
    "name": "ModyQyW <wurui7@mail3.sysu.edu.cn>"
  },
  "items": [
    {
      "title": "Home",
      "url": "https://modyqyw.top/",
      "id": "https://modyqyw.top/",
      "content_html": "",
      "date_published": "2020-04-03T17:33:51.000Z",
      "date_modified": "2021-07-05T05:18:00.000Z",
      "authors": [
        {
          "name": "ModyQyW <wurui7@mail3.sysu.edu.cn>"
        }
      ],
      "tags": []
    },
    {
      "title": "关于",
      "url": "https://modyqyw.top/about/",
      "id": "https://modyqyw.top/about/",
      "content_html": "<h1 id=\"关于\"> 关于</h1>\n<ul>\n<li>目前是一个半吊子全栈工程师</li>\n<li>想要成为 10x 程序员 + 全栈工程师 + UI 设计师 + 产品经理 + 项目经理 + 测试工程师 + 基础结构架构师 + 特定技术架构师 + 解决方案架构师</li>\n<li><a href=\"mailto:wurui7@mail3.sysu.edu.cn\">wurui7@mail3.sysu.edu.cn</a></li>\n<li><a href=\"mailto:wurui.sysu@gmail.com\">wurui.sysu@gmail.com</a></li>\n<li><a href=\"https://github.com/ModyQyW\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a></li>\n<li><a href=\"https://gitee.com/ModyQyW\" target=\"_blank\" rel=\"noopener noreferrer\">Gitee</a></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">平台</th>\n<th style=\"text-align:center\">方式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Alipay</td>\n<td style=\"text-align:center\"><img :src=\"$withBase('/images/about/alipay.jpeg')\" width=\"256px\" alt=\"Alipay\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Wechat</td>\n<td style=\"text-align:center\"><img :src=\"$withBase('/images/about/wechat.png')\" width=\"256px\" alt=\"Wechat\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Meituan</td>\n<td style=\"text-align:center\"><img :src=\"$withBase('/images/about/meituan1.jpeg')\" width=\"128px\" alt=\"美团外卖红包1\"> <img :src=\"$withBase('/images/about/meituan2.jpg')\" width=\"128px\" alt=\"美团外卖红包2\"><br><a href=\"https://tb.v2b3.com/6miQa\" target=\"_blank\" rel=\"noopener noreferrer\">Link</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Eleme</td>\n<td style=\"text-align:center\"><img :src=\"$withBase('/images/about/eleme1.jpeg')\" width=\"128px\" alt=\"饿了么外卖红包1\"> <img :src=\"$withBase('/images/about/eleme2.jpg')\" width=\"128px\" alt=\"饿了么外卖红包2\"><br><a href=\"https://tb.v2b3.com/6mxsJ\" target=\"_blank\" rel=\"noopener noreferrer\">Link</a></td>\n</tr>\n</tbody>\n</table>\n",
      "date_published": "2020-04-03T17:33:51.000Z",
      "date_modified": "2021-05-30T10:42:01.000Z",
      "authors": [
        {
          "name": "ModyQyW <wurui7@mail3.sysu.edu.cn>"
        }
      ],
      "tags": []
    },
    {
      "title": "开发",
      "url": "https://modyqyw.top/development/",
      "id": "https://modyqyw.top/development/",
      "content_html": "<h1 id=\"开发\"> 开发</h1>\n<h2 id=\"说明\"> 说明</h2>\n<p>这个部分覆盖了项目开发的很多方面，我把它用作我自己的学习路径和速查表。所有内容仅供参考。如果有条件，务必阅读原版书籍。</p>\n<h2 id=\"计算机基础\"> 计算机基础</h2>\n<ul>\n<li>英语\n<ul>\n<li><a href=\"https://a-programmers-guide-to-english.harryyu.me/\" target=\"_blank\" rel=\"noopener noreferrer\">程序员英语学习指南</a></li>\n<li><a href=\"https://dictionary.cambridge.org/dictionary/english/\" target=\"_blank\" rel=\"noopener noreferrer\">剑桥字典</a></li>\n<li>新概念英语</li>\n<li>翻译工具 <a href=\"https://www.deepl.com/\" target=\"_blank\" rel=\"noopener noreferrer\">deepl</a></li>\n<li><a href=\"https://www.grammarly.com/\" target=\"_blank\" rel=\"noopener noreferrer\">grammarly</a></li>\n<li><a href=\"https://ludwig.guru/\" target=\"_blank\" rel=\"noopener noreferrer\">ludwig</a></li>\n</ul>\n</li>\n<li>线性代数\n<ul>\n<li><a href=\"https://book.douban.com/subject/1425950/\" target=\"_blank\" rel=\"noopener noreferrer\">线性代数及其应用</a></li>\n</ul>\n</li>\n<li>离散数学\n<ul>\n<li><a href=\"https://book.douban.com/subject/34866266/\" target=\"_blank\" rel=\"noopener noreferrer\">离散数学及其应用</a></li>\n</ul>\n</li>\n<li>计算机基础\n<ul>\n<li><a href=\"https://www.icourse163.org/course/NUDT-1001614002\" target=\"_blank\" rel=\"noopener noreferrer\">国防科技大学 - 大学计算机基础</a></li>\n</ul>\n</li>\n<li>计算机组成原理\n<ul>\n<li><a href=\"https://www.icourse163.org/course/HUST-1003159001\" target=\"_blank\" rel=\"noopener noreferrer\">华中科技大学 - 计算机组成原理</a></li>\n<li><a href=\"https://time.geekbang.org/column/intro/100026001\" target=\"_blank\" rel=\"noopener noreferrer\">深入浅出计算机组成原理</a></li>\n<li><a href=\"https://book.douban.com/subject/26604008/\" target=\"_blank\" rel=\"noopener noreferrer\">计算机组成与设计</a></li>\n</ul>\n</li>\n<li>操作系统原理\n<ul>\n<li><a href=\"https://www.icourse163.org/course/HIT-1002531008\" target=\"_blank\" rel=\"noopener noreferrer\">哈尔滨工业大学 - 操作系统</a></li>\n<li><a href=\"https://weread.qq.com/web/reader/db8329d071cc7f70db8a479\" target=\"_blank\" rel=\"noopener noreferrer\">操作系统导论</a></li>\n<li><a href=\"https://book.douban.com/subject/30297919/\" target=\"_blank\" rel=\"noopener noreferrer\">操作系统概念</a></li>\n</ul>\n</li>\n<li>计算机网络原理和安全\n<ul>\n<li><a href=\"https://www.icourse163.org/course/HIT-154005\" target=\"_blank\" rel=\"noopener noreferrer\">哈尔滨工业大学 - 计算机网络</a></li>\n<li><a href=\"https://weread.qq.com/web/reader/92e326e0718ff67892eea53\" target=\"_blank\" rel=\"noopener noreferrer\">图解网络硬件</a></li>\n<li><a href=\"https://book.douban.com/subject/24737674/\" target=\"_blank\" rel=\"noopener noreferrer\">图解 TCP/IP</a></li>\n<li><a href=\"https://weread.qq.com/web/reader/3da32b505dd9f43da9a1aca\" target=\"_blank\" rel=\"noopener noreferrer\">图解 HTTP</a></li>\n<li><a href=\"https://book.douban.com/subject/26265544/\" target=\"_blank\" rel=\"noopener noreferrer\">图解密码技术</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/04/cors.html\" target=\"_blank\" rel=\"noopener noreferrer\">cors</a></li>\n<li>网络基本组成</li>\n<li>五层模型</li>\n<li>七层模型</li>\n<li>请求类型</li>\n<li>报文</li>\n<li>请求流程</li>\n<li>抓包分析，如 wireshark，charles，fiddler，lightproxy</li>\n<li>请求分析，如 postman，paw，hoppscotch</li>\n<li>https</li>\n<li>浏览器存储，如 cookies，localStorage，sessionStorage</li>\n<li>加解密算法，如 des，3des，dsa，rsa</li>\n<li>xss，csrf 等</li>\n<li>内存安全策略 csp</li>\n<li>owasp 安全风险</li>\n</ul>\n</li>\n<li>多媒体技术基础\n<ul>\n<li>图像，如 bmp，jpg，jpeg，png，apng，gif，svg，webp，avif</li>\n<li>图像压缩算法</li>\n<li>音频，如 wav，wma，mp3</li>\n<li>视频，如 mpg，mpeg，avi，mov，asf，wmv，flv，f4v，mp4，amv，rmvb</li>\n<li>视频分片</li>\n</ul>\n</li>\n<li>程序设计入门 - C/C++/Java 均可，避开谭浩强\n<ul>\n<li><a href=\"https://book.douban.com/subject/4604591/\" target=\"_blank\" rel=\"noopener noreferrer\">C++ 程序设计语言</a></li>\n<li><a href=\"https://weread.qq.com/web/reader/ff732fe072021a24ff7bb24\" target=\"_blank\" rel=\"noopener noreferrer\">C++ Primer</a></li>\n<li><a href=\"https://weread.qq.com/web/reader/a99327c071d07b0da996784\" target=\"_blank\" rel=\"noopener noreferrer\">C++ Primer Plus</a></li>\n</ul>\n</li>\n<li>数据结构和算法\n<ul>\n<li><a href=\"https://github.com/algorithm-visualizer/algorithm-visualizer\" target=\"_blank\" rel=\"noopener noreferrer\">算法可视化工具</a></li>\n<li><a href=\"https://www.geekxh.com/\" target=\"_blank\" rel=\"noopener noreferrer\">小浩算法</a></li>\n<li><a href=\"https://github.com/wangzheng0822/algo\" target=\"_blank\" rel=\"noopener noreferrer\">数据结构和算法必知必会的 50 个代码实现</a></li>\n<li><a href=\"https://book.douban.com/subject/4249686/\" target=\"_blank\" rel=\"noopener noreferrer\">算法之道</a></li>\n<li><a href=\"https://time.geekbang.org/column/intro/126\" target=\"_blank\" rel=\"noopener noreferrer\">数据结构与算法</a></li>\n</ul>\n</li>\n<li>正则表达式\n<ul>\n<li><a href=\"http://www.cnblogs.com/deerchao/archive/2006/08/24/zhengzhe30fengzhongjiaocheng.html\" target=\"_blank\" rel=\"noopener noreferrer\">正则表达式入门</a></li>\n</ul>\n</li>\n<li>版本控制\n<ul>\n<li>svn</li>\n<li>git\n<ul>\n<li><a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener noreferrer\">Pro Git</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>设计模式\n<ul>\n<li><a href=\"https://refactoringguru.cn/design-patterns\" target=\"_blank\" rel=\"noopener noreferrer\">22 种设计模式</a></li>\n</ul>\n</li>\n<li><a href=\"https://draven.co/whys-the-design/\" target=\"_blank\" rel=\"noopener noreferrer\">为什么这么设计系列文章</a></li>\n</ul>\n<h2 id=\"编程用字体\"> 编程用字体</h2>\n<ul>\n<li><a href=\"https://www.cufonfonts.com/font/menlo\" target=\"_blank\" rel=\"noopener noreferrer\">Menlo</a></li>\n<li><a href=\"https://github.com/adobe-fonts/source-code-pro/releases\" target=\"_blank\" rel=\"noopener noreferrer\">Source Code Pro</a></li>\n<li><a href=\"https://www.jetbrains.com/lp/mono/\" target=\"_blank\" rel=\"noopener noreferrer\">Jetbrains Mono</a></li>\n<li><a href=\"https://github.com/be5invis/Sarasa-Gothic/releases\" target=\"_blank\" rel=\"noopener noreferrer\">Sarasa Mono T SC</a></li>\n<li><a href=\"https://github.com/tonsky/FiraCode/releases\" target=\"_blank\" rel=\"noopener noreferrer\">Fira Code</a></li>\n<li><a href=\"https://github.com/be5invis/Sarasa-Gothic/releases\" target=\"_blank\" rel=\"noopener noreferrer\">Sarasa Gothic</a></li>\n</ul>\n<h2 id=\"工作学习法\"> 工作学习法</h2>\n<ul>\n<li><a href=\"https://help.dida365.com/tasks\" target=\"_blank\" rel=\"noopener noreferrer\">滴答清单时间管理方法论和实践</a></li>\n<li><a href=\"https://time.geekbang.org/column/intro/148\" target=\"_blank\" rel=\"noopener noreferrer\">10x 程序员工作法</a></li>\n<li><a href=\"https://weread.qq.com/web/reader/2cf32ec0811e3ac71g017571\" target=\"_blank\" rel=\"noopener noreferrer\">程序员修炼之道：通向务实的最高境界</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/YzImrD4dmNe1SjBHztOofg\" target=\"_blank\" rel=\"noopener noreferrer\">搭建知识框架</a></li>\n</ul>\n<h2 id=\"前端基础\"> 前端基础</h2>\n<ul>\n<li><a href=\"https://www.w3.org/\" target=\"_blank\" rel=\"noopener noreferrer\">w3c</a></li>\n<li><a href=\"https://developer.mozilla.org/\" target=\"_blank\" rel=\"noopener noreferrer\">mdn</a></li>\n<li><a href=\"https://www.ibm.com/developerworks/cn/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">ibm developer</a></li>\n<li><a href=\"https://css-tricks.com/\" target=\"_blank\" rel=\"noopener noreferrer\">css-tricks</a></li>\n<li><a href=\"https://www.zhihu.com/question/304757674/answer/546374749\" target=\"_blank\" rel=\"noopener noreferrer\">六个基本概念</a></li>\n<li>网页原生 - html + css + js\n<ul>\n<li><a href=\"https://www.freecodecamp.org/learn\" target=\"_blank\" rel=\"noopener noreferrer\">FreeCodeCamp</a></li>\n<li><a href=\"https://lefex.github.io/fe-mini-course/\" target=\"_blank\" rel=\"noopener noreferrer\">前端小课</a></li>\n<li><a href=\"https://www.yuque.com/fe9/basic\" target=\"_blank\" rel=\"noopener noreferrer\">前端九部</a></li>\n<li><a href=\"http://zh.learnlayout.com/\" target=\"_blank\" rel=\"noopener noreferrer\">学习 CSS 布局</a></li>\n<li><a href=\"https://weread.qq.com/web/reader/00932ab0715a41e90093ab5\" target=\"_blank\" rel=\"noopener noreferrer\">CSS 世界</a></li>\n<li><a href=\"https://book.douban.com/subject/33398314/\" target=\"_blank\" rel=\"noopener noreferrer\">CSS 权威指南</a></li>\n<li><a href=\"https://lhammer.cn/You-need-to-know-css/#/zh-cn/\" target=\"_blank\" rel=\"noopener noreferrer\">you-need-to-know-css</a></li>\n<li><a href=\"https://juejin.im/post/6888102016007176200\" target=\"_blank\" rel=\"noopener noreferrer\">css 晦涩难懂的点</a></li>\n<li><a href=\"https://www.zhihu.com/question/313971223/answer/628236155\" target=\"_blank\" rel=\"noopener noreferrer\">为什么很多 web 项目还是使用 px，而不是 rem</a></li>\n<li><a href=\"https://juejin.cn/post/6958690548009926687\" target=\"_blank\" rel=\"noopener noreferrer\">如何写出一套可维护的 CSS 库</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/385523262\" target=\"_blank\" rel=\"noopener noreferrer\">css 里的整洁架构</a></li>\n<li><a href=\"https://javascript.info/\" target=\"_blank\" rel=\"noopener noreferrer\">The Modern JavaScript Tutorial</a> - <a href=\"https://zh.javascript.info/\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a></li>\n<li><a href=\"https://weread.qq.com/web/reader/14632cb071d2827314677c6kc81322c012c81e728d9d180\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript 编程精解</a></li>\n<li><a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener noreferrer\">ES6 入门</a> - <a href=\"https://wangdoc.com/es6/\" target=\"_blank\" rel=\"noopener noreferrer\">镜像</a></li>\n<li><a href=\"https://weread.qq.com/web/reader/fd332480811e4dd5dg011874\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript 高级程序设计</a></li>\n<li><a href=\"https://book.douban.com/subject/35396470/\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript 权威指南</a></li>\n<li><a href=\"https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript 函数式编程指南</a></li>\n<li><a href=\"https://weread.qq.com/web/reader/8c632230715c01a18c683d8\" target=\"_blank\" rel=\"noopener noreferrer\">你不知道的 JavaScript（上）</a></li>\n<li><a href=\"https://weread.qq.com/web/reader/f5d32510715c0190f5ddc42\" target=\"_blank\" rel=\"noopener noreferrer\">你不知道的 JavaScript（中）</a></li>\n<li><a href=\"https://weread.qq.com/web/reader/c1232d00715c016fc1234b3\" target=\"_blank\" rel=\"noopener noreferrer\">你不知道的 JavaScript（下）</a></li>\n<li><a href=\"https://weread.qq.com/web/reader/bd73243071e43421bd7c139\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript 语言精髓与编程实践</a></li>\n<li><a href=\"http://nodejs.cn/learn\" target=\"_blank\" rel=\"noopener noreferrer\">Node.js 入门教程</a></li>\n<li>html 基础，包括语义化，表单和验证，可访问性等</li>\n<li>css 基础，包括定位，显示，盒模型，浮动，弹性布局，排版，视觉效果，响应式布局，自适应布局等</li>\n<li>js es5 和 es6+</li>\n</ul>\n</li>\n<li>包管理器\n<ul>\n<li><a href=\"https://docs.npmjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">npm</a></li>\n<li><a href=\"https://classic.yarnpkg.com/\" target=\"_blank\" rel=\"noopener noreferrer\">yarn</a></li>\n<li><a href=\"https://pnpm.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">pnpm</a></li>\n<li><a href=\"https://github.com/antfu/ni\" target=\"_blank\" rel=\"noopener noreferrer\">@antfu/ni</a></li>\n</ul>\n</li>\n<li>css 处理器\n<ul>\n<li><a href=\"https://postcss.org/\" target=\"_blank\" rel=\"noopener noreferrer\">postcss</a></li>\n<li><a href=\"http://lesscss.org/\" target=\"_blank\" rel=\"noopener noreferrer\">less</a></li>\n<li><a href=\"https://sass-lang.com/\" target=\"_blank\" rel=\"noopener noreferrer\">sass/scss</a></li>\n<li><a href=\"https://stylus-lang.com/\" target=\"_blank\" rel=\"noopener noreferrer\">stylus</a></li>\n</ul>\n</li>\n<li>规范\n<ul>\n<li><a href=\"https://github.com/ruanyf/document-style-guide\" target=\"_blank\" rel=\"noopener noreferrer\">中文技术文档写作规范</a></li>\n<li><a href=\"https://v3.cn.vuejs.org/guide/contributing/writing-guide.html\" target=\"_blank\" rel=\"noopener noreferrer\">Vue 文档编写指南</a></li>\n<li><a href=\"https://editorconfig.org/\" target=\"_blank\" rel=\"noopener noreferrer\">EditorConfig</a></li>\n<li><a href=\"https://ls-lint.org/\" target=\"_blank\" rel=\"noopener noreferrer\">ls-lint</a></li>\n<li><a href=\"https://prettier.io/\" target=\"_blank\" rel=\"noopener noreferrer\">prettier</a></li>\n<li><a href=\"https://github.com/DavidAnson/markdownlint\" target=\"_blank\" rel=\"noopener noreferrer\">markdownlint</a></li>\n<li><a href=\"https://github.com/lint-md/lint-md\" target=\"_blank\" rel=\"noopener noreferrer\">lint-md</a></li>\n<li><a href=\"https://eslint.org/\" target=\"_blank\" rel=\"noopener noreferrer\">eslint</a></li>\n<li><a href=\"https://stylelint.io/\" target=\"_blank\" rel=\"noopener noreferrer\">stylelint</a></li>\n<li><a href=\"https://commitlint.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">commitlint</a></li>\n<li><a href=\"https://github.com/commitizen/cz-cli\" target=\"_blank\" rel=\"noopener noreferrer\">commitizen</a></li>\n<li><a href=\"https://github.com/typicode/husky\" target=\"_blank\" rel=\"noopener noreferrer\">husky</a></li>\n<li><a href=\"https://github.com/okonet/lint-staged\" target=\"_blank\" rel=\"noopener noreferrer\">lint-staged</a></li>\n<li><a href=\"https://github.com/MillCloud/fabric\" target=\"_blank\" rel=\"noopener noreferrer\">@modyqyw/fabric</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.typescriptlang.org/\" target=\"_blank\" rel=\"noopener noreferrer\">typescript</a>\n<ul>\n<li><a href=\"https://ts.xcatliu.com/basics\" target=\"_blank\" rel=\"noopener noreferrer\">入门教程</a></li>\n<li><a href=\"https://www.typescriptlang.org/docs/home.html\" target=\"_blank\" rel=\"noopener noreferrer\">官方教程</a></li>\n<li><a href=\"https://jkchao.github.io/typescript-book-chinese/\" target=\"_blank\" rel=\"noopener noreferrer\">深入理解 typescript</a></li>\n<li><a href=\"https://juejin.im/post/6856410900577026061\" target=\"_blank\" rel=\"noopener noreferrer\">从零开始配置 TypeScript 项目</a></li>\n<li><a href=\"https://tsch.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Type Challenges</a></li>\n</ul>\n</li>\n<li>数据结构和算法\n<ul>\n<li><a href=\"https://github.com/sisterAn/JavaScript-Algorithms\" target=\"_blank\" rel=\"noopener noreferrer\">前端算法体系</a></li>\n<li><a href=\"https://ziyi2.github.io/algorithms/\" target=\"_blank\" rel=\"noopener noreferrer\">IAlgorithms</a></li>\n<li><a href=\"https://101.zoo.team/\" target=\"_blank\" rel=\"noopener noreferrer\">算法 101</a></li>\n</ul>\n</li>\n<li>正则表达式\n<ul>\n<li><a href=\"https://github.com/qdlaoyao/js-regex-mini-book\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript 正则迷你书</a></li>\n</ul>\n</li>\n<li>设计模式\n<ul>\n<li><a href=\"https://weread.qq.com/web/reader/9cf32ff0811e1abd8g0134b2\" target=\"_blank\" rel=\"noopener noreferrer\">javascript 设计模式</a></li>\n<li><a href=\"https://weread.qq.com/web/reader/6bf3215071a123016bf0b74\" target=\"_blank\" rel=\"noopener noreferrer\">javascript 设计模式与开发实践</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"静态网站生成\"> 静态网站生成</h2>\n<ul>\n<li><a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener noreferrer\">hexo</a></li>\n<li><a href=\"https://vuepress.vuejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">vuepress</a>\n<ul>\n<li><a href=\"https://vuepress-theme-hope.github.io/zh/\" target=\"_blank\" rel=\"noopener noreferrer\">vuepress-theme-hope</a></li>\n<li><a href=\"https://vuepress2.netlify.app/\" target=\"_blank\" rel=\"noopener noreferrer\">vuepress-next</a></li>\n<li><a href=\"https://vitepress.vuejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">vitepress</a>\n<ul>\n<li><a href=\"https://github.com/dewfall123/vitepress-for-component\" target=\"_blank\" rel=\"noopener noreferrer\">vitepress-for-components</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"https://gridsome.org/\" target=\"_blank\" rel=\"noopener noreferrer\">gridsome</a></li>\n<li><a href=\"https://nuxtjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">nuxt</a></li>\n<li><a href=\"https://d.umijs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">dumi</a></li>\n<li><a href=\"https://v2.docusaurus.io/\" target=\"_blank\" rel=\"noopener noreferrer\">docusaurus</a></li>\n<li><a href=\"https://www.gatsbyjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">gatsby</a>\n<ul>\n<li><a href=\"https://www.docz.site/\" target=\"_blank\" rel=\"noopener noreferrer\">docz</a></li>\n</ul>\n</li>\n<li><a href=\"https://nextjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">next</a></li>\n<li><a href=\"https://pagic.cn/\" target=\"_blank\" rel=\"noopener noreferrer\">pagic</a></li>\n<li><a href=\"https://gohugo.io/\" target=\"_blank\" rel=\"noopener noreferrer\">hugo</a></li>\n<li><a href=\"https://jekyllrb.com/\" target=\"_blank\" rel=\"noopener noreferrer\">jekyll</a></li>\n<li><a href=\"https://cn.sli.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">slidev</a> - 演示文稿</li>\n</ul>\n<h2 id=\"界面和交互设计\"> 界面和交互设计</h2>\n<h3 id=\"资料\"> 资料</h3>\n<ul>\n<li><a href=\"https://book.douban.com/subject/26642302/\" target=\"_blank\" rel=\"noopener noreferrer\">About Face 4: 交互设计精髓</a></li>\n<li><a href=\"https://book.douban.com/subject/3821157/\" target=\"_blank\" rel=\"noopener noreferrer\">Web 界面设计</a></li>\n<li><a href=\"https://book.douban.com/subject/25716088/\" target=\"_blank\" rel=\"noopener noreferrer\">界面设计模式</a></li>\n<li><a href=\"https://book.douban.com/subject/3323633/\" target=\"_blank\" rel=\"noopener noreferrer\">写给大家看的设计书</a></li>\n<li><a href=\"https://book.douban.com/subject/26742341/\" target=\"_blank\" rel=\"noopener noreferrer\">设计心理学</a></li>\n<li><a href=\"https://book.douban.com/subject/4886100/\" target=\"_blank\" rel=\"noopener noreferrer\">Web 表单设计</a></li>\n<li><a href=\"https://www.uisdc.com/icon-design-style\" target=\"_blank\" rel=\"noopener noreferrer\">图标设计类型和风格总结</a></li>\n</ul>\n<h3 id=\"体系\"> 体系</h3>\n<ul>\n<li><a href=\"https://experience.sap.com/fiori-design-web/\" target=\"_blank\" rel=\"noopener noreferrer\">Fiori Design</a></li>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/\" target=\"_blank\" rel=\"noopener noreferrer\">Human Interface Guidelines</a></li>\n<li><a href=\"https://lightningdesignsystem.com/getting-started/\" target=\"_blank\" rel=\"noopener noreferrer\">Lightning Design System</a></li>\n<li><a href=\"https://material.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Material Design</a></li>\n<li><a href=\"https://atomicdesign.bradfrost.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Atomic Design</a>\n<ul>\n<li><a href=\"https://www.uisdc.com/atomic-design-theory\" target=\"_blank\" rel=\"noopener noreferrer\">中文总结</a></li>\n</ul>\n</li>\n<li><a href=\"https://ant-design.gitee.io/docs/spec/introduce-cn\" target=\"_blank\" rel=\"noopener noreferrer\">Ant Design</a></li>\n<li><a href=\"https://www.microsoft.com/design/fluent/\" target=\"_blank\" rel=\"noopener noreferrer\">Fluent Design</a></li>\n<li><a href=\"https://devui.design/\" target=\"_blank\" rel=\"noopener noreferrer\">DevUI Design</a></li>\n<li><a href=\"https://primer.style/\" target=\"_blank\" rel=\"noopener noreferrer\">Primer Design</a></li>\n<li><a href=\"https://eva.design/\" target=\"_blank\" rel=\"noopener noreferrer\">Eva Design</a></li>\n<li><a href=\"https://design.youzan.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Zan Design</a></li>\n</ul>\n<h3 id=\"字体\"> 字体</h3>\n<ul>\n<li><a href=\"https://www.websiteplanet.com/blog/best-free-fonts/\" target=\"_blank\" rel=\"noopener noreferrer\">70+ Best Free Fonts for Designers – Free for Commercial Use in 2021</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/69175576\" target=\"_blank\" rel=\"noopener noreferrer\">免费可商用字体指南</a></li>\n<li><a href=\"https://www.uisdc.com/2020-free-font\" target=\"_blank\" rel=\"noopener noreferrer\">免费可商用中文字体合集（较新）</a></li>\n<li><a href=\"https://www.100font.com\" target=\"_blank\" rel=\"noopener noreferrer\">100font</a></li>\n<li><a href=\"https://www.maoken.com\" target=\"_blank\" rel=\"noopener noreferrer\">猫啃网</a></li>\n<li><a href=\"https://www.zfont.cn\" target=\"_blank\" rel=\"noopener noreferrer\">找字体</a></li>\n<li><a href=\"https://izihun.com\" target=\"_blank\" rel=\"noopener noreferrer\">字魂</a></li>\n<li><a href=\"https://aifont.alicdn.com/AlibabaPuHuiTi/AlibabaPuHuiTiAll.zip\" target=\"_blank\" rel=\"noopener noreferrer\">阿里巴巴普惠体</a></li>\n<li><a href=\"https://github.com/welai/glow-sans/releases\" target=\"_blank\" rel=\"noopener noreferrer\">未来荧黑</a></li>\n</ul>\n<h3 id=\"图标\"> 图标</h3>\n<ul>\n<li><a href=\"https://github.com/antfu/icones\" target=\"_blank\" rel=\"noopener noreferrer\">icones</a></li>\n<li><a href=\"https://www.iconfont.cn/\" target=\"_blank\" rel=\"noopener noreferrer\">iconfont</a></li>\n<li><a href=\"https://icons.getbootstrap.com/\" target=\"_blank\" rel=\"noopener noreferrer\">bootstrap-icons</a></li>\n<li><a href=\"https://materialdesignicons.com/\" target=\"_blank\" rel=\"noopener noreferrer\">material-design-icons</a></li>\n<li><a href=\"https://google.github.io/material-design-icons/\" target=\"_blank\" rel=\"noopener noreferrer\">material-icons</a></li>\n<li><a href=\"https://remixicon.com/\" target=\"_blank\" rel=\"noopener noreferrer\">remix-icons</a></li>\n<li><a href=\"https://ionicons.com/\" target=\"_blank\" rel=\"noopener noreferrer\">ionicons</a></li>\n<li><a href=\"https://primer.style/octicons/\" target=\"_blank\" rel=\"noopener noreferrer\">octicons</a></li>\n<li><a href=\"https://www.flaticon.com/\" target=\"_blank\" rel=\"noopener noreferrer\">flaticon</a></li>\n<li><a href=\"https://fontawesome.com/\" target=\"_blank\" rel=\"noopener noreferrer\">fontawesome</a></li>\n<li><a href=\"https://github.com/ant-design/ant-design-icons\" target=\"_blank\" rel=\"noopener noreferrer\">ant-design-icons</a></li>\n<li><a href=\"https://icons.coreui.io/icons/\" target=\"_blank\" rel=\"noopener noreferrer\">coreui-icons</a></li>\n<li><a href=\"https://tablericons.com/\" target=\"_blank\" rel=\"noopener noreferrer\">tabler-icons</a></li>\n<li><a href=\"https://simpleicons.org/\" target=\"_blank\" rel=\"noopener noreferrer\">simple-icons</a></li>\n<li><a href=\"https://iconpark.bytedance.com/\" target=\"_blank\" rel=\"noopener noreferrer\">icon-park</a></li>\n<li><a href=\"https://iconic.app/\" target=\"_blank\" rel=\"noopener noreferrer\">iconic</a></li>\n<li><a href=\"https://iconify.design/\" target=\"_blank\" rel=\"noopener noreferrer\">iconify</a></li>\n</ul>\n<h2 id=\"代码管理\"> 代码管理</h2>\n<ul>\n<li>svn</li>\n<li>git\n<ul>\n<li><a href=\"https://git-scm.com/book/en/v2\" target=\"_blank\" rel=\"noopener noreferrer\">pro git</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/nvm-sh/nvm\" target=\"_blank\" rel=\"noopener noreferrer\">nvm</a> - 管理 node 版本\n<ul>\n<li><a href=\"https://github.com/coreybutler/nvm-windows\" target=\"_blank\" rel=\"noopener noreferrer\">nvm-windows</a> - Windows 版本的 nvm，命令和配置有一些差异</li>\n<li><a href=\"https://github.com/jasongin/nvs\" target=\"_blank\" rel=\"noopener noreferrer\">nvs</a> - 管理 node 版本</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/npm/cli\" target=\"_blank\" rel=\"noopener noreferrer\">npm</a>\n<ul>\n<li><a href=\"https://classic.yarnpkg.com/zh-Hans\" target=\"_blank\" rel=\"noopener noreferrer\">yarn</a></li>\n<li><a href=\"https://pnpm.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">pnpm</a></li>\n<li><a href=\"https://github.com/antfu/ni\" target=\"_blank\" rel=\"noopener noreferrer\">@antfu/ni</a> - 自动选择 npm/yarn/pnpm</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/lerna/lerna\" target=\"_blank\" rel=\"noopener noreferrer\">lerna</a> - monorepo</li>\n<li><a href=\"https://nx.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">nx</a> - monorepo</li>\n<li><a href=\"https://github.com/raineorshine/npm-check-updates\" target=\"_blank\" rel=\"noopener noreferrer\">npm-check-updates</a> - 可以结合 <code>yarn upgrade-interactive</code> 使用</li>\n</ul>\n<h2 id=\"选型\"> 选型</h2>\n<h3 id=\"原生\"> 原生</h3>\n<ul>\n<li>桌面端网页，移动端网页\n<ul>\n<li>ie8 - <a href=\"https://github.com/jquery/jquery\" target=\"_blank\" rel=\"noopener noreferrer\">jquery</a> 1 + <a href=\"https://github.com/twbs/bootstrap\" target=\"_blank\" rel=\"noopener noreferrer\">bootstrap</a> 3 + <a href=\"https://github.com/wenzhixin/bootstrap-table\" target=\"_blank\" rel=\"noopener noreferrer\">bootstrap-table</a></li>\n<li>ie11+ - jquery 3 + bootstrap 4 + bootstrap-table</li>\n</ul>\n</li>\n<li>移动端应用\n<ul>\n<li><a href=\"https://flutter.cn/\" target=\"_blank\" rel=\"noopener noreferrer\">flutter</a></li>\n<li><a href=\"https://ionicframework.com/\" target=\"_blank\" rel=\"noopener noreferrer\">ionic</a></li>\n<li><a href=\"https://cordova.apache.org/\" target=\"_blank\" rel=\"noopener noreferrer\">cordova</a></li>\n<li><a href=\"https://nativescript.org/\" target=\"_blank\" rel=\"noopener noreferrer\">native-script</a></li>\n<li><a href=\"https://capacitorjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">capacitor</a></li>\n<li><a href=\"https://framework7.io/\" target=\"_blank\" rel=\"noopener noreferrer\">framework7</a></li>\n</ul>\n</li>\n<li>小程序\n<ul>\n<li>各家小程序原生</li>\n</ul>\n</li>\n<li>桌面端应用\n<ul>\n<li>jquery 3 + bootstrap 4 + bootstrap-table + <a href=\"https://www.electronjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">electron</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vue-系\"> Vue 系</h3>\n<ul>\n<li>桌面端网页\n<ul>\n<li>(<a href=\"https://cn.vuejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">vue</a> + <a href=\"https://router.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener noreferrer\">vue-router</a> + <a href=\"https://vuex.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener noreferrer\">vuex</a>) / <a href=\"https://winixt.gitee.io/fesjs/zh/\" target=\"_blank\" rel=\"noopener noreferrer\">fes</a> / <a href=\"https://nuxtjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">nuxt</a></li>\n<li><a href=\"https://vuetifyjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">vuetify</a> / <a href=\"https://element.eleme.cn/\" target=\"_blank\" rel=\"noopener noreferrer\">element</a> / <a href=\"https://element-plus.org/\" target=\"_blank\" rel=\"noopener noreferrer\">element-plus</a> / <a href=\"https://2x.antdv.com/\" target=\"_blank\" rel=\"noopener noreferrer\">antd-vue-next</a></li>\n<li><a href=\"https://tailwindcss.com/\" target=\"_blank\" rel=\"noopener noreferrer\">tailwindcss</a> / <a href=\"https://windicss.org/\" target=\"_blank\" rel=\"noopener noreferrer\">windicss</a> + <a href=\"https://daisyui.com/\" target=\"_blank\" rel=\"noopener noreferrer\">daisy-ui</a></li>\n<li><a href=\"https://vueuse.org/\" target=\"_blank\" rel=\"noopener noreferrer\">vue-use</a></li>\n</ul>\n</li>\n<li>移动端网页\n<ul>\n<li>(vue + vue-router + vuex) / fes / nuxt</li>\n<li>vuetify / <a href=\"https://nutui.jd.com/\" target=\"_blank\" rel=\"noopener noreferrer\">nut-ui</a> / <a href=\"https://vant-contrib.gitee.io/vant/\" target=\"_blank\" rel=\"noopener noreferrer\">vant</a></li>\n<li>tailwindcss / windicss + daisy-ui</li>\n<li>vue-use</li>\n</ul>\n</li>\n<li>移动端应用，小程序\n<ul>\n<li><a href=\"https://uniapp.dcloud.io/\" target=\"_blank\" rel=\"noopener noreferrer\">uni-app</a> + vuex</li>\n<li><a href=\"https://modyqyw.github.io/mp-scss/\" target=\"_blank\" rel=\"noopener noreferrer\">@modyqyw/mp-scss</a> + <a href=\"https://www.thorui.cn/doc/\" target=\"_blank\" rel=\"noopener noreferrer\">thor-ui</a> + <a href=\"https://github.com/dcloudio/uni-ui\" target=\"_blank\" rel=\"noopener noreferrer\">uni-ui</a> + <a href=\"https://uviewui.com/\" target=\"_blank\" rel=\"noopener noreferrer\">uview-ui</a></li>\n</ul>\n</li>\n<li>桌面端应用\n<ul>\n<li>(vue + vue-router + vuex) / fes / nuxt</li>\n<li>vuetify / element / element-plus / ant-design-vue-next</li>\n<li>tailwindcss / windicss + daisy-ui</li>\n<li>vue-use</li>\n<li>electron，nuxt 目前没有插件</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://v3.cn.vuejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">vue-next</a></p>\n<p><a href=\"https://next.router.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener noreferrer\">vue-router-next</a></p>\n<p><a href=\"https://next.vuex.vuejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">vuex-next</a></p>\n<p><a href=\"https://next.cli.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener noreferrer\">vue-cli-next</a></p>\n<h3 id=\"react-系\"> React 系</h3>\n<ul>\n<li>桌面端网页\n<ul>\n<li>(<a href=\"https://zh-hans.reactjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">react</a> + <a href=\"https://reacttraining.com/react-router/\" target=\"_blank\" rel=\"noopener noreferrer\">react-router</a>) / <a href=\"https://umijs.org/zh-CN\" target=\"_blank\" rel=\"noopener noreferrer\">umi</a> / <a href=\"https://nextjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">next</a></li>\n<li><a href=\"https://github.com/diegohaz/constate\" target=\"_blank\" rel=\"noopener noreferrer\">constate</a> / (<a href=\"https://redux.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">redux</a> + <a href=\"https://react-redux.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">react-redux</a> + <a href=\"https://redux-toolkit.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">redux-toolkit</a>) / <a href=\"https://github.com/jamiebuilds/unstated-next/blob/master/README-zh-cn.md\" target=\"_blank\" rel=\"noopener noreferrer\">unstated-next</a> / <a href=\"https://mobx.js.org/README.html\" target=\"_blank\" rel=\"noopener noreferrer\">mobx</a> / <a href=\"https://recoiljs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">recoil</a></li>\n<li><a href=\"https://immerjs.github.io/immer/\" target=\"_blank\" rel=\"noopener noreferrer\">immer</a></li>\n<li>(<a href=\"https://youzan.github.io/zent/\" target=\"_blank\" rel=\"noopener noreferrer\">zent</a> / <a href=\"https://blueprintjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">blueprint</a> / <a href=\"https://material-ui.com/\" target=\"_blank\" rel=\"noopener noreferrer\">material-ui</a> + <a href=\"https://streamich.github.io/react-use/\" target=\"_blank\" rel=\"noopener noreferrer\">react-use</a> + <a href=\"https://swr.vercel.app/\" target=\"_blank\" rel=\"noopener noreferrer\">swr</a> / <a href=\"https://react-query.tanstack.com/\" target=\"_blank\" rel=\"noopener noreferrer\">react-query</a>) / (<a href=\"https://ant.design/\" target=\"_blank\" rel=\"noopener noreferrer\">antd</a> + <a href=\"https://procomponents.ant.design/\" target=\"_blank\" rel=\"noopener noreferrer\">antd-pro-components</a> + <a href=\"https://ahooks.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">ahooks</a>)</li>\n<li><a href=\"https://tailwindcss.com/\" target=\"_blank\" rel=\"noopener noreferrer\">tailwindcss</a> / <a href=\"https://windicss.org/\" target=\"_blank\" rel=\"noopener noreferrer\">windicss</a> + <a href=\"https://daisyui.com/\" target=\"_blank\" rel=\"noopener noreferrer\">daisy-ui</a></li>\n</ul>\n</li>\n<li>移动端网页\n<ul>\n<li>(react + react-router) / umi / next</li>\n<li>constate / (redux + react-redux + redux-toolkit) / unstated-next / mobx / recoil</li>\n<li>immer</li>\n<li><a href=\"http://yep-react.jd.com/\" target=\"_blank\" rel=\"noopener noreferrer\">yep-react</a> / <a href=\"https://zarm.design/\" target=\"_blank\" rel=\"noopener noreferrer\">zarm</a> / <a href=\"https://next.mobile.ant.design/\" target=\"_blank\" rel=\"noopener noreferrer\">antd-mobile-next</a> / <a href=\"https://ui.alitajs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">antd-mobile-plus</a></li>\n<li>tailwindcss / windicss + daisy-ui</li>\n<li>(react-use + swr / react-query) / ahooks</li>\n</ul>\n</li>\n<li>移动端应用\n<ul>\n<li><a href=\"https://expo.io/\" target=\"_blank\" rel=\"noopener noreferrer\">expo</a></li>\n<li>react-router / <a href=\"https://reactnavigation.org/\" target=\"_blank\" rel=\"noopener noreferrer\">react-navigation</a></li>\n<li>constate / (redux + react-redux + redux-toolkit) / unstated-next / mobx / recoil</li>\n<li>immer</li>\n<li><a href=\"https://reactnativeelements.com/\" target=\"_blank\" rel=\"noopener noreferrer\">react-native-elements</a> / <a href=\"https://akveo.github.io/react-native-ui-kitten/\" target=\"_blank\" rel=\"noopener noreferrer\">react-native-ui-kitten</a></li>\n<li><a href=\"https://github.com/react-native-community/hooks\" target=\"_blank\" rel=\"noopener noreferrer\">@react-native-community/hooks</a> / (react-use + swr / react-query) / ahooks</li>\n</ul>\n</li>\n<li>小程序\n<ul>\n<li><a href=\"https://taro.zone/\" target=\"_blank\" rel=\"noopener noreferrer\">taro</a> / <a href=\"https://remaxjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">remax</a> / <a href=\"https://rax.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">rax</a></li>\n<li>constate / (redux + react-redux + redux-toolkit) / unstated-next / mobx / recoil</li>\n<li>immer</li>\n<li>@modyqyw/mp-scss</li>\n</ul>\n</li>\n<li>桌面端应用\n<ul>\n<li>(react + react-router) / umi / next</li>\n<li>constate / (redux + react-redux + redux-toolkit) / unstated-next / recoil</li>\n<li>immer</li>\n<li>(zent / blueprint / material-ui + react-use + swr / react-query) / (antd + antd-pro-components + ahooks)</li>\n<li>tailwindcss / windicss + daisy-ui</li>\n<li>electron，umi 可直接使用 <a href=\"https://github.com/BySlin/umi-plugin-electron-builder\" target=\"_blank\" rel=\"noopener noreferrer\">umi-plugin-electron-builder</a>，next 可直接使用 <a href=\"https://github.com/saltyshiomix/nextron\" target=\"_blank\" rel=\"noopener noreferrer\">nextron</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"规范\"> 规范</h2>\n<ul>\n<li><a href=\"https://github.com/ruanyf/document-style-guide\" target=\"_blank\" rel=\"noopener noreferrer\">中文技术文档写作规范</a></li>\n<li><a href=\"https://v3.cn.vuejs.org/guide/contributing/writing-guide.html\" target=\"_blank\" rel=\"noopener noreferrer\">Vue 文档编写指南</a></li>\n<li><a href=\"https://editorconfig.org/\" target=\"_blank\" rel=\"noopener noreferrer\">EditorConfig</a> - 在不同的编辑器和 IDE 保持一致的风格</li>\n<li><a href=\"https://ls-lint.org/\" target=\"_blank\" rel=\"noopener noreferrer\">ls-lint</a> - 目录校验</li>\n<li><a href=\"https://prettier.io/\" target=\"_blank\" rel=\"noopener noreferrer\">prettier</a> - 格式化</li>\n<li><a href=\"https://github.com/DavidAnson/markdownlint\" target=\"_blank\" rel=\"noopener noreferrer\">markdownlint</a> - markdown 格式化</li>\n<li><a href=\"https://github.com/lint-md/lint-md\" target=\"_blank\" rel=\"noopener noreferrer\">lint-md</a> - markdown 格式化</li>\n<li><a href=\"https://eslint.org/\" target=\"_blank\" rel=\"noopener noreferrer\">eslint</a> - 脚本文件校验 + 格式化</li>\n<li><a href=\"https://stylelint.io/\" target=\"_blank\" rel=\"noopener noreferrer\">stylelint</a> - 样式文件呢校验 + 格式化</li>\n<li><a href=\"https://commitlint.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">commitlint</a> - 校验提交</li>\n<li><a href=\"https://github.com/commitizen/cz-cli\" target=\"_blank\" rel=\"noopener noreferrer\">commitizen</a> - 引导填写提交信息</li>\n<li><a href=\"https://github.com/typicode/husky\" target=\"_blank\" rel=\"noopener noreferrer\">husky</a> - Git 钩子处理</li>\n<li><a href=\"https://github.com/okonet/lint-staged\" target=\"_blank\" rel=\"noopener noreferrer\">lint-staged</a> - 校验和格式化暂存区文件</li>\n<li><a href=\"https://github.com/MillCloud/fabric\" target=\"_blank\" rel=\"noopener noreferrer\">@modyqyw/fabric</a> - 通用配置指引</li>\n</ul>\n<h2 id=\"cdn\"> CDN</h2>\n<ul>\n<li><a href=\"https://cdnjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">cdnjs</a></li>\n<li><a href=\"https://cdn.baomitu.com/\" target=\"_blank\" rel=\"noopener noreferrer\">360 前端静态资源库</a></li>\n<li><a href=\"https://www.bootcdn.cn/\" target=\"_blank\" rel=\"noopener noreferrer\">bootcdn</a></li>\n<li><a href=\"https://unpkg.com/\" target=\"_blank\" rel=\"noopener noreferrer\">unpkg</a></li>\n<li><a href=\"https://www.jsdelivr.com/\" target=\"_blank\" rel=\"noopener noreferrer\">jsdelivr</a></li>\n</ul>\n<h2 id=\"构建\"> 构建</h2>\n<ul>\n<li><a href=\"https://github.com/kentcdodds/cross-env\" target=\"_blank\" rel=\"noopener noreferrer\">cross-env</a> - 设置跨平台环境变量</li>\n<li><a href=\"https://github.com/isaacs/rimraf\" target=\"_blank\" rel=\"noopener noreferrer\">rimraf</a> - 跨平台删除文件</li>\n<li><a href=\"https://babeljs.io/\" target=\"_blank\" rel=\"noopener noreferrer\">babel</a>\n<ul>\n<li><a href=\"https://github.com/babel/awesome-babel\" target=\"_blank\" rel=\"noopener noreferrer\">awesome-babel</a></li>\n<li><a href=\"https://www.jiangruitao.com/docs/babel/\" target=\"_blank\" rel=\"noopener noreferrer\">babel 教程</a></li>\n<li><a href=\"https://babeljs.io/docs/en/babel-preset-env\" target=\"_blank\" rel=\"noopener noreferrer\">@babel/preset-env</a></li>\n<li><a href=\"https://babeljs.io/docs/en/babel-plugin-transform-runtime\" target=\"_blank\" rel=\"noopener noreferrer\">@babel/plugin-transform-runtime</a></li>\n<li><a href=\"https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/babel-preset-app\" target=\"_blank\" rel=\"noopener noreferrer\">@vue/babel-preset-app</a></li>\n<li><a href=\"https://babeljs.io/docs/en/babel-preset-react\" target=\"_blank\" rel=\"noopener noreferrer\">@babel/preset-react</a></li>\n<li><a href=\"https://babeljs.io/docs/en/babel-preset-typescript\" target=\"_blank\" rel=\"noopener noreferrer\">@babel/preset-typescript</a></li>\n<li><a href=\"https://github.com/zloirock/core-js\" target=\"_blank\" rel=\"noopener noreferrer\">core-js</a></li>\n<li><a href=\"https://github.com/facebook/regenerator/tree/master/packages/regenerator-runtime\" target=\"_blank\" rel=\"noopener noreferrer\">regenerator-runtime</a></li>\n<li><a href=\"https://babeljs.io/docs/en/babel-plugin-syntax-dynamic-import/\" target=\"_blank\" rel=\"noopener noreferrer\">@babel/plugin-syntax-dynamic-import</a></li>\n</ul>\n</li>\n<li><a href=\"https://swc.rs/\" target=\"_blank\" rel=\"noopener noreferrer\">swc</a></li>\n<li><a href=\"https://esbuild.github.io/\" target=\"_blank\" rel=\"noopener noreferrer\">esbuild</a>\n<ul>\n<li><a href=\"https://github.com/egoist/awesome-esbuild\" target=\"_blank\" rel=\"noopener noreferrer\">awesome-esbuild</a></li>\n</ul>\n</li>\n<li><a href=\"https://postcss.org/\" target=\"_blank\" rel=\"noopener noreferrer\">postcss</a>\n<ul>\n<li><a href=\"https://github.com/jdrgomes/awesome-postcss\" target=\"_blank\" rel=\"noopener noreferrer\">awesome-postcss</a></li>\n<li><a href=\"https://github.com/postcss/autoprefixer\" target=\"_blank\" rel=\"noopener noreferrer\">autoprefixer</a></li>\n<li><a href=\"https://github.com/csstools/postcss-preset-env\" target=\"_blank\" rel=\"noopener noreferrer\">postcss-preset-env</a></li>\n<li><a href=\"https://cssnano.co/\" target=\"_blank\" rel=\"noopener noreferrer\">cssnano</a></li>\n<li><a href=\"https://purgecss.com/\" target=\"_blank\" rel=\"noopener noreferrer\">purgecss</a></li>\n</ul>\n</li>\n<li><a href=\"https://webpack.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">webpack</a>\n<ul>\n<li><a href=\"https://github.com/webpack-contrib/awesome-webpack\" target=\"_blank\" rel=\"noopener noreferrer\">awesome-webpack</a></li>\n<li><a href=\"https://www.jiangruitao.com/webpack/\" target=\"_blank\" rel=\"noopener noreferrer\">webpack 教程</a></li>\n<li><a href=\"https://xie.infoq.cn/article/ddca4caa394241447fa0aa3c0\" target=\"_blank\" rel=\"noopener noreferrer\">一文吃透 Webpack 核心原理</a></li>\n<li><a href=\"https://github.com/survivejs/webpack-merge\" target=\"_blank\" rel=\"noopener noreferrer\">webpack-merge</a></li>\n<li><a href=\"https://github.com/neutrinojs/webpack-chain\" target=\"_blank\" rel=\"noopener noreferrer\">webpack-chain</a></li>\n<li><a href=\"https://github.com/shellscape/webpack-nano\" target=\"_blank\" rel=\"noopener noreferrer\">webpack-nano</a></li>\n<li>plugins\n<ul>\n<li><a href=\"https://github.com/geowarin/friendly-errors-webpack-plugin\" target=\"_blank\" rel=\"noopener noreferrer\">friendly-errors-webpack-plugin</a></li>\n<li><a href=\"https://github.com/webpack-contrib/webpack-bundle-analyzer\" target=\"_blank\" rel=\"noopener noreferrer\">webpack-bundle-analyzer</a></li>\n<li><a href=\"https://github.com/stephencookdev/speed-measure-webpack-plugin\" target=\"_blank\" rel=\"noopener noreferrer\">speed-measure-webpack-plugin</a></li>\n<li><a href=\"https://github.com/webpack-contrib/terser-webpack-plugin/\" target=\"_blank\" rel=\"noopener noreferrer\">terser-webpack-plugin</a> - 代替 uglify-webpack-plugin</li>\n<li><a href=\"https://github.com/sorrycc/esbuild-webpack-plugin\" target=\"_blank\" rel=\"noopener noreferrer\">esbuild-webpack-plugin</a></li>\n<li><a href=\"https://webpack.js.org/plugins/dll-plugin/\" target=\"_blank\" rel=\"noopener noreferrer\">dll-plugin</a></li>\n<li><a href=\"https://github.com/johnagan/clean-webpack-plugin\" target=\"_blank\" rel=\"noopener noreferrer\">clean-webpack-plugin</a></li>\n<li><a href=\"https://github.com/jantimon/html-webpack-plugin\" target=\"_blank\" rel=\"noopener noreferrer\">html-webpack-plugin</a></li>\n<li><a href=\"https://github.com/webpack-contrib/copy-webpack-plugin\" target=\"_blank\" rel=\"noopener noreferrer\">copy-webpack-plugin</a></li>\n<li><a href=\"https://github.com/webpack-contrib/compression-webpack-plugin\" target=\"_blank\" rel=\"noopener noreferrer\">compression-webpack-plugin</a></li>\n<li><a href=\"https://github.com/chrisvfritz/prerender-spa-plugin\" target=\"_blank\" rel=\"noopener noreferrer\">prerender-spa-plugin</a></li>\n<li><a href=\"https://github.com/webpack-contrib/mini-css-extract-plugin\" target=\"_blank\" rel=\"noopener noreferrer\">mini-css-extract-plugin</a></li>\n<li><a href=\"https://github.com/NMFR/optimize-css-assets-webpack-plugin\" target=\"_blank\" rel=\"noopener noreferrer\">optimize-css-assets-webpack-plugin</a> - webpack 5 使用 <a href=\"https://github.com/webpack-contrib/css-minimizer-webpack-plugin\" target=\"_blank\" rel=\"noopener noreferrer\">css-minimizer-webpack-plugin</a></li>\n<li><a href=\"https://github.com/webpack-contrib/eslint-webpack-plugin\" target=\"_blank\" rel=\"noopener noreferrer\">eslint-webpack-plugin</a> - 代替 eslint-loader</li>\n<li><a href=\"https://github.com/webpack-contrib/stylelint-webpack-plugin\" target=\"_blank\" rel=\"noopener noreferrer\">stylelint-webpack-plugin</a></li>\n<li><a href=\"https://github.com/TypeStrong/fork-ts-checker-webpack-plugin\" target=\"_blank\" rel=\"noopener noreferrer\">fork-ts-checker-webpack-plugin</a></li>\n<li><a href=\"https://github.com/unjs/webpackbar\" target=\"_blank\" rel=\"noopener noreferrer\">webpackbar</a></li>\n<li><a href=\"https://github.com/shellscape/webpack-manifest-plugin\" target=\"_blank\" rel=\"noopener noreferrer\">webpack-manifest-plugin</a></li>\n</ul>\n</li>\n<li>loaders\n<ul>\n<li><a href=\"https://github.com/webpack-contrib/thread-loader\" target=\"_blank\" rel=\"noopener noreferrer\">thread-loader</a> - 代替 happy-pack</li>\n<li><a href=\"https://github.com/webpack-contrib/cache-loader\" target=\"_blank\" rel=\"noopener noreferrer\">cache-loader</a></li>\n<li><a href=\"https://github.com/webpack-contrib/raw-loader\" target=\"_blank\" rel=\"noopener noreferrer\">raw-loader</a></li>\n<li><a href=\"https://github.com/webpack-contrib/url-loader\" target=\"_blank\" rel=\"noopener noreferrer\">url-loader</a></li>\n<li><a href=\"https://github.com/webpack-contrib/file-loader\" target=\"_blank\" rel=\"noopener noreferrer\">file-loader</a></li>\n<li><a href=\"https://github.com/babel/babel-loader\" target=\"_blank\" rel=\"noopener noreferrer\">babel-loader</a></li>\n<li><a href=\"https://github.com/TypeStrong/ts-loader\" target=\"_blank\" rel=\"noopener noreferrer\">ts-loader</a></li>\n<li><a href=\"https://github.com/webpack-contrib/style-loader\" target=\"_blank\" rel=\"noopener noreferrer\">style-loader</a></li>\n<li><a href=\"https://github.com/webpack-contrib/css-loader\" target=\"_blank\" rel=\"noopener noreferrer\">css-loader</a></li>\n<li><a href=\"https://github.com/webpack-contrib/sass-loader\" target=\"_blank\" rel=\"noopener noreferrer\">sass-loader</a></li>\n<li><a href=\"https://github.com/webpack-contrib/less-loader\" target=\"_blank\" rel=\"noopener noreferrer\">less-loader</a></li>\n<li><a href=\"https://github.com/webpack-contrib/stylus-loader\" target=\"_blank\" rel=\"noopener noreferrer\">stylus-loader</a></li>\n<li><a href=\"https://github.com/webpack-contrib/less-loader\" target=\"_blank\" rel=\"noopener noreferrer\">postcss-loader</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/modyqyw/webpack-demos\" target=\"_blank\" rel=\"noopener noreferrer\">modyqyw/webpack-demos</a> - webpack 入门示例</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/vitejs/vite\" target=\"_blank\" rel=\"noopener noreferrer\">vite</a>\n<ul>\n<li><a href=\"https://github.com/vitejs/awesome-vite\" target=\"_blank\" rel=\"noopener noreferrer\">awesome-vite</a></li>\n<li><a href=\"https://github.com/vitejs/vite/tree/main/packages/plugin-vue\" target=\"_blank\" rel=\"noopener noreferrer\">@vitejs/plugin-vue</a></li>\n<li><a href=\"https://github.com/underfin/vite-plugin-vue2\" target=\"_blank\" rel=\"noopener noreferrer\">vite-plugin-vue2</a></li>\n<li><a href=\"https://github.com/vitejs/vite/tree/main/packages/plugin-vue-jsx\" target=\"_blank\" rel=\"noopener noreferrer\">@vitejs/plugin-vue-jsx</a></li>\n<li><a href=\"https://github.com/vitejs/vite/tree/main/packages/plugin-react-refresh\" target=\"_blank\" rel=\"noopener noreferrer\">@vitejs/plugin-react-refresh</a></li>\n<li><a href=\"https://github.com/vitejs/vite/tree/main/packages/plugin-legacy\" target=\"_blank\" rel=\"noopener noreferrer\">@vitejs/plugin-legacy</a></li>\n<li><a href=\"https://github.com/alloc/vite-react-jsx\" target=\"_blank\" rel=\"noopener noreferrer\">vite-react-jsx</a></li>\n<li><a href=\"https://github.com/anncwb/vite-plugin-style-import\" target=\"_blank\" rel=\"noopener noreferrer\">vite-plugin-style-import</a></li>\n<li><a href=\"https://github.com/aleclarson/vite-tsconfig-paths\" target=\"_blank\" rel=\"noopener noreferrer\">vite-tsconfig-paths</a></li>\n<li><a href=\"https://github.com/windicss/vite-plugin-windicss\" target=\"_blank\" rel=\"noopener noreferrer\">vite-plugin-windicss</a></li>\n</ul>\n</li>\n<li><a href=\"https://rollupjs.org/guide/zh/\" target=\"_blank\" rel=\"noopener noreferrer\">rollup</a>\n<ul>\n<li><a href=\"https://github.com/rollup/awesome\" target=\"_blank\" rel=\"noopener noreferrer\">awesome-rollup</a></li>\n<li><a href=\"https://github.com/rollup/plugins/tree/master/packages/node-resolve\" target=\"_blank\" rel=\"noopener noreferrer\">@rollup/plugin-node-resolve</a></li>\n<li><a href=\"https://github.com/ezolenko/rollup-plugin-typescript2\" target=\"_blank\" rel=\"noopener noreferrer\">rollup-plugin-typescript2</a></li>\n<li><a href=\"https://github.com/TrySound/rollup-plugin-terser\" target=\"_blank\" rel=\"noopener noreferrer\">rollup-plugin-terser</a></li>\n<li><a href=\"https://github.com/Swatinem/rollup-plugin-dts\" target=\"_blank\" rel=\"noopener noreferrer\">rollup-plugin-dts</a></li>\n</ul>\n</li>\n<li><a href=\"https://v2.parceljs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">parcel-next</a>\n<ul>\n<li><a href=\"https://github.com/parcel-bundler/awesome-parcel\" target=\"_blank\" rel=\"noopener noreferrer\">awesome-parcel</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.snowpack.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">snowpack</a>\n<ul>\n<li><a href=\"https://github.com/rajasegar/awesome-snowpack\" target=\"_blank\" rel=\"noopener noreferrer\">awesome-snowpack</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/vercel/ncc\" target=\"_blank\" rel=\"noopener noreferrer\">@vercel/ncc</a></li>\n<li><a href=\"https://github.com/huozhi/bunchee\" target=\"_blank\" rel=\"noopener noreferrer\">bunchee</a></li>\n</ul>\n<p>实际开发时，非常建议使用 CLI 初始化然后开发。当然，做一个自己的模板，又或者用 <a href=\"https://yeoman.io/\" target=\"_blank\" rel=\"noopener noreferrer\">yeoman</a> 或者 <a href=\"https://oclif.io/\" target=\"_blank\" rel=\"noopener noreferrer\">oclif</a> 做一个自己的脚手架，都是不错的选择，但要记得持续维护。</p>\n<h2 id=\"调试\"> 调试</h2>\n<ul>\n<li><a href=\"https://developers.google.cn/web/tools/chrome-devtools\" target=\"_blank\" rel=\"noopener noreferrer\">chrome devtools</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Tools\" target=\"_blank\" rel=\"noopener noreferrer\">firefox devtools</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium\" target=\"_blank\" rel=\"noopener noreferrer\">edge devtools</a></li>\n<li><a href=\"https://www.lambdatest.com/\" target=\"_blank\" rel=\"noopener noreferrer\">LambdaTest</a> - 在线执行实时互动和自动的跨浏览器测试</li>\n<li><a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"noopener noreferrer\">jest</a> - 单元测试\n<ul>\n<li><a href=\"https://kulshekhar.github.io/ts-jest/\" target=\"_blank\" rel=\"noopener noreferrer\">ts-jest</a></li>\n</ul>\n</li>\n<li><a href=\"https://mochajs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">mocha</a></li>\n<li><a href=\"https://www.chaijs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">chai</a></li>\n<li><a href=\"https://sinonjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">sinon</a></li>\n<li><a href=\"https://testing-library.com/\" target=\"_blank\" rel=\"noopener noreferrer\">testing-library</a> - 组件测试</li>\n<li><a href=\"https://docs.cypress.io/\" target=\"_blank\" rel=\"noopener noreferrer\">cypress</a> - 端对端测试</li>\n<li><a href=\"https://nightwatchjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">nightwatch</a></li>\n<li><a href=\"https://devexpress.github.io/testcafe/\" target=\"_blank\" rel=\"noopener noreferrer\">testcafe</a></li>\n<li><a href=\"https://pptr.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">puppeteer</a></li>\n<li><a href=\"https://github.com/visionmedia/supertest\" target=\"_blank\" rel=\"noopener noreferrer\">supertest</a></li>\n<li><a href=\"https://github.com/liriliri/eruda/blob/master/doc/README_CN.md\" target=\"_blank\" rel=\"noopener noreferrer\">eruda</a> - 移动端网页调试面板</li>\n<li><a href=\"https://github.com/Tencent/vConsole/blob/dev/README_CN.md\" target=\"_blank\" rel=\"noopener noreferrer\">v-console</a> - 移动端网页调试面板</li>\n<li><a href=\"https://github.com/avwo/whistle/blob/master/README-zh_CN.md\" target=\"_blank\" rel=\"noopener noreferrer\">whistle</a> - 跨平台代理调试工具\n<ul>\n<li><a href=\"https://lightproxy.org/zh-CN\" target=\"_blank\" rel=\"noopener noreferrer\">light-proxy</a> - 跨平台代理调试工具</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/liriliri/chii/blob/master/docs/README_CN.md\" target=\"_blank\" rel=\"noopener noreferrer\">chii</a> - 远程调试工具</li>\n<li><a href=\"https://github.com/wuchangming/spy-debugger\" target=\"_blank\" rel=\"noopener noreferrer\">spy-debugger</a> - 一站式页面调试、抓包工具</li>\n<li><a href=\"https://github.com/vercel/serve\" target=\"_blank\" rel=\"noopener noreferrer\">serve</a> - 本地测试静态目录</li>\n</ul>\n<h2 id=\"持续集成\"> 持续集成</h2>\n<ul>\n<li><a href=\"https://flow.ci/\" target=\"_blank\" rel=\"noopener noreferrer\">flow-ci</a></li>\n<li><a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"noopener noreferrer\">travis-ci</a></li>\n<li><a href=\"https://circleci.com/\" target=\"_blank\" rel=\"noopener noreferrer\">circle-ci</a></li>\n<li><a href=\"https://www.jenkins.io/zh/\" target=\"_blank\" rel=\"noopener noreferrer\">jenkins</a></li>\n<li><a href=\"https://help.github.com/en/actions/building-and-testing-code-with-continuous-integration\" target=\"_blank\" rel=\"noopener noreferrer\">github-ci</a></li>\n</ul>\n<h2 id=\"发布与部署\"> 发布与部署</h2>\n<ul>\n<li><a href=\"https://github.com/sindresorhus/np\" target=\"_blank\" rel=\"noopener noreferrer\">np</a></li>\n<li><a href=\"https://github.com/release-it/release-it\" target=\"_blank\" rel=\"noopener noreferrer\">release-it</a></li>\n<li><a href=\"https://semantic-release.gitbook.io/semantic-release/\" target=\"_blank\" rel=\"noopener noreferrer\">semantic-release</a></li>\n<li><a href=\"https://github.com/conventional-changelog/conventional-changelog\" target=\"_blank\" rel=\"noopener noreferrer\">conventional-changelog</a></li>\n<li><a href=\"https://vercel.com/\" target=\"_blank\" rel=\"noopener noreferrer\">vercel</a></li>\n<li><a href=\"https://www.netlify.com/\" target=\"_blank\" rel=\"noopener noreferrer\">netlify</a></li>\n<li><a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Github Pages</a></li>\n<li><a href=\"https://gitee.com/help/articles/4136\" target=\"_blank\" rel=\"noopener noreferrer\">Gitee Pages</a></li>\n</ul>\n<h2 id=\"监控\"> 监控</h2>\n<ul>\n<li><a href=\"https://sentry.io/\" target=\"_blank\" rel=\"noopener noreferrer\">sentry</a>\n<ul>\n<li><a href=\"https://woai3c.github.io/introduction-to-front-end-engineering/07.html\" target=\"_blank\" rel=\"noopener noreferrer\">谭光志 - 带你入门前端工程 - 前端监控</a></li>\n<li><a href=\"http://www.alloyteam.com/2020/01/14184/\" target=\"_blank\" rel=\"noopener noreferrer\">如何进行 web 性能监控</a></li>\n<li><a href=\"https://juejin.cn/post/6937664300630671390\" target=\"_blank\" rel=\"noopener noreferrer\">顶级开源项目 Sentry 20.x JS-SDK 设计艺术（理念与设计原则篇）</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"安全\"> 安全</h2>\n<ul>\n<li><a href=\"https://github.com/Tencent/secguide\" target=\"_blank\" rel=\"noopener noreferrer\">secguide</a> - 面向开发人员梳理的代码安全指南</li>\n</ul>\n<h2 id=\"敏捷开发和-devops\"> 敏捷开发和 DevOps</h2>\n<ul>\n<li><a href=\"https://www.axure.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Axure RP</a> - 交互原型设计软件</li>\n<li><a href=\"https://modao.cc/\" target=\"_blank\" rel=\"noopener noreferrer\">墨刀</a> - 在线原型设计和远程协作平台</li>\n<li><a href=\"https://www.xiaopiu.com/\" target=\"_blank\" rel=\"noopener noreferrer\">xiaopiu</a> - 产品原型设计工具与团队实时协作平台</li>\n<li><a href=\"https://www.sketch.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Sketch</a> - 矢量设计工具</li>\n<li><a href=\"https://www.figma.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Figma</a> - 协同界面设计工具</li>\n<li><a href=\"https://lanhuapp.com/\" target=\"_blank\" rel=\"noopener noreferrer\">蓝湖</a> - 产品设计协作平台</li>\n<li><a href=\"https://app.diagrams.net/\" target=\"_blank\" rel=\"noopener noreferrer\">Draw.io</a> - 思维导图，功能结构图等相关图例</li>\n<li><a href=\"https://www.office.com/\" target=\"_blank\" rel=\"noopener noreferrer\">MS Office</a> - 产品需求文档等相关文档</li>\n<li><a href=\"https://www.wps.cn/\" target=\"_blank\" rel=\"noopener noreferrer\">WPS Office</a> - 产品需求文档等相关文档</li>\n<li><a href=\"https://storybook.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Storybook</a> - 组织、构建 UI 组建</li>\n<li><a href=\"https://docs.qq.com/\" target=\"_blank\" rel=\"noopener noreferrer\">腾讯文档</a></li>\n<li><a href=\"https://www.feishu.cn/product/docs\" target=\"_blank\" rel=\"noopener noreferrer\">飞书文档</a></li>\n<li><a href=\"https://shimo.im/\" target=\"_blank\" rel=\"noopener noreferrer\">石墨文档</a></li>\n<li><a href=\"https://www.kdocs.cn/\" target=\"_blank\" rel=\"noopener noreferrer\">金山文档</a></li>\n<li><a href=\"https://airtable.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Airtable</a></li>\n<li><a href=\"https://www.notion.so/\" target=\"_blank\" rel=\"noopener noreferrer\">Notion</a></li>\n<li><a href=\"https://azure.microsoft.com/zh-cn/overview/what-is-devops/\" target=\"_blank\" rel=\"noopener noreferrer\">Microsoft Azure DevOps</a></li>\n<li><a href=\"https://aws.amazon.com/cn/devops/what-is-devops/\" target=\"_blank\" rel=\"noopener noreferrer\">AWS DevOps</a></li>\n<li><a href=\"https://develop.aliyun.com/devops\" target=\"_blank\" rel=\"noopener noreferrer\">阿里云 DevOps</a></li>\n<li><a href=\"https://www.teambition.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Teambition</a></li>\n<li><a href=\"https://www.tapd.cn/\" target=\"_blank\" rel=\"noopener noreferrer\">TAPD</a></li>\n<li><a href=\"https://worktile.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Worktile</a></li>\n<li><a href=\"https://trello.com/home\" target=\"_blank\" rel=\"noopener noreferrer\">Trello</a></li>\n<li><a href=\"https://www.omnigroup.com/omniplan\" target=\"_blank\" rel=\"noopener noreferrer\">OmniPlan</a></li>\n<li><a href=\"https://dida365.com/home\" target=\"_blank\" rel=\"noopener noreferrer\">滴答清单</a></li>\n<li><a href=\"https://todoist.com/zh-CN\" target=\"_blank\" rel=\"noopener noreferrer\">Todoist</a></li>\n<li><a href=\"https://todo.microsoft.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Microsoft To Do</a></li>\n<li><a href=\"https://www.omnigroup.com/omnifocus\" target=\"_blank\" rel=\"noopener noreferrer\">OmniFocus</a></li>\n<li><a href=\"https://www.mylifeorganized.net/\" target=\"_blank\" rel=\"noopener noreferrer\">MyLifeOrganized</a></li>\n<li><a href=\"https://www.taskade.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Taskade</a></li>\n<li><a href=\"https://www.tita.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Tita</a></li>\n<li><a href=\"https://www.mingdao.com/home\" target=\"_blank\" rel=\"noopener noreferrer\">明道云</a></li>\n</ul>\n<p>关于 DevOps 的实践还可以参考 <a href=\"https://devops.phodal.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Ledge</a> 和 <a href=\"https://developer.aliyun.com/topic/download?id=205\" target=\"_blank\" rel=\"noopener noreferrer\">阿里巴巴 DevOps 实践手册</a>。</p>\n<p>建议先了解 <a href=\"https://help.dida365.com/tasks\" target=\"_blank\" rel=\"noopener noreferrer\">时间管理方法论</a> 并结合实际工具应用。</p>\n<h2 id=\"微服务\"> 微服务</h2>\n<ul>\n<li><a href=\"https://single-spa.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">single-spa</a>\n<ul>\n<li><a href=\"https://qiankun.umijs.org/zh\" target=\"_blank\" rel=\"noopener noreferrer\">qiankun</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/berialjs/berial\" target=\"_blank\" rel=\"noopener noreferrer\">berial</a></li>\n<li><a href=\"https://github.com/efoxTeam/emp/blob/main/README-zh_CN.md\" target=\"_blank\" rel=\"noopener noreferrer\">emp</a></li>\n</ul>\n<h2 id=\"原生及相关生态\"> 原生及相关生态</h2>\n<ul>\n<li><a href=\"https://github.com/necolas/normalize.css\" target=\"_blank\" rel=\"noopener noreferrer\">normalize</a> - 重置 css 样式\n<ul>\n<li><a href=\"https://github.com/filipelinhares/ress\" target=\"_blank\" rel=\"noopener noreferrer\">ress</a> - 基于 normalize.css 增强，重置 css 样式</li>\n<li><a href=\"https://github.com/krishdevdb/reseter.css\" target=\"_blank\" rel=\"noopener noreferrer\">reseter.css</a></li>\n<li><a href=\"https://csstools.github.io/sanitize.css/\" target=\"_blank\" rel=\"noopener noreferrer\">sanitize.css</a></li>\n<li><a href=\"https://watercss.kognise.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">water.css</a> - 简单的样式集合，美化默认样式</li>\n</ul>\n</li>\n<li><a href=\"http://getbem.com/\" target=\"_blank\" rel=\"noopener noreferrer\">css bem</a> - CSS 命名方法</li>\n<li><a href=\"https://github.com/css-modules/css-modules\" target=\"_blank\" rel=\"noopener noreferrer\">css modules</a> - CSS 模块化</li>\n<li><a href=\"http://oocss.org/\" target=\"_blank\" rel=\"noopener noreferrer\">oocss</a></li>\n<li><a href=\"http://smacss.com/\" target=\"_blank\" rel=\"noopener noreferrer\">smacss</a></li>\n<li><a href=\"https://postcss.org/\" target=\"_blank\" rel=\"noopener noreferrer\">postcss</a></li>\n<li><a href=\"http://lesscss.org/\" target=\"_blank\" rel=\"noopener noreferrer\">less</a></li>\n<li><a href=\"https://sass-lang.com/\" target=\"_blank\" rel=\"noopener noreferrer\">sass/scss</a></li>\n<li><a href=\"https://stylus-lang.com/\" target=\"_blank\" rel=\"noopener noreferrer\">stylus</a></li>\n<li><a href=\"https://getbootstrap.com/\" target=\"_blank\" rel=\"noopener noreferrer\">bootstrap</a>\n<ul>\n<li><a href=\"https://bootstrap-table.com/\" target=\"_blank\" rel=\"noopener noreferrer\">bootstrap-table</a></li>\n</ul>\n</li>\n<li><a href=\"https://getuikit.com/\" target=\"_blank\" rel=\"noopener noreferrer\">ui-kit</a></li>\n<li><a href=\"https://tailwindcss.com/\" target=\"_blank\" rel=\"noopener noreferrer\">tailwindcss</a>\n<ul>\n<li><a href=\"https://windicss.org/\" target=\"_blank\" rel=\"noopener noreferrer\">windicss</a></li>\n<li><a href=\"https://daisyui.com/\" target=\"_blank\" rel=\"noopener noreferrer\">daisy-ui</a></li>\n<li><a href=\"https://bulma.io/documentation/\" target=\"_blank\" rel=\"noopener noreferrer\">bulma</a></li>\n<li><a href=\"https://tachyons.io/\" target=\"_blank\" rel=\"noopener noreferrer\">tachyons</a></li>\n<li><a href=\"https://primer.style/css\" target=\"_blank\" rel=\"noopener noreferrer\">primer</a></li>\n<li><a href=\"https://www.hua-mi.cn/umi-css/\" target=\"_blank\" rel=\"noopener noreferrer\">umi.css</a></li>\n<li><a href=\"https://aquacss.netlify.app/\" target=\"_blank\" rel=\"noopener noreferrer\">aqua.css</a></li>\n</ul>\n</li>\n<li><a href=\"https://lodash.com/\" target=\"_blank\" rel=\"noopener noreferrer\">lodash</a>\n<ul>\n<li><a href=\"https://x-extends.gitee.io/xe-utils/\" target=\"_blank\" rel=\"noopener noreferrer\">xe-utils</a></li>\n<li><a href=\"https://github.com/smartprocure/futil-js\" target=\"_blank\" rel=\"noopener noreferrer\">futil-js</a></li>\n</ul>\n</li>\n<li><a href=\"https://momentjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">moment</a>\n<ul>\n<li><a href=\"https://dayjs.gitee.io/zh-CN/\" target=\"_blank\" rel=\"noopener noreferrer\">dayjs</a></li>\n<li><a href=\"https://moment.github.io/luxon/\" target=\"_blank\" rel=\"noopener noreferrer\">luxon</a></li>\n<li><a href=\"https://date-fns.org/\" target=\"_blank\" rel=\"noopener noreferrer\">date-fns</a></li>\n<li><a href=\"https://js-joda.github.io/js-joda/\" target=\"_blank\" rel=\"noopener noreferrer\">js-joda</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/ReactTraining/history\" target=\"_blank\" rel=\"noopener noreferrer\">history</a></li>\n<li><a href=\"https://github.com/pillarjs/path-to-regexp\" target=\"_blank\" rel=\"noopener noreferrer\">path-to-regexp</a></li>\n<li><a href=\"https://www.npmjs.com/package/qs\" target=\"_blank\" rel=\"noopener noreferrer\">qs</a></li>\n<li><a href=\"https://www.npmjs.com/package/query-string\" target=\"_blank\" rel=\"noopener noreferrer\">query-string</a></li>\n<li><a href=\"https://github.com/faisalman/ua-parser-js\" target=\"_blank\" rel=\"noopener noreferrer\">ua-parser-js</a> - 读取 UA 数据</li>\n<li><a href=\"https://github.com/hujiulong/gcoord\" target=\"_blank\" rel=\"noopener noreferrer\">gcoord</a> - 地理坐标系转换</li>\n<li><a href=\"https://github.com/jonahsnider/convert\" target=\"_blank\" rel=\"noopener noreferrer\">convert</a></li>\n<li><a href=\"https://github.com/BenjaminVanRyseghem/numbro\" target=\"_blank\" rel=\"noopener noreferrer\">numbro</a></li>\n<li><a href=\"https://github.com/uuidjs/uuid\" target=\"_blank\" rel=\"noopener noreferrer\">uuid</a>\n<ul>\n<li><a href=\"https://github.com/oculus42/short-uuid\" target=\"_blank\" rel=\"noopener noreferrer\">short-uuid</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/ai/nanoid\" target=\"_blank\" rel=\"noopener noreferrer\">nanoid</a></li>\n<li><a href=\"https://github.com/validatorjs/validator.js\" target=\"_blank\" rel=\"noopener noreferrer\">validator</a></li>\n<li><a href=\"https://github.com/soldair/node-qrcode\" target=\"_blank\" rel=\"noopener noreferrer\">qrcode</a></li>\n<li><a href=\"https://github.com/blakeembrey/change-case\" target=\"_blank\" rel=\"noopener noreferrer\">change-case</a></li>\n<li><a href=\"https://github.com/lancedikson/bowser\" target=\"_blank\" rel=\"noopener noreferrer\">bowser</a></li>\n<li><a href=\"https://github.com/JedWatson/classnames\" target=\"_blank\" rel=\"noopener noreferrer\">classnames</a></li>\n<li><a href=\"https://github.com/Starcounter-Jack/JSON-Patch\" target=\"_blank\" rel=\"noopener noreferrer\">json-patch</a></li>\n<li><a href=\"https://jquery.com/\" target=\"_blank\" rel=\"noopener noreferrer\">jquery</a> - 要适配 ie8 需要使用 v1</li>\n<li><a href=\"http://visionmedia.github.io/page.js/\" target=\"_blank\" rel=\"noopener noreferrer\">page.js</a> - 路由</li>\n<li><a href=\"https://formatjs.io/\" target=\"_blank\" rel=\"noopener noreferrer\">format.js</a> - 国际化</li>\n<li><a href=\"https://www.i18next.com/\" target=\"_blank\" rel=\"noopener noreferrer\">i18next</a> - 国际化</li>\n<li><a href=\"https://github.com/jshttp/statuses\" target=\"_blank\" rel=\"noopener noreferrer\">statuses</a></li>\n<li><a href=\"https://github.com/axios/axios\" target=\"_blank\" rel=\"noopener noreferrer\">axios</a> - 请求库，用到了 promise\n<ul>\n<li><a href=\"https://github.com/ctimmerm/axios-mock-adapter\" target=\"_blank\" rel=\"noopener noreferrer\">axios-mock-adapter</a> - 拦截请求</li>\n<li><a href=\"https://github.com/softonic/axios-retry\" target=\"_blank\" rel=\"noopener noreferrer\">axios-retry</a></li>\n<li><a href=\"https://github.com/JustinBeckwith/retry-axios\" target=\"_blank\" rel=\"noopener noreferrer\">retry-axios</a></li>\n<li><a href=\"https://github.com/visionmedia/superagent\" target=\"_blank\" rel=\"noopener noreferrer\">superagent</a> - 请求库</li>\n<li><a href=\"http://mockjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">mock.js</a> - 生成随机数据，拦截 ajax 请求</li>\n<li><a href=\"https://github.com/Marak/faker.js\" target=\"_blank\" rel=\"noopener noreferrer\">faker.js</a> - 生成随机数据</li>\n<li><a href=\"https://miragejs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">mirage.js</a></li>\n</ul>\n</li>\n<li><a href=\"https://mathjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">math.js</a> - 数学库</li>\n<li><a href=\"https://github.com/yiminghe/async-validator\" target=\"_blank\" rel=\"noopener noreferrer\">async-validator</a> - 异步校验</li>\n<li><a href=\"https://github.com/verlok/vanilla-lazyload\" target=\"_blank\" rel=\"noopener noreferrer\">lazyload</a> - 懒加载</li>\n<li><a href=\"https://www.echartsjs.com/zh/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">echarts</a> - 图表库\n<ul>\n<li><a href=\"https://github.com/chartjs/Chart.js\" target=\"_blank\" rel=\"noopener noreferrer\">chart.js</a> - 图表库</li>\n</ul>\n</li>\n<li><a href=\"https://leafletjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">leaflet</a> - 地图库</li>\n<li><a href=\"https://howlerjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">howler.js</a> - audio 支持</li>\n<li><a href=\"https://aplayer.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">aplayer</a> - 音频播放器</li>\n<li><a href=\"https://dplayer.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">dplayer</a> - 视频播放器</li>\n<li><a href=\"https://videojs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">video.js</a> - 播放器</li>\n<li><a href=\"https://revealjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">reveal.js</a> - 演讲</li>\n<li><a href=\"https://dexie.org/\" target=\"_blank\" rel=\"noopener noreferrer\">dexie.js</a> - IndexedDB</li>\n<li><a href=\"https://github.com/jakearchibald/idb\" target=\"_blank\" rel=\"noopener noreferrer\">idb</a> - IndexedDB</li>\n<li><a href=\"https://github.com/sindresorhus/screenfull.js/\" target=\"_blank\" rel=\"noopener noreferrer\">screenfull</a> - 全屏</li>\n<li><a href=\"https://github.com/eligrey/FileSaver.js\" target=\"_blank\" rel=\"noopener noreferrer\">file-saver</a> - 文件保存\n<ul>\n<li><a href=\"https://github.com/jimmywarting/StreamSaver.js\" target=\"_blank\" rel=\"noopener noreferrer\">stream-saver</a> - 文件保存</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/fengyuanchen/cropperjs\" target=\"_blank\" rel=\"noopener noreferrer\">cropper.js</a> - 图片裁剪\n<ul>\n<li><a href=\"https://github.com/newbieYoung/Simple-Crop\" target=\"_blank\" rel=\"noopener noreferrer\">simple-crop</a> - 图片裁剪</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/muaz-khan/RecordRTC\" target=\"_blank\" rel=\"noopener noreferrer\">recordrtc</a> - webrtc 库</li>\n<li><a href=\"https://popper.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">popper.js</a> - 文字提示和弹出式菜单</li>\n<li><a href=\"https://github.com/mengshukeji/Luckysheet\" target=\"_blank\" rel=\"noopener noreferrer\">luckysheet</a> - 在线表格</li>\n<li><a href=\"http://hammerjs.github.io/\" target=\"_blank\" rel=\"noopener noreferrer\">hammer</a> - 触摸手势</li>\n<li><a href=\"https://kenwheeler.github.io/slick/\" target=\"_blank\" rel=\"noopener noreferrer\">slick</a> - 走马灯</li>\n<li><a href=\"https://github.com/markdown-it/markdown-it\" target=\"_blank\" rel=\"noopener noreferrer\">markdown-it</a> - markdown 解析</li>\n<li><a href=\"http://ui.toast.com/tui-editor\" target=\"_blank\" rel=\"noopener noreferrer\">tui-editor</a> - 高效、可扩展的 GFM Markdown Wysiwyg 编辑器</li>\n<li><a href=\"https://quilljs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">quill.js</a> - 现代所见即所得的富文本编辑器</li>\n<li><a href=\"http://fabricjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">fabric.js</a> - canvas 库，支持 svg 和 canvas 相互解析</li>\n<li><a href=\"https://spritejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">sprite.js</a> - 跨平台高性能图形系统，支持 canvas 和 webgl</li>\n<li><a href=\"https://d3js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">d3</a> - 使用 svg，canvas 和 html，基于数据操作文档的库</li>\n<li><a href=\"https://threejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">three.js</a> - 便于使用的轻量的 3d 库，支持 webgl，canvas，svg，css</li>\n<li><a href=\"https://github.com/h5bp/html5-boilerplate\" target=\"_blank\" rel=\"noopener noreferrer\">html5-boilerplate</a> - 模板</li>\n<li><a href=\"https://github.com/bradtraversy/vanillawebprojects\" target=\"_blank\" rel=\"noopener noreferrer\">vanilla-web-projects</a> - 使用 html5、css 和 js 构建的迷你项目示例</li>\n<li><a href=\"https://placekitten.com\" target=\"_blank\" rel=\"noopener noreferrer\">placekitten</a></li>\n<li><a href=\"https://picsum.photos/\" target=\"_blank\" rel=\"noopener noreferrer\">picsum photos</a></li>\n<li><a href=\"https://jsonplaceholder.typicode.com/\" target=\"_blank\" rel=\"noopener noreferrer\">jsonplaceholder</a></li>\n</ul>\n<h2 id=\"vue-及相关生态\"> vue 及相关生态</h2>\n<ul>\n<li><a href=\"https://vuejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">文档</a></li>\n<li><a href=\"https://github.com/vuejs/vue-devtools\" target=\"_blank\" rel=\"noopener noreferrer\">devtools</a></li>\n<li>路由\n<ul>\n<li><a href=\"https://router.vuejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">vue-router</a></li>\n</ul>\n</li>\n<li>状态管理\n<ul>\n<li><a href=\"https://vuex.vuejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">vuex</a>\n<ul>\n<li><a href=\"https://vuex-orm.org/\" target=\"_blank\" rel=\"noopener noreferrer\">vuex-orm</a></li>\n</ul>\n</li>\n<li><a href=\"https://pinia.esm.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">pinia</a></li>\n</ul>\n</li>\n<li>ui\n<ul>\n<li><a href=\"https://vuetifyjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">vuetify</a></li>\n<li><a href=\"https://element.eleme.cn/\" target=\"_blank\" rel=\"noopener noreferrer\">element</a></li>\n<li><a href=\"https://element-plus.org/\" target=\"_blank\" rel=\"noopener noreferrer\">element-plus</a></li>\n<li><a href=\"https://2x.antdv.com/\" target=\"_blank\" rel=\"noopener noreferrer\">antd-vue</a></li>\n<li><a href=\"https://www.naiveui.com/zh-CN/os-theme\" target=\"_blank\" rel=\"noopener noreferrer\">naive-ui</a></li>\n<li><a href=\"http://nutui.jd.com/\" target=\"_blank\" rel=\"noopener noreferrer\">nut-ui</a></li>\n<li><a href=\"https://youzan.github.io/vant/\" target=\"_blank\" rel=\"noopener noreferrer\">vant</a></li>\n<li><a href=\"https://vue.zarm.design/\" target=\"_blank\" rel=\"noopener noreferrer\">zarm-vue</a></li>\n<li><a href=\"https://github.com/topics/vue\" target=\"_blank\" rel=\"noopener noreferrer\">更多</a></li>\n</ul>\n</li>\n<li>cli\n<ul>\n<li><a href=\"https://zh.nuxtjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">nuxt</a></li>\n<li><a href=\"https://winixt.gitee.io/fesjs/zh/\" target=\"_blank\" rel=\"noopener noreferrer\">fes</a></li>\n<li><a href=\"https://cli.vuejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">vue-cli</a> - 需要手动支持 ssr</li>\n<li><a href=\"https://quasar.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">quasar</a></li>\n<li><a href=\"https://ream.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">ream (WIP)</a></li>\n<li><a href=\"https://github.com/ykfe/ssr\" target=\"_blank\" rel=\"noopener noreferrer\">ssr</a></li>\n</ul>\n</li>\n<li>app / 小程序\n<ul>\n<li>uni-app\n<ul>\n<li><a href=\"https://uniapp.dcloud.io/\" target=\"_blank\" rel=\"noopener noreferrer\">文档</a></li>\n<li>路由\n<ul>\n<li><a href=\"https://uniapp.dcloud.io/frame?id=%e8%b7%af%e7%94%b1\" target=\"_blank\" rel=\"noopener noreferrer\">自带路由</a></li>\n<li><a href=\"https://hhyang.cn/v2/\" target=\"_blank\" rel=\"noopener noreferrer\">uni-simple-router</a></li>\n</ul>\n</li>\n<li>状态管理\n<ul>\n<li><a href=\"https://vuex.vuejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">vuex</a></li>\n</ul>\n</li>\n<li>ui\n<ul>\n<li><a href=\"https://millcloud.github.io/mp-scss\" target=\"_blank\" rel=\"noopener noreferrer\">@modyqyw/mp-scss</a></li>\n<li><a href=\"https://www.thorui.cn/doc/\" target=\"_blank\" rel=\"noopener noreferrer\">thor-ui</a></li>\n<li><a href=\"https://uviewui.com/\" target=\"_blank\" rel=\"noopener noreferrer\">uview-ui</a></li>\n<li><a href=\"https://github.com/dcloudio/uni-ui\" target=\"_blank\" rel=\"noopener noreferrer\">uni-ui</a></li>\n</ul>\n</li>\n<li>衍生\n<ul>\n<li><a href=\"https://uniajax.ponjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">uni-ajax</a></li>\n<li><a href=\"https://www.quanzhan.co/luch-request/\" target=\"_blank\" rel=\"noopener noreferrer\">luch-request</a></li>\n</ul>\n</li>\n<li>进阶\n<ul>\n<li><a href=\"https://f-loat.github.io/posts/2019/08/03/uni-app-%E5%A4%9A%E7%AB%AF%E6%9E%84%E5%BB%BA%E5%8E%9F%E7%90%86%E6%B5%85%E6%9E%90.html\" target=\"_blank\" rel=\"noopener noreferrer\">uni-app 多端构建原理浅析（较旧）</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>app\n<ul>\n<li>native-script\n<ul>\n<li><a href=\"https://nativescript.org/\" target=\"_blank\" rel=\"noopener noreferrer\">文档</a></li>\n</ul>\n</li>\n<li>capacitor\n<ul>\n<li><a href=\"https://capacitorjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">文档</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>衍生\n<ul>\n<li><a href=\"https://github.com/staven630/vue-cli4-config\" target=\"_blank\" rel=\"noopener noreferrer\">vue-cli 4 配置参考</a></li>\n<li><a href=\"https://github.com/yujinpan/h5-vue\" target=\"_blank\" rel=\"noopener noreferrer\">用 vue 写 h5 项目的基本结构与依赖整理，封装常用工具，快速开发 h5 的脚手架</a></li>\n<li><a href=\"https://github.com/vuejs/composition-api\" target=\"_blank\" rel=\"noopener noreferrer\">@vue/composition-api</a> - 支持在 vue 2 里使用 composition-api</li>\n<li><a href=\"https://github.com/TuiMao233/uni-composition-api\" target=\"_blank\" rel=\"noopener noreferrer\">uni-composition-api</a> - 支持在 uni-app 里使用 composition-api</li>\n<li><a href=\"https://fmfe.github.io/genesis-docs/\" target=\"_blank\" rel=\"noopener noreferrer\">genesis</a> - 轻量的 vue ssr</li>\n<li><a href=\"https://webank.gitee.io/fes.js/\" target=\"_blank\" rel=\"noopener noreferrer\">fes.js</a> - 管理台应用解决方案</li>\n<li><a href=\"https://github.com/antfu/v-dollar\" target=\"_blank\" rel=\"noopener noreferrer\">vue-dollar</a> - 简化 vue3 的 api</li>\n<li><a href=\"https://github.com/antfu/vue-demi\" target=\"_blank\" rel=\"noopener noreferrer\">vue-demi</a> - 创建跨版本的库</li>\n<li><a href=\"https://docs-swrv.netlify.app/\" target=\"_blank\" rel=\"noopener noreferrer\">swrv</a> - 管理你的请求</li>\n<li><a href=\"https://vue-query.vercel.app/\" target=\"_blank\" rel=\"noopener noreferrer\">vue-query</a> - 管理你的请求</li>\n<li><a href=\"https://vueuse.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">vue-use</a> - 官方 hooks 包</li>\n<li><a href=\"https://pikax.me/vue-composable/\" target=\"_blank\" rel=\"noopener noreferrer\">vue-composable</a> - hooks 包</li>\n<li><a href=\"https://vue-hooks.netlify.app/\" target=\"_blank\" rel=\"noopener noreferrer\">vue-hooks</a> - hooks 包</li>\n<li><a href=\"https://github.com/vueComponent/use\" target=\"_blank\" rel=\"noopener noreferrer\">@ant-design-vue/use</a> - hooks 包</li>\n<li><a href=\"https://github.com/xuliangzhan/vxe-table\" target=\"_blank\" rel=\"noopener noreferrer\">vxe-table</a> - 表格解决方案，可兼容 element，antd-vue 和 view-ui</li>\n<li><a href=\"https://xaksis.github.io/vue-good-table/\" target=\"_blank\" rel=\"noopener noreferrer\">vue-good-table</a> - 表格解决方案</li>\n<li><a href=\"https://vueformulate.com/\" target=\"_blank\" rel=\"noopener noreferrer\">vue-formulate</a> - 表单解决方案</li>\n<li><a href=\"https://github.com/vuese/vuese\" target=\"_blank\" rel=\"noopener noreferrer\">vuese</a> - 快速生成 vue 组件文档</li>\n<li><a href=\"https://portal-vue.linusb.org/\" target=\"_blank\" rel=\"noopener noreferrer\">portal-vue</a> - 用于在 DOM 中的任何地方渲染组件模板，vue 3 不再需要</li>\n<li><a href=\"https://github.com/PanJiaChen/vue-element-admin\" target=\"_blank\" rel=\"noopener noreferrer\">vue-element-admin</a> - 后台管理系统</li>\n<li><a href=\"https://github.com/d2-projects/d2-admin\" target=\"_blank\" rel=\"noopener noreferrer\">d2-admin</a> - 后台管理系统</li>\n<li><a href=\"https://github.com/anncwb/vue-vben-admin\" target=\"_blank\" rel=\"noopener noreferrer\">vue-vben-admin</a> - 后台管理系统</li>\n<li><a href=\"https://github.com/iczer/vue-antd-admin\" target=\"_blank\" rel=\"noopener noreferrer\">vue-antd-admin</a> - 后台管理系统</li>\n<li><a href=\"https://github.com/vueComponent/ant-design-vue-pro\" target=\"_blank\" rel=\"noopener noreferrer\">ant-design-vue-pro</a> - 后台管理系统</li>\n<li><a href=\"https://github.com/creativetimofficial/vuetify-material-dashboard\" target=\"_blank\" rel=\"noopener noreferrer\">vuetify-material-dashboard</a> - 后台管理系统</li>\n<li><a href=\"https://github.com/ClintOxx/vuetify-admin-dashboard\" target=\"_blank\" rel=\"noopener noreferrer\">vuetify-admin-dashboard</a> - 后台管理系统</li>\n<li><a href=\"https://github.com/bailicangdu/vue2-elm\" target=\"_blank\" rel=\"noopener noreferrer\">vue2-elm</a> - 仿饿了么</li>\n<li><a href=\"https://vue-styleguidist.github.io/\" target=\"_blank\" rel=\"noopener noreferrer\">vue-styleguidist</a></li>\n</ul>\n</li>\n<li>进阶\n<ul>\n<li><a href=\"http://hcysun.me/vue-design/zh/\" target=\"_blank\" rel=\"noopener noreferrer\">vue 渲染器设计</a></li>\n<li><a href=\"https://ustbhuangyi.github.io/vue-analysis/\" target=\"_blank\" rel=\"noopener noreferrer\">vue.js 技术揭秘</a></li>\n<li><a href=\"https://www.yuque.com/hugsun/vue3\" target=\"_blank\" rel=\"noopener noreferrer\">vue 3 生态技术内幕</a></li>\n<li><a href=\"https://juejin.im/post/5d9da45af265da5b8072de5d\" target=\"_blank\" rel=\"noopener noreferrer\">一张图理清 Vue 3.0 的响应式系统</a></li>\n<li><a href=\"https://github.com/answershuto/learnVue\" target=\"_blank\" rel=\"noopener noreferrer\">vue 2.3 源码分析</a></li>\n<li><a href=\"https://arronkler.top/post/build_vue_component_lib/\" target=\"_blank\" rel=\"noopener noreferrer\">如何打造一套 Vue 组件库</a></li>\n<li><a href=\"https://codepen.io/collection/DkxpbE\" target=\"_blank\" rel=\"noopener noreferrer\">Vue 3 Workshop Code Samples</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/xrK7gREgS8KmAXIRQDSaoQ\" target=\"_blank\" rel=\"noopener noreferrer\">Vue 3 的 SFC Style CSS Variable Injection 提案实现的背后</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"react-及相关生态\"> react 及相关生态</h2>\n<ul>\n<li>教程\n<ul>\n<li><a href=\"https://github.com/huzidaha/react-naive-book\" target=\"_blank\" rel=\"noopener noreferrer\">react.js 小书</a> - 略有过时，但用来入门非常好</li>\n<li><a href=\"https://zh-hans.reactjs.org/docs/getting-started.html\" target=\"_blank\" rel=\"noopener noreferrer\">中文文档</a></li>\n<li><a href=\"https://github.com/Asabeneh/React-For-Everyone\" target=\"_blank\" rel=\"noopener noreferrer\">react for everyone</a></li>\n<li><a href=\"https://reactjs.org/docs/getting-started.html\" target=\"_blank\" rel=\"noopener noreferrer\">英文文档</a></li>\n<li><a href=\"https://reacttraining.com/\" target=\"_blank\" rel=\"noopener noreferrer\">react-training</a></li>\n<li><a href=\"https://www.roadtoreact.com/\" target=\"_blank\" rel=\"noopener noreferrer\">road to react</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/facebook/react/tree/master/packages/react-devtools\" target=\"_blank\" rel=\"noopener noreferrer\">devtools</a></li>\n<li>路由\n<ul>\n<li><a href=\"https://reacttraining.com/react-router/web/guides/quick-start\" target=\"_blank\" rel=\"noopener noreferrer\">react-router</a></li>\n</ul>\n</li>\n<li>状态管理\n<ul>\n<li><a href=\"https://reactjs.org/docs/context.html\" target=\"_blank\" rel=\"noopener noreferrer\">context</a> + <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"noopener noreferrer\">hooks</a>\n<ul>\n<li><a href=\"https://github.com/diegohaz/constate\" target=\"_blank\" rel=\"noopener noreferrer\">constate</a></li>\n<li><a href=\"https://github.com/jamiebuilds/unstated-next\" target=\"_blank\" rel=\"noopener noreferrer\">unstated-next</a></li>\n</ul>\n</li>\n<li><a href=\"https://redux.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">redux</a> + <a href=\"https://react-redux.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">react-redux</a> + <a href=\"https://redux-toolkit.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">redux-toolkit</a></li>\n<li><a href=\"https://mobx.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">mobx</a></li>\n<li><a href=\"https://recoiljs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">recoil</a></li>\n<li><a href=\"https://jotai.pmnd.rs/\" target=\"_blank\" rel=\"noopener noreferrer\">jotai</a></li>\n</ul>\n</li>\n<li>ui\n<ul>\n<li><a href=\"https://material-ui.com/\" target=\"_blank\" rel=\"noopener noreferrer\">material-ui</a></li>\n<li><a href=\"https://youzan.github.io/zent/\" target=\"_blank\" rel=\"noopener noreferrer\">zent</a></li>\n<li><a href=\"https://blueprintjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">blueprint</a></li>\n<li><a href=\"https://chakra-ui.com/\" target=\"_blank\" rel=\"noopener noreferrer\">chakra-ui</a></li>\n<li><a href=\"https://ant.design/\" target=\"_blank\" rel=\"noopener noreferrer\">antd</a></li>\n<li><a href=\"https://uiwjs.github.io/#/\" target=\"_blank\" rel=\"noopener noreferrer\">uiw</a></li>\n<li><a href=\"https://rsuitejs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">rsuite</a></li>\n<li><a href=\"https://yep-react.jd.com/\" target=\"_blank\" rel=\"noopener noreferrer\">yep-react</a></li>\n<li><a href=\"https://zarm.design/\" target=\"_blank\" rel=\"noopener noreferrer\">zarm</a></li>\n<li><a href=\"https://next.mobile.ant.design/\" target=\"_blank\" rel=\"noopener noreferrer\">antd-mobile-next</a>\n<ul>\n<li><a href=\"https://antd-plus.alitajs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">antd-mobile-plus</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/topics/react\" target=\"_blank\" rel=\"noopener noreferrer\">更多</a></li>\n</ul>\n</li>\n<li>cli\n<ul>\n<li><a href=\"https://nextjs.org/docs/getting-started\" target=\"_blank\" rel=\"noopener noreferrer\">next</a>\n<ul>\n<li><a href=\"https://github.com/jaredpalmer/after.js\" target=\"_blank\" rel=\"noopener noreferrer\">after</a></li>\n</ul>\n</li>\n<li><a href=\"https://umijs.org/zh-CN\" target=\"_blank\" rel=\"noopener noreferrer\">umi</a> - 带微前端解决方案</li>\n<li><a href=\"https://ice.work/\" target=\"_blank\" rel=\"noopener noreferrer\">ice</a> - 带微前端解决方案</li>\n<li><a href=\"https://create-react-app.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">create-react-app</a> - 无 ssr 相关说明\n<ul>\n<li><a href=\"https://github.com/timarney/react-app-rewired\" target=\"_blank\" rel=\"noopener noreferrer\">react-app-rewired</a> - 不弹出地修改配置</li>\n<li><a href=\"https://github.com/gsoft-inc/craco\" target=\"_blank\" rel=\"noopener noreferrer\">craco</a> - 不弹出地修改配置</li>\n</ul>\n</li>\n<li><a href=\"https://www.gatsbyjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">gatsby</a></li>\n<li><a href=\"https://github.com/ykfe/ssr\" target=\"_blank\" rel=\"noopener noreferrer\">ssr</a></li>\n</ul>\n</li>\n<li>app\n<ul>\n<li>react-native\n<ul>\n<li><a href=\"https://facebook.github.io/react-native/\" target=\"_blank\" rel=\"noopener noreferrer\">文档</a> - <a href=\"https://reactnative.cn/\" target=\"_blank\" rel=\"noopener noreferrer\">中文版</a></li>\n<li>路由\n<ul>\n<li><a href=\"https://reacttraining.com/react-router/web/guides/quick-start\" target=\"_blank\" rel=\"noopener noreferrer\">react-router</a></li>\n<li><a href=\"https://reactnavigation.org/\" target=\"_blank\" rel=\"noopener noreferrer\">react-navigation</a></li>\n</ul>\n</li>\n<li>状态管理\n<ul>\n<li><a href=\"https://reactjs.org/docs/context.html\" target=\"_blank\" rel=\"noopener noreferrer\">context</a> + <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"noopener noreferrer\">hooks</a>\n<ul>\n<li><a href=\"https://github.com/diegohaz/constate\" target=\"_blank\" rel=\"noopener noreferrer\">constate</a></li>\n<li><a href=\"https://github.com/jamiebuilds/unstated-next\" target=\"_blank\" rel=\"noopener noreferrer\">unstated-next</a></li>\n</ul>\n</li>\n<li><a href=\"https://redux.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">redux</a> + <a href=\"https://react-redux.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">react-redux</a> + <a href=\"https://redux-toolkit.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">redux-toolkit</a></li>\n<li><a href=\"https://mobx.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">mobx</a></li>\n<li><a href=\"https://recoiljs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">recoil</a></li>\n<li><a href=\"https://jotai.pmnd.rs/\" target=\"_blank\" rel=\"noopener noreferrer\">jotai</a></li>\n</ul>\n</li>\n<li>ui\n<ul>\n<li><a href=\"https://react-native-elements.github.io/react-native-elements/docs/overview.html\" target=\"_blank\" rel=\"noopener noreferrer\">react-native-elements</a></li>\n<li><a href=\"https://akveo.github.io/react-native-ui-kitten/\" target=\"_blank\" rel=\"noopener noreferrer\">react-native-ui-kitten</a></li>\n<li><a href=\"https://wix.github.io/react-native-ui-lib/\" target=\"_blank\" rel=\"noopener noreferrer\">react-native-ui-lib</a></li>\n<li><a href=\"https://github.com/uiwjs/react-native-uiw\" target=\"_blank\" rel=\"noopener noreferrer\">uiw-react-native</a></li>\n<li><a href=\"https://github.com/vadimdemedes/tailwind-rn\" target=\"_blank\" rel=\"noopener noreferrer\">tailwind-rn</a></li>\n<li><a href=\"https://nativebase.io/\" target=\"_blank\" rel=\"noopener noreferrer\">native-base</a></li>\n<li><a href=\"https://github.com/rilyu/teaset\" target=\"_blank\" rel=\"noopener noreferrer\">teaset</a>\n<ul>\n<li><a href=\"https://github.com/lzhd/teaset-pro\" target=\"_blank\" rel=\"noopener noreferrer\">teaset-pro</a> - 支持 0.64</li>\n</ul>\n</li>\n<li><a href=\"https://rn.mobile.ant.design/\" target=\"_blank\" rel=\"noopener noreferrer\">antd-rn</a> - 等待 5.x</li>\n</ul>\n</li>\n<li>cli\n<ul>\n<li><a href=\"https://docs.expo.io/\" target=\"_blank\" rel=\"noopener noreferrer\">expo</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>alita\n<ul>\n<li><a href=\"https://alitajs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">文档</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>小程序\n<ul>\n<li>taro\n<ul>\n<li><a href=\"https://taro-docs.jd.com/taro/docs/README.html\" target=\"_blank\" rel=\"noopener noreferrer\">文档</a></li>\n<li>路由\n<ul>\n<li><a href=\"https://taro-docs.jd.com/taro/docs/router/\" target=\"_blank\" rel=\"noopener noreferrer\">自带路由</a></li>\n</ul>\n</li>\n<li>状态管理\n<ul>\n<li><a href=\"https://reactjs.org/docs/context.html\" target=\"_blank\" rel=\"noopener noreferrer\">context</a> + <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"noopener noreferrer\">hooks</a>\n<ul>\n<li><a href=\"https://github.com/diegohaz/constate\" target=\"_blank\" rel=\"noopener noreferrer\">constate</a></li>\n<li><a href=\"https://github.com/jamiebuilds/unstated-next\" target=\"_blank\" rel=\"noopener noreferrer\">unstated-next</a></li>\n</ul>\n</li>\n<li><a href=\"https://redux.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">redux</a> + <a href=\"https://react-redux.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">react-redux</a> + <a href=\"https://redux-toolkit.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">redux-toolkit</a></li>\n<li><a href=\"https://mobx.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">mobx</a></li>\n<li><a href=\"https://recoiljs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">recoil</a></li>\n<li><a href=\"https://jotai.pmnd.rs/\" target=\"_blank\" rel=\"noopener noreferrer\">jotai</a></li>\n</ul>\n</li>\n<li>ui\n<ul>\n<li><a href=\"https://taro-ui.jd.com/#/docs/introduction\" target=\"_blank\" rel=\"noopener noreferrer\">taro-ui</a> - taro 2</li>\n<li><a href=\"https://docs.vdfor.top/taro-ink/\" target=\"_blank\" rel=\"noopener noreferrer\">taro-ink</a> - taro 3</li>\n<li><a href=\"https://taroify.gitee.io/taroify.com/introduce/\" target=\"_blank\" rel=\"noopener noreferrer\">taroify</a> - taro 3</li>\n<li><a href=\"https://yinliangdream.github.io/mp-colorui-doc/home/introduce.html#taro\" target=\"_blank\" rel=\"noopener noreferrer\">color-ui</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>remax\n<ul>\n<li><a href=\"https://remaxjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">文档</a></li>\n<li>路由\n<ul>\n<li>自带路由</li>\n</ul>\n</li>\n<li>状态管理\n<ul>\n<li><a href=\"https://reactjs.org/docs/context.html\" target=\"_blank\" rel=\"noopener noreferrer\">context</a> + <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"noopener noreferrer\">hooks</a>\n<ul>\n<li><a href=\"https://github.com/diegohaz/constate\" target=\"_blank\" rel=\"noopener noreferrer\">constate</a></li>\n<li><a href=\"https://github.com/jamiebuilds/unstated-next\" target=\"_blank\" rel=\"noopener noreferrer\">unstated-next</a></li>\n</ul>\n</li>\n<li><a href=\"https://redux.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">redux</a> + <a href=\"https://react-redux.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">react-redux</a> + <a href=\"https://redux-toolkit.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">redux-toolkit</a></li>\n<li><a href=\"https://mobx.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">mobx</a></li>\n<li><a href=\"https://recoiljs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">recoil</a></li>\n<li><a href=\"https://jotai.pmnd.rs/\" target=\"_blank\" rel=\"noopener noreferrer\">jotai</a></li>\n</ul>\n</li>\n<li>ui\n<ul>\n<li><a href=\"https://annasearl.github.io/anna-remax-ui/#/\" target=\"_blank\" rel=\"noopener noreferrer\">anna</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>rax\n<ul>\n<li><a href=\"https://rax.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">中文文档</a></li>\n<li>路由\n<ul>\n<li><a href=\"https://rax.js.org/docs/guide/route\" target=\"_blank\" rel=\"noopener noreferrer\">自带路由</a></li>\n</ul>\n</li>\n<li>状态管理\n<ul>\n<li><a href=\"https://rax.js.org/docs/guide/store\" target=\"_blank\" rel=\"noopener noreferrer\">自带状态管理</a></li>\n</ul>\n</li>\n<li>ui\n<ul>\n<li><a href=\"https://rax.js.org/docs/components/about\" target=\"_blank\" rel=\"noopener noreferrer\">官方提供</a> 一部分</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>衍生\n<ul>\n<li><a href=\"https://react-typescript-cheatsheet.netlify.app/\" target=\"_blank\" rel=\"noopener noreferrer\">react-typescript-cheatsheet</a></li>\n<li><a href=\"https://preactjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">preact</a> - 类 react 库</li>\n<li><a href=\"https://github.com/yisar/fre\" target=\"_blank\" rel=\"noopener noreferrer\">fre</a> - 类 react 库</li>\n<li><a href=\"https://infernojs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">inferno</a> - 类 react 库</li>\n<li><a href=\"https://loadable-components.com/\" target=\"_blank\" rel=\"noopener noreferrer\">loadable-components</a></li>\n<li><a href=\"https://github.com/jamiebuilds/react-loadable\" target=\"_blank\" rel=\"noopener noreferrer\">react-loadable</a></li>\n<li><a href=\"https://facebook.github.io/flux/\" target=\"_blank\" rel=\"noopener noreferrer\">flux</a></li>\n<li><a href=\"https://immutable-js.github.io/immutable-js/docs/\" target=\"_blank\" rel=\"noopener noreferrer\">immutable.js</a></li>\n<li><a href=\"https://immerjs.github.io/immer/\" target=\"_blank\" rel=\"noopener noreferrer\">immer</a></li>\n<li><a href=\"https://styled-components.com/\" target=\"_blank\" rel=\"noopener noreferrer\">styled-components</a> - css-in-js</li>\n<li><a href=\"https://emotion.sh/\" target=\"_blank\" rel=\"noopener noreferrer\">emotion</a> - css-in-js</li>\n<li><a href=\"https://github.com/callstack/linaria\" target=\"_blank\" rel=\"noopener noreferrer\">linaria</a> - css-in-js</li>\n<li><a href=\"https://github.com/forsigner/fower\" target=\"_blank\" rel=\"noopener noreferrer\">fower</a> - css-in-js</li>\n<li><a href=\"https://github.com/bvaughn/react-virtualized\" target=\"_blank\" rel=\"noopener noreferrer\">react-virtualized</a> - 表格解决方案，高效渲染大型列表和表格数据的 react 组件\n<ul>\n<li><a href=\"https://github.com/bvaughn/react-window\" target=\"_blank\" rel=\"noopener noreferrer\">react-window</a> - 简洁的 react-virtualized</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/jaredpalmer/formik\" target=\"_blank\" rel=\"noopener noreferrer\">formik</a> - 表单解决方案</li>\n<li><a href=\"https://github.com/transitive-bullshit/create-react-library\" target=\"_blank\" rel=\"noopener noreferrer\">create-react-library</a> - 用于创建可重用的 react 库的 cli</li>\n<li><a href=\"https://swr.vercel.app/\" target=\"_blank\" rel=\"noopener noreferrer\">swr</a> - 管理你的请求</li>\n<li><a href=\"https://react-query.tanstack.com/\" target=\"_blank\" rel=\"noopener noreferrer\">react-query</a> - 管理你的请求</li>\n<li><a href=\"https://github.com/streamich/react-use\" target=\"_blank\" rel=\"noopener noreferrer\">react-use</a> - hooks 包</li>\n<li><a href=\"https://ahooks.js.org/zh-CN\" target=\"_blank\" rel=\"noopener noreferrer\">ahooks</a> - hooks 包</li>\n<li><a href=\"https://usehooks.com/\" target=\"_blank\" rel=\"noopener noreferrer\">usehooks</a></li>\n<li><a href=\"https://pro.ant.design/index-cn\" target=\"_blank\" rel=\"noopener noreferrer\">ant-design-pro</a> - 后台管理系统</li>\n<li><a href=\"https://github.com/lgf196/ant-simple-pro\" target=\"_blank\" rel=\"noopener noreferrer\">ant-simple-pro</a> - 后台管理系统</li>\n<li><a href=\"https://github.com/duxianwei520/react\" target=\"_blank\" rel=\"noopener noreferrer\">react-admin</a> - 后台管理系统</li>\n<li><a href=\"https://github.com/flatlogic/react-material-admin\" target=\"_blank\" rel=\"noopener noreferrer\">react-material-admin</a> - 后台管理系统</li>\n<li><a href=\"https://github.com/vadimdemedes/ink\" target=\"_blank\" rel=\"noopener noreferrer\">ink</a> - 在交互式命令行中使用 react</li>\n<li><a href=\"https://github.com/zthxxx/react-dev-inspector\" target=\"_blank\" rel=\"noopener noreferrer\">react-dev-inspector</a> - 检查 react 组件</li>\n<li><a href=\"https://github.com/Oblosys/react-lifecycle-visualizer\" target=\"_blank\" rel=\"noopener noreferrer\">react-lifecycle-visualizer</a> - react 生命周期方法的实时可视化工具</li>\n<li><a href=\"https://github.com/welldone-software/why-did-you-render\" target=\"_blank\" rel=\"noopener noreferrer\">why-did-you-render</a> - 展示可避免的重复渲染</li>\n<li><a href=\"https://github.com/React-Proto/react-proto\" target=\"_blank\" rel=\"noopener noreferrer\">react-proto</a> - 为开发人员和设计人员提供的 react 应用原型开发工具</li>\n<li><a href=\"https://react-styleguidist.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">react-styleguidist</a></li>\n</ul>\n</li>\n<li>进阶\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/266748892\" target=\"_blank\" rel=\"noopener noreferrer\">react 源码通关指南</a>\n<ul>\n<li><a href=\"https://react.iamkasong.com/\" target=\"_blank\" rel=\"noopener noreferrer\">react 技术揭秘</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/7kms/react-illustration-series\" target=\"_blank\" rel=\"noopener noreferrer\">图解 react</a></li>\n<li><a href=\"https://github.com/sudheerj/reactjs-interview-questions\" target=\"_blank\" rel=\"noopener noreferrer\">react 面试题</a></li>\n<li><a href=\"https://overreacted.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Dan Abramov's Blog</a>\n<ul>\n<li><a href=\"https://overreacted.io/zh-hans/react-as-a-ui-runtime/\" target=\"_blank\" rel=\"noopener noreferrer\">将 React 作为 UI 运行时</a></li>\n<li><a href=\"https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/\" target=\"_blank\" rel=\"noopener noreferrer\">useEffect 完整指南</a></li>\n<li><a href=\"https://overreacted.io/zh-hans/making-setinterval-declarative-with-react-hooks/\" target=\"_blank\" rel=\"noopener noreferrer\">使用 React Hooks 声明 setInterval</a></li>\n</ul>\n</li>\n<li><a href=\"https://juejin.im/post/5dadc6045188255a270a0f85\" target=\"_blank\" rel=\"noopener noreferrer\">这可能是最通俗的 React Fiber（时间分片) 打开方式</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/196758730\" target=\"_blank\" rel=\"noopener noreferrer\">构建 react 组件库</a> - 大方向上适用于 vue</li>\n<li><a href=\"https://www.zhihu.com/question/468249924/answer/1968728853\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.zhihu.com/question/468249924/answer/1968728853</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"virtual-dom\"> Virtual DOM</h2>\n<ul>\n<li><a href=\"https://github.com/snabbdom/snabbdom\" target=\"_blank\" rel=\"noopener noreferrer\">snabbdom</a></li>\n<li><a href=\"https://github.com/joelrich/citojs\" target=\"_blank\" rel=\"noopener noreferrer\">cito.js</a></li>\n</ul>\n<h2 id=\"面试\"> 面试</h2>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/py_HLqOjNdL4l0CZHjMwqw\" target=\"_blank\" rel=\"noopener noreferrer\">如何写前端简历</a></li>\n<li><a href=\"https://resume.mdedit.online/\" target=\"_blank\" rel=\"noopener noreferrer\">木及简历</a></li>\n<li><a href=\"https://bitable.feishu.cn/app8Ok6k9qafpMkgyRbfgxeEnet\" target=\"_blank\" rel=\"noopener noreferrer\">前端面试真题</a></li>\n<li><a href=\"https://lucifer.ren/fe-interview/\" target=\"_blank\" rel=\"noopener noreferrer\">大前端面试宝典 - 图解前端</a></li>\n<li><a href=\"http://interview.poetries.top/\" target=\"_blank\" rel=\"noopener noreferrer\">前端面经总结</a></li>\n<li><a href=\"https://coffe1891.gitbook.io/frontend-hard-mode-interview/\" target=\"_blank\" rel=\"noopener noreferrer\">前端内参</a></li>\n<li><a href=\"https://lgwebdream.github.io/FE-Interview/\" target=\"_blank\" rel=\"noopener noreferrer\">前端每日一题</a></li>\n<li><a href=\"https://github.com/Advanced-Frontend/Daily-Interview-Question\" target=\"_blank\" rel=\"noopener noreferrer\">前端每日一题</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/HoltfI8MdE2DIihaWT0RCQ\" target=\"_blank\" rel=\"noopener noreferrer\">75 个 JavaScript 面试题集锦</a></li>\n<li><a href=\"https://juejin.im/post/5e8b261ae51d4546c0382ab4\" target=\"_blank\" rel=\"noopener noreferrer\">前端基础拾遗 90 问</a></li>\n<li><a href=\"https://github.com/Chocolate1999/Front-end-learning-to-organize-notes\" target=\"_blank\" rel=\"noopener noreferrer\">前端学习笔记</a></li>\n</ul>\n<h2 id=\"cli\"> CLI</h2>\n<ul>\n<li><a href=\"https://github.com/tj/commander.js\" target=\"_blank\" rel=\"noopener noreferrer\">commander</a></li>\n<li><a href=\"https://github.com/chalk/chalk\" target=\"_blank\" rel=\"noopener noreferrer\">chalk</a></li>\n<li><a href=\"http://yargs.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">yargs</a></li>\n<li><a href=\"https://github.com/yargs/yargs-parser\" target=\"_blank\" rel=\"noopener noreferrer\">yargs-parser</a></li>\n<li><a href=\"https://github.com/SBoudrias/Inquirer.js\" target=\"_blank\" rel=\"noopener noreferrer\">inquirer</a></li>\n<li><a href=\"https://github.com/sindresorhus/meow\" target=\"_blank\" rel=\"noopener noreferrer\">meow</a></li>\n<li><a href=\"https://github.com/sindresorhus/ora\" target=\"_blank\" rel=\"noopener noreferrer\">ora</a></li>\n<li><a href=\"https://github.com/isaacs/rimraf\" target=\"_blank\" rel=\"noopener noreferrer\">rimraf</a></li>\n<li><a href=\"https://github.com/kentcdodds/cross-env\" target=\"_blank\" rel=\"noopener noreferrer\">cross-env</a></li>\n<li><a href=\"https://github.com/vuejs/vue-cli\" target=\"_blank\" rel=\"noopener noreferrer\">@vue/cli</a></li>\n<li><a href=\"https://github.com/vercel/ncc\" target=\"_blank\" rel=\"noopener noreferrer\">ncc</a></li>\n<li><a href=\"https://github.com/raineorshine/npm-check-updates\" target=\"_blank\" rel=\"noopener noreferrer\">npm-check-updates</a></li>\n<li><a href=\"https://github.com/vercel/serve\" target=\"_blank\" rel=\"noopener noreferrer\">serve</a></li>\n<li><a href=\"https://github.com/TypeStrong/ts-node\" target=\"_blank\" rel=\"noopener noreferrer\">ts-node</a></li>\n<li><a href=\"https://github.com/google/zx\" target=\"_blank\" rel=\"noopener noreferrer\">zx</a></li>\n</ul>\n<h2 id=\"服务器端\"> 服务器端</h2>\n<ul>\n<li>接口规范\n<ul>\n<li><a href=\"https://www.jsonrpc.org/\" target=\"_blank\" rel=\"noopener noreferrer\">json-rpc</a></li>\n<li><a href=\"https://restfulapi.net/\" target=\"_blank\" rel=\"noopener noreferrer\">restful api</a></li>\n<li><a href=\"https://graphql.org/\" target=\"_blank\" rel=\"noopener noreferrer\">graphql</a></li>\n</ul>\n</li>\n<li><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener noreferrer\">node.js</a> - 用 js 构建后端服务\n<ul>\n<li><a href=\"http://nodejs.cn/learn\" target=\"_blank\" rel=\"noopener noreferrer\">Node.js 入门教程</a></li>\n<li><a href=\"https://weread.qq.com/web/reader/d1b32290718ff65fd1befcc\" target=\"_blank\" rel=\"noopener noreferrer\">深入浅出 Node.js</a></li>\n<li><a href=\"https://docs.microsoft.com/zh-cn/learn/paths/build-javascript-applications-nodejs/\" target=\"_blank\" rel=\"noopener noreferrer\">使用 Node.js 构建 JavaScript 应用程序</a></li>\n<li><a href=\"https://github.com/qufei1993/Nodejs-Roadmap\" target=\"_blank\" rel=\"noopener noreferrer\">node.js 技术栈</a></li>\n<li><a href=\"https://hejialianghe.gitee.io/\" target=\"_blank\" rel=\"noopener noreferrer\">web 全栈体系</a></li>\n<li><a href=\"https://github.com/goldbergyoni/nodebestpractices\" target=\"_blank\" rel=\"noopener noreferrer\">node-best-practices</a></li>\n<li><a href=\"https://expressjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">express</a> - 快速、开放、极简的 node.js 框架\n<ul>\n<li><a href=\"https://sailsjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">sails</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.fastify.io/\" target=\"_blank\" rel=\"noopener noreferrer\">fastify</a> - 快速、低开销的 node.js 框架</li>\n<li><a href=\"https://nestjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">nest</a> - 渐进式 node.js 框架</li>\n<li><a href=\"https://koajs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">koa</a> - node.js 框架，自由度高\n<ul>\n<li><a href=\"https://eggjs.org/zh-cn/\" target=\"_blank\" rel=\"noopener noreferrer\">egg</a> - 封装 koa 的 node.js 框架，约定大于配置</li>\n<li><a href=\"https://thinkjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">think</a> - 使用完整的 ES6/7 特性开发 node.js 应用</li>\n<li><a href=\"https://darukjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">daruk</a> - 基于 koa，使用 Typescript 开发的轻量级 web 框架</li>\n</ul>\n</li>\n<li><a href=\"https://www.meteor.com/\" target=\"_blank\" rel=\"noopener noreferrer\">meteor</a> - 全栈框架</li>\n<li><a href=\"https://github.com/blitz-js/blitz\" target=\"_blank\" rel=\"noopener noreferrer\">blitz</a> - 基于 next.js 的全栈框架</li>\n<li><a href=\"https://loopback.io/\" target=\"_blank\" rel=\"noopener noreferrer\">loopback</a></li>\n<li><a href=\"https://hapi.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">hapi</a></li>\n<li><a href=\"http://restify.com/\" target=\"_blank\" rel=\"noopener noreferrer\">restify</a></li>\n<li><a href=\"https://adonisjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">adonis</a></li>\n<li><a href=\"https://strapi.io/\" target=\"_blank\" rel=\"noopener noreferrer\">strapi</a></li>\n<li><a href=\"https://midwayjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">midway.js</a> - 适用于构建 Serverless 服务，传统应用、微服务，小程序后端的 node.js 框架</li>\n<li><a href=\"https://github.com/farrow-js/farrow\" target=\"_blank\" rel=\"noopener noreferrer\">farrow</a></li>\n</ul>\n</li>\n<li>增强\n<ul>\n<li><a href=\"https://www.nginx.com/\" target=\"_blank\" rel=\"noopener noreferrer\">nginx</a> - 高性能的 web 和反向代理服务器\n<ul>\n<li><a href=\"https://openresty.org/\" target=\"_blank\" rel=\"noopener noreferrer\">open-resty</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tools/nginx\" target=\"_blank\" rel=\"noopener noreferrer\">nginx 在线配置</a></li>\n</ul>\n</li>\n<li><a href=\"https://swagger.io/\" target=\"_blank\" rel=\"noopener noreferrer\">swagger</a> - 团队的 api 文档和设计工具</li>\n<li><a href=\"https://weread.qq.com/web/reader/95232130715c01b39521460\" target=\"_blank\" rel=\"noopener noreferrer\">SQL 必知必会</a></li>\n<li><a href=\"https://www.mysql.com/\" target=\"_blank\" rel=\"noopener noreferrer\">mysql</a> - 关系型数据库\n<ul>\n<li><a href=\"https://weread.qq.com/web/reader/929321f0715c01b5929bd3f\" target=\"_blank\" rel=\"noopener noreferrer\">MySQL 必知必会</a></li>\n<li><a href=\"https://www.mysql.com/products/workbench/\" target=\"_blank\" rel=\"noopener noreferrer\">mysql workbench</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.postgresql.org/\" target=\"_blank\" rel=\"noopener noreferrer\">postgresql</a> - 关系型数据库</li>\n<li><a href=\"https://redis.io/\" target=\"_blank\" rel=\"noopener noreferrer\">redis</a> - 非关系型数据库，多用于缓存\n<ul>\n<li><a href=\"https://github.com/qishibo/AnotherRedisDesktopManager\" target=\"_blank\" rel=\"noopener noreferrer\">another redis desktop manager</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.memcached.org/\" target=\"_blank\" rel=\"noopener noreferrer\">memcached</a> - 非关系型数据库，多用于缓存</li>\n<li><a href=\"https://www.mongodb.com/\" target=\"_blank\" rel=\"noopener noreferrer\">mongodb</a> - 非关系型数据库\n<ul>\n<li><a href=\"https://www.mongodb.com/products/compass\" target=\"_blank\" rel=\"noopener noreferrer\">mongodb compass</a></li>\n</ul>\n</li>\n<li><a href=\"https://couchdb.apache.org/\" target=\"_blank\" rel=\"noopener noreferrer\">couchdb</a> - 非关系型数据库</li>\n<li><a href=\"https://sequelize.org/\" target=\"_blank\" rel=\"noopener noreferrer\">sequelize</a></li>\n<li><a href=\"https://typeorm.io/\" target=\"_blank\" rel=\"noopener noreferrer\">typeorm</a></li>\n<li><a href=\"https://mongoosejs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">mongoose</a></li>\n<li><a href=\"https://www.prisma.io/\" target=\"_blank\" rel=\"noopener noreferrer\">prisma</a></li>\n<li><a href=\"https://www.rabbitmq.com/\" target=\"_blank\" rel=\"noopener noreferrer\">rabbitmq</a> - 消息队列</li>\n<li><a href=\"https://www.docker.com/\" target=\"_blank\" rel=\"noopener noreferrer\">docker</a> - 应用容器引擎，打包应用和依赖包到一个可移植的镜像中然后发布</li>\n<li><a href=\"https://kubernetes.io/\" target=\"_blank\" rel=\"noopener noreferrer\">kubernetes</a> - 容器编排引擎，支持自动化部署、大规模可伸缩、应用容器化管理</li>\n<li><a href=\"https://github.com/node-cron/node-cron\" target=\"_blank\" rel=\"noopener noreferrer\">node-cron</a> - 任务调度</li>\n<li><a href=\"https://nodemon.io/\" target=\"_blank\" rel=\"noopener noreferrer\">nodemon</a> - 进程守护</li>\n<li><a href=\"https://pm2.keymetrics.io/\" target=\"_blank\" rel=\"noopener noreferrer\">pm2</a> - 进程守护</li>\n<li><a href=\"https://github.com/foreversd/forever\" target=\"_blank\" rel=\"noopener noreferrer\">forever</a> - 进程守护</li>\n<li><a href=\"https://juejin.cn/post/6859214952704999438\" target=\"_blank\" rel=\"noopener noreferrer\">你的登录接口真的安全吗</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"持续成长\"> 持续成长</h2>\n<ul>\n<li><a href=\"https://github.com/EbookFoundation/free-programming-books/blob/master/free-programming-books-zh.md\" target=\"_blank\" rel=\"noopener noreferrer\">免费计算机编程类书籍</a></li>\n<li><a href=\"https://github.com/justjavac/free-programming-books-zh_CN\" target=\"_blank\" rel=\"noopener noreferrer\">免费计算机编程类中文书籍</a></li>\n<li><a href=\"https://github.com/XiangLinPro/IT_book\" target=\"_blank\" rel=\"noopener noreferrer\">编程书籍</a></li>\n<li><a href=\"https://github.com/QSCTech/zju-icicles\" target=\"_blank\" rel=\"noopener noreferrer\">QSCTech - zju-icicles</a> - 浙江大学课程攻略共享计划</li>\n<li><a href=\"https://github.com/PKUanonym/REKCARC-TSC-UHT\" target=\"_blank\" rel=\"noopener noreferrer\">PKUanonym - REKCARC-TSC-UHT</a> - 清华大学计算机系课程攻略</li>\n<li><a href=\"https://github.com/ysyisyourbrother/SYSU_Notebook\" target=\"_blank\" rel=\"noopener noreferrer\">ysyisyourbrother - SYSU_Notebook</a> - 中山大学资料分享</li>\n<li><a href=\"https://github.com/nusr/hacker-laws-zh#%E4%BB%8B%E7%BB%8D\" target=\"_blank\" rel=\"noopener noreferrer\">Hacker Laws - 对开发人员有用的定律、理论、原则和模式</a></li>\n<li><a href=\"https://weread.qq.com/web/reader/65832f00716ce84e658ac89\" target=\"_blank\" rel=\"noopener noreferrer\">前端工程化：体系设计与实践</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/ikVW2kks3wS5UdrUH9vDRQ\" target=\"_blank\" rel=\"noopener noreferrer\">关于前端学习路线的一些建议</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/8YQD3VlAPagMldww3e9S2A\" target=\"_blank\" rel=\"noopener noreferrer\">WEB 前端菜鸟，感觉很迷茫，该怎么做？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/7VddgPmY8bdo9uBSdH7guA\" target=\"_blank\" rel=\"noopener noreferrer\">前端如何在繁忙的业务中提升自己</a></li>\n<li><a href=\"https://www.zhihu.com/question/61281984/answer/1306626251\" target=\"_blank\" rel=\"noopener noreferrer\">阿里巴巴前端 P6/P6+ 水平要求</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/0jtVxlh-toEmNbwJpIfAuA\" target=\"_blank\" rel=\"noopener noreferrer\">写给初中级前端的高级进阶指南</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/eiCnTATNLrSnkDi25IbhnA\" target=\"_blank\" rel=\"noopener noreferrer\">前端转行之路</a></li>\n<li><a href=\"https://github.com/dt-fe/weekly\" target=\"_blank\" rel=\"noopener noreferrer\">前端精读周刊</a></li>\n<li><a href=\"https://qiufeng.blue/\" target=\"_blank\" rel=\"noopener noreferrer\">秋风的笔记</a></li>\n<li><a href=\"https://github.com/qianguyihao/Web\" target=\"_blank\" rel=\"noopener noreferrer\">前端入门到进阶图文教程</a></li>\n<li><a href=\"https://github.com/qianguyihao/Web\" target=\"_blank\" rel=\"noopener noreferrer\">前端入门到进阶图文教程</a></li>\n<li><a href=\"https://yuchengkai.cn/home/\" target=\"_blank\" rel=\"noopener noreferrer\">前端进阶之道</a></li>\n<li><a href=\"https://muyiy.cn/\" target=\"_blank\" rel=\"noopener noreferrer\">木易杨前端进阶</a></li>\n<li><a href=\"https://github.com/fouber/blog\" target=\"_blank\" rel=\"noopener noreferrer\">前端工程化</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/EF86vmJfZJ-hUReFHM8HDw\" target=\"_blank\" rel=\"noopener noreferrer\">畅销书《深入浅出Vue.js》作者，在阿里淘系1年的收获成长</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000022602612\" target=\"_blank\" rel=\"noopener noreferrer\">我在阿里是怎么工作的——写在阿里入职一周年</a></li>\n<li><a href=\"https://juejin.cn/post/6973483540906246152\" target=\"_blank\" rel=\"noopener noreferrer\">我在阿里是怎么工作的——写在阿里入职两周年</a></li>\n<li><a href=\"https://juejin.cn/post/6946210273061502990\" target=\"_blank\" rel=\"noopener noreferrer\">前端负责人需要具有的能力</a></li>\n<li><a href=\"https://www.zhihu.com/question/411824337/answer/1470856059\" target=\"_blank\" rel=\"noopener noreferrer\">你认为程序员从幼稚到成熟的过程是什么？ - 姚冬的回答 - 知乎</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/_q_SnCbGyXrNnXA876tXbA\" target=\"_blank\" rel=\"noopener noreferrer\">尤雨溪：做技术哪有什么两全之策，都是取舍和平衡</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/qO2AKK4p1-JXIDApVG08Bw\" target=\"_blank\" rel=\"noopener noreferrer\">初创公司的前端团队如何突围</a></li>\n<li><a href=\"https://www.infoq.cn/article/myekmcclgexvkrq7lwny\" target=\"_blank\" rel=\"noopener noreferrer\">打造高效团队的最佳实践</a></li>\n<li><a href=\"https://medium.com/@nnilesh7756/what-are-cloud-computing-services-iaas-caas-paas-faas-saas-ac0f6022d36e\" target=\"_blank\" rel=\"noopener noreferrer\">云服务 IaaS，CaaS，PaaS，FaaS，SaaS</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/UNjukIfikUFmZfjSECiGSA\" target=\"_blank\" rel=\"noopener noreferrer\">我辈程序员，何惧一战？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/LgxxIEMaiaMtc0GIDXGG9g\" target=\"_blank\" rel=\"noopener noreferrer\">美团外卖美食知识图谱的迭代及应用</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/qxbU92Z_70Z9T-XQLFyt4w\" target=\"_blank\" rel=\"noopener noreferrer\">外卖商品的标准化建设与应用</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/F9ptjT4bjc85E5_MpyF4Xw\" target=\"_blank\" rel=\"noopener noreferrer\">外卖套餐搭配的探索和应用</a></li>\n</ul>\n<h2 id=\"自媒体\"> 自媒体</h2>\n<ul>\n<li><a href=\"https://www.wechatsync.com/\" target=\"_blank\" rel=\"noopener noreferrer\">文章同步助手</a></li>\n</ul>\n<h2 id=\"开源\"> 开源</h2>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/33573424\" target=\"_blank\" rel=\"noopener noreferrer\">为什么要开源</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/176839757\" target=\"_blank\" rel=\"noopener noreferrer\">github 开源指南</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/376516218\" target=\"_blank\" rel=\"noopener noreferrer\">开源社区的暗面</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000040195344\" target=\"_blank\" rel=\"noopener noreferrer\">开源有带给我什么</a></li>\n</ul>\n<h2 id=\"独立开发者\"> 独立开发者</h2>\n<ul>\n<li><a href=\"https://howto-make-more-money-easychen.vercel.app/\" target=\"_blank\" rel=\"noopener noreferrer\">程序员如何优雅地赚零花钱</a></li>\n<li><a href=\"https://github.com/easychen/one-person-businesses-methodology\" target=\"_blank\" rel=\"noopener noreferrer\">一人公司方法论</a></li>\n</ul>\n<h2 id=\"参考\"> 参考</h2>\n<ul>\n<li><a href=\"https://github.com/sorrycc/awesome-f2e-libs\" target=\"_blank\" rel=\"noopener noreferrer\">sorrycc/awesome-f2e-libs</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&amp;mid=2247507147&amp;idx=2&amp;sn=bf3f9939b7b3bb9fcaab22ea838d5556&amp;chksm=f9526988ce25e09e80fa4a401cf1346b55be6f59f9a7f5cde17a336c3ce481ada4f7b08a8eaa&amp;scene=27#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\">15+人团队的前端体系架构应该如何管理？</a></li>\n</ul>\n<h2 id=\"致谢\"> 致谢</h2>\n<ul>\n<li>Moniek - 来邮为我提供了建议，附带了免费可商用字体列表</li>\n</ul>\n",
      "date_published": "2021-07-05T05:18:00.000Z",
      "date_modified": "2021-07-15T09:06:21.000Z",
      "authors": [
        {
          "name": "ModyQyW <wurui7@mail3.sysu.edu.cn>"
        }
      ],
      "tags": []
    },
    {
      "title": "环境配置",
      "url": "https://modyqyw.top/environment/",
      "id": "https://modyqyw.top/environment/",
      "content_html": "<h1 id=\"环境配置\"> 环境配置</h1>\n<p>所有配置仅供参考，且尽可能使用统一的包管理器安装。Windows 上推荐使用 <a href=\"https://chocolatey.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Chocolatey</a>，macOS 上推荐使用 <a href=\"https://brew.sh/\" target=\"_blank\" rel=\"noopener noreferrer\">Homebrew</a>，均不推荐换源。以下给出在 macOS (intel) 上的应用和配置参考，并补充说明在 Windows 上大致如何操作。</p>\n<h2 id=\"dns\"> DNS</h2>\n<ul>\n<li><a href=\"http://alidns.com/\" target=\"_blank\" rel=\"noopener noreferrer\">阿里 DNS</a> - <code>223.5.5.5</code>，<code>223.6.6.6</code>，<code>2400:3200::1</code>，<code>2400:3200:baba::1</code></li>\n<li><a href=\"https://dudns.baidu.com/intro/publicdns/\" target=\"_blank\" rel=\"noopener noreferrer\">百度 DNS</a> - <code>180.76.76.76</code>，<code>2400:da00::6666</code></li>\n<li><a href=\"https://www.114dns.com/\" target=\"_blank\" rel=\"noopener noreferrer\">114 DNS</a> - <code>114.114.114.114</code>，<code>114.114.115.115</code></li>\n<li><a href=\"https://www.dnspod.cn/Products/Public.DNS\" target=\"_blank\" rel=\"noopener noreferrer\">DNSPOS DNS</a> - <code>119.29.29.29</code></li>\n<li><a href=\"https://developers.google.cn/speed/public-dns/docs/using?hl=zh-CN\" target=\"_blank\" rel=\"noopener noreferrer\">Google DNS</a> - <code>8.8.8.8</code>，<code>8.8.4.4</code>，<code>2001:4860:4860::8888</code>，<code>2001:4860:4860::8844</code></li>\n<li><a href=\"https://developers.cloudflare.com/1.1.1.1/setting-up-1.1.1.1/\" target=\"_blank\" rel=\"noopener noreferrer\">Cloudflare DNS</a> - <code>1.1.1.1</code>，<code>1.0.0.1</code>，<code>2606:4700:4700::1111</code>，<code>2606:4700:4700::1001</code></li>\n<li><a href=\"https://www.opendns.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Open DNS</a> - <code>208.67.222.222</code>，<code>208.67.220.220</code></li>\n</ul>\n<h2 id=\"浏览器插件\"> 浏览器插件</h2>\n<ul>\n<li>BitWarden - 密码管理</li>\n<li>Dark Reader - 暗黑模式</li>\n<li>Gitako - 便捷查看 Github</li>\n<li>IE Tab - 模拟 IE 行为</li>\n<li>Lighthouse - 网页性能测试</li>\n<li>React Developer Tools - react 浏览器调试工具</li>\n<li>Sync Sofa - 同步看剧</li>\n<li>Tampermonkey - 插件工具</li>\n<li>uBlock Origin - 广告屏蔽，配置参考 <a href=\"https://github.com/cjx82630/cjxlist\" target=\"_blank\" rel=\"noopener noreferrer\">cjxlist</a></li>\n<li>Vue.js devtools - vue 浏览器调试工具</li>\n<li>Wappalyzer - 网页依赖分析</li>\n<li>Window Resizer - 便捷调试响应式网页</li>\n<li>哔哩哔哩助手</li>\n</ul>\n<h2 id=\"macos-intel\"> macOS (intel)</h2>\n<ul>\n<li>\n<p>在触控板上四指捏合，或者点击底部 <code>程序坞</code> 里面的 <code>启动台</code>，然后打开 <code>终端</code>。</p>\n</li>\n<li>\n<p>点击左上角的 <code>终端</code> -&gt; 偏好设置 -&gt; 描述文件，可以选择你想要的基本效果。我这里选择了 <code>Pro</code>。</p>\n</li>\n<li>\n<p>安装 <a href=\"https://brew.sh/\" target=\"_blank\" rel=\"noopener noreferrer\">Homebrew</a> 并链接不同的软件源，方便后续大量软件的安装和更新。</p>\n</li>\n</ul>\n<div><pre><code>/bin/bash -c <span>\"<span><span>$(</span><span>curl</span> -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span>)</span></span>\"</span>\nbrew tap buo/cask-upgrade <span># https://github.com/buo/homebrew-cask-upgrade</span>\n<span># Update formulaes and casks</span>\nbrew upgrade <span>&amp;&amp;</span> brew cu -ay <span>&amp;&amp;</span> brew cleanup\n<span># Check problems</span>\nbrew doctor\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><ul>\n<li>安装 <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener noreferrer\">VSCode</a>，方便编辑文件。</li>\n</ul>\n<div><pre><code>brew <span>install</span> --cask visual-studio-code\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>安装 <a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Git</a>。</li>\n</ul>\n<div><pre><code>brew <span>install</span> <span>git</span>\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>切换默认的 <code>shell</code> 到 <code>zsh</code>（<a href=\"https://www.ihewro.com/archives/933/\" target=\"_blank\" rel=\"noopener noreferrer\">终端和 shell 的区别</a>）。</li>\n</ul>\n<div><pre><code>chsh -s /bin/zsh\n<span>sudo</span> chsh -s /bin/zsh\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><ul>\n<li>安装 <a href=\"https://ohmyz.sh/\" target=\"_blank\" rel=\"noopener noreferrer\">oh-my-zsh</a>。</li>\n</ul>\n<div><pre><code><span>sh</span> -c <span>\"<span><span>$(</span><span>curl</span> -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span>)</span></span>\"</span>\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>安装 <code>oh-my-zsh</code> 的插件 <a href=\"https://github.com/zsh-users/zsh-syntax-highlighting\" target=\"_blank\" rel=\"noopener noreferrer\">zsh-syntax-highlighting</a> 和 <a href=\"https://github.com/zsh-users/zsh-autosuggestions\" target=\"_blank\" rel=\"noopener noreferrer\">zsh-autosuggestions</a>。</li>\n</ul>\n<div><pre><code><span>sudo</span> <span>chmod</span> <span>777</span> ～/.oh-my-zsh\n<span>sudo</span> <span>git</span> clone https://github.com/zsh-users/zsh-syntax-highlighting <span>${ZSH_CUSTOM<span>:-</span>~<span>/</span>.oh-my-zsh<span>/</span>custom}</span>/plugins/zsh-syntax-highlighting\n<span>sudo</span> <span>git</span> clone https://github.com/zsh-users/zsh-autosuggestions <span>${ZSH_CUSTOM<span>:-</span>~<span>/</span>.oh-my-zsh<span>/</span>custom}</span>/plugins/zsh-autosuggestions\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><ul>\n<li>用 <code>vscode</code> 打开默认主题 <code>robbyrussell</code> 的配置文件 <code>~/.oh-my-zsh/themes/robbyrussell.zsh-theme</code>，简单修改一下然后保存</li>\n</ul>\n<div><pre><code>code ~/.oh-my-zsh/themes/robbyrussell.zsh-theme\n</code></pre>\n<div><span>1</span><br></div></div><div><pre><code><span>PROMPT</span><span>=</span><span>\"%(?:%{<span>$fg_bold</span>[green]%}➜ :%{<span>$fg_bold</span>[red]%}➜ )\"</span>\n<span>PROMPT</span><span>+=</span><span>' %{<span>$fg</span>[cyan]%}[<span>$PWD</span>]%{<span>$reset_color</span>%} <span><span>$(</span>git_prompt_info<span>)</span></span>'</span>\n\n<span>ZSH_THEME_GIT_PROMPT_PREFIX</span><span>=</span><span>\"%{<span>$fg_bold</span>[blue]%}git:(%{<span>$fg</span>[red]%}\"</span>\n<span>ZSH_THEME_GIT_PROMPT_SUFFIX</span><span>=</span><span>\"%{<span>$reset_color</span>%} \"</span>\n<span>ZSH_THEME_GIT_PROMPT_DIRTY</span><span>=</span><span>\"%{<span>$fg</span>[blue]%}) %{<span>$fg</span>[yellow]%}✗\"</span>\n<span>ZSH_THEME_GIT_PROMPT_CLEAN</span><span>=</span><span>\"%{<span>$fg</span>[blue]%})\"</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><ul>\n<li>用 <code>vscode</code> 打开 <code>zsh</code> 的配置文件 <code>~/.zshrc</code>，配置 <code>zsh</code> 和环境变量。</li>\n</ul>\n<div><pre><code>code ~/.zshrc\n</code></pre>\n<div><span>1</span><br></div></div><div><pre><code><span># If you come from bash you might have to change your $PATH.</span>\n<span># export PATH=$HOME/bin:/usr/local/bin:$PATH</span>\n\n<span># Path to your oh-my-zsh installation.</span>\n<span>export</span> <span>ZSH</span><span>=</span><span>\"~/.oh-my-zsh\"</span>\n\n<span># Set name of the theme to load --- if set to \"random\", it will</span>\n<span># load a random theme each time oh-my-zsh is loaded, in which case,</span>\n<span># to know which specific one was loaded, run: echo $RANDOM_THEME</span>\n<span># See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes</span>\n<span>ZSH_THEME</span><span>=</span><span>\"robbyrussell\"</span>\n\n<span># Set list of themes to pick from when loading at random</span>\n<span># Setting this variable when ZSH_THEME=random will cause zsh to load</span>\n<span># a theme from this variable instead of looking in ~/.oh-my-zsh/themes/</span>\n<span># If set to an empty array, this variable will have no effect.</span>\n<span># ZSH_THEME_RANDOM_CANDIDATES=( \"robbyrussell\" \"agnoster\" )</span>\n\n<span># Uncomment the following line to use case-sensitive completion.</span>\n<span># CASE_SENSITIVE=\"true\"</span>\n\n<span># Uncomment the following line to use hyphen-insensitive completion.</span>\n<span># Case-sensitive completion must be off. _ and - will be interchangeable.</span>\n<span># HYPHEN_INSENSITIVE=\"true\"</span>\n\n<span># Uncomment the following line to disable bi-weekly auto-update checks.</span>\n<span># DISABLE_AUTO_UPDATE=\"true\"</span>\n\n<span># Uncomment the following line to automatically update without prompting.</span>\n<span># DISABLE_UPDATE_PROMPT=\"true\"</span>\n\n<span># Uncomment the following line to change how often to auto-update (in days).</span>\n<span># export UPDATE_ZSH_DAYS=13</span>\n\n<span># Uncomment the following line if pasting URLs and other text is messed up.</span>\n<span># DISABLE_MAGIC_FUNCTIONS=true</span>\n\n<span># Uncomment the following line to disable colors in ls.</span>\n<span># DISABLE_LS_COLORS=\"true\"</span>\n\n<span># Uncomment the following line to disable auto-setting terminal title.</span>\n<span># DISABLE_AUTO_TITLE=\"true\"</span>\n\n<span># Uncomment the following line to enable command auto-correction.</span>\n<span># ENABLE_CORRECTION=\"true\"</span>\n\n<span># Uncomment the following line to display red dots whilst waiting for completion.</span>\n<span># COMPLETION_WAITING_DOTS=\"true\"</span>\n\n<span># Uncomment the following line if you want to disable marking untracked files</span>\n<span># under VCS as dirty. This makes repository status check for large repositories</span>\n<span># much, much faster.</span>\n<span># DISABLE_UNTRACKED_FILES_DIRTY=\"true\"</span>\n\n<span># Uncomment the following line if you want to change the command execution time</span>\n<span># stamp shown in the history command output.</span>\n<span># You can set one of the optional three formats:</span>\n<span># \"mm/dd/yyyy\"|\"dd.mm.yyyy\"|\"yyyy-mm-dd\"</span>\n<span># or set a custom format using the strftime function format specifications,</span>\n<span># see 'man strftime' for details.</span>\n<span># HIST_STAMPS=\"mm/dd/yyyy\"</span>\n\n<span># Would you like to use another custom folder than $ZSH/custom?</span>\n<span># ZSH_CUSTOM=/path/to/new-custom-folder</span>\n\n<span># Which plugins would you like to load?</span>\n<span># Standard plugins can be found in ~/.oh-my-zsh/plugins/*</span>\n<span># Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/</span>\n<span># Example format: plugins=(rails git textmate ruby lighthouse)</span>\n<span># Add wisely, as too many plugins slow down shell startup.</span>\n<span>plugins</span><span>=</span><span>(</span>git z vscode zsh-syntax-highlighting zsh-autosuggestions<span>)</span>\n\n<span>source</span> <span>$ZSH</span>/oh-my-zsh.sh\n\n<span># User configuration</span>\n\n<span># export MANPATH=\"/usr/local/man:$MANPATH\"</span>\n\n<span># You may need to manually set your language environment</span>\n<span># export LANG=en_US.UTF-8</span>\n\n<span># Preferred editor for local and remote sessions</span>\n<span># if [[ -n $SSH_CONNECTION ]]; then</span>\n<span>#   export EDITOR='vim'</span>\n<span># else</span>\n<span>#   export EDITOR='mvim'</span>\n<span># fi</span>\n\n<span># Compilation flags</span>\n<span># export ARCHFLAGS=\"-arch x86_64\"</span>\n\n<span># Set personal aliases, overriding those provided by oh-my-zsh libs,</span>\n<span># plugins, and themes. Aliases can be placed here, though oh-my-zsh</span>\n<span># users are encouraged to define aliases within the ZSH_CUSTOM folder.</span>\n<span># For a full list of active aliases, run `alias`.</span>\n<span>#</span>\n<span># Example aliases</span>\n<span># alias zshconfig=\"mate ~/.zshrc\"</span>\n<span># alias ohmyzsh=\"mate ~/.oh-my-zsh\"</span>\n\n<span># show user</span>\n<span>export</span> <span>DEFAULT_USER</span><span>=</span><span>\"<span><span>$(</span><span>whoami</span><span>)</span></span>\"</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br></div></div><ul>\n<li>保存一下，然后在终端里指定使用 <code>~/.zshrc</code>。这一步非常重要，配置完 <code>~/.zshrc</code> 之后都要指定一下。后面不再重复这一点。</li>\n</ul>\n<div><pre><code><span>source</span> ~/.zshrc\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>开始疯狂用 <code>homebrew</code> 安装和配置。</li>\n</ul>\n<div><pre><code><span># 驱动</span>\nbrew tap homebrew/cask-drivers <span># https://github.com/Homebrew/homebrew-cask-drivers</span>\n<span># 字体</span>\nbrew tap homebrew/cask-fonts <span># https://github.com/Homebrew/homebrew-cask-fonts</span>\nbrew <span>install</span> font-fira-code <span># https://github.com/tonsky/FiraCode</span>\nbrew <span>install</span> font-jetbrains-mono <span># https://github.com/JetBrains/JetBrainsMono</span>\nbrew <span>install</span> font-roboto <span># https://github.com/googlefonts/roboto</span>\nbrew <span>install</span> font-roboto-mono\nbrew <span>install</span> font-roboto-mono-for-powerline\nbrew <span>install</span> font-sarasa-gothic <span># https://github.com/be5invis/Sarasa-Gothic</span>\nbrew <span>install</span> font-source-code-pro <span># https://github.com/adobe-fonts/source-code-pro</span>\nbrew <span>install</span> font-source-code-pro-for-powerline\n<span># 不同版本的应用</span>\nbrew tap homebrew/cask-versions <span># https://github.com/Homebrew/homebrew-cask-versions</span>\n\n<span># 阿里云盘</span>\nbrew <span>install</span> --cask adrive\n<span># android studio，开发 Android 用</span>\nbrew <span>install</span> --cask android-studio <span># https://developer.android.com/studio/</span>\n<span># another redis desktop manager，redis gui</span>\nbrew <span>install</span> --cask another-redis-desktop-manager <span># https://github.com/qishibo/AnotherRedisDesktopManager/</span>\n<span># baidu netdisk，百度网盘，自建网盘参考 seafile 和 owncloud</span>\nbrew <span>install</span> --cask baidunetdisk <span># https://pan.baidu.com/download</span>\n<span># bitwarden，管理密码</span>\nbrew <span>install</span> --cask bitwarden <span># https://bitwarden.com/</span>\n<span># cheatsheet，长按 Command 键显示当前应用的快捷键</span>\nbrew <span>install</span> --cask cheatsheet <span># https://www.cheatsheetapp.com/CheatSheet/</span>\n<span># clashx，v2ray 客户端</span>\n<span># v2ray 服务商 holytech https://store.holytech.tech/aff.php?aff=2849</span>\n<span># v2ray 服务商 520ssr https://www.520ssr.co/auth/register?code=oiwx</span>\n<span># v2ray 服务商 iplc.vip https://portal.uuks.club/clientarea.php</span>\nbrew <span>install</span> --cask clashx <span># https://github.com/yichengchen/clashX</span>\nbrew <span>install</span> --cask clashx-pro\n<span># 钉钉</span>\nbrew <span>install</span> --cask dingtalk <span># https://www.dingtalk.com/</span>\n<span># drawio，作图工具</span>\nbrew <span>install</span> --cask drawio <span># https://www.draw.io/</span>\n<span># fliqlo，屏保时钟</span>\nbrew <span>install</span> --cask fliqlo <span># https://fliqlo.com/</span>\n<span># git，代码版本管理</span>\nbrew <span>install</span> <span>git</span> <span># https://git-scm.com/</span>\nbrew <span>install</span> git-lfs <span># https://git-lfs.github.com/</span>\n<span>git</span> config --global core.autocrlf <span>false</span>\n<span>git</span> config --global init.defaultBranch main\n<span>git</span> config --global user.name <span>\"YOUR_NAME_HERE\"</span>\n<span>git</span> config --global user.email <span>\"YOUR_EMAIL_HERE\"</span>\n<span># iina，音视频播放器</span>\nbrew <span>install</span> --cask iina <span># https://iina.io/</span>\n<span># itsycal，日历工具，可以将 macOS 的时间调成 HH:mm:ss 形式，将 itsycal 调成 YYYY-MM-DD 形式</span>\nbrew <span>install</span> --cask itsycal <span># https://www.mowglii.com/itsycal/</span>\n<span># lightproxy，代理调试工具</span>\nbrew <span>install</span> --cask lightproxy\n<span># lx-music，洛雪音乐助手</span>\nbrew <span>install</span> --cask lx-music <span># https://github.com/lyswhut/lx-music-desktop/</span>\n<span># maczip，压缩工具</span>\nbrew <span>install</span> --cask maczip <span># https://ezip.awehunt.com/</span>\n<span># microsoft-edge，浏览器</span>\nbrew <span>install</span> --cask microsoft-edge <span># https://www.microsoft.com/edge</span>\n<span># mini-program-studio，阿里系小程序开发者工具</span>\nbrew <span>install</span> --cask mini-program-studio <span># https://opendocs.alipay.com/mini/ide</span>\n<span># mongodb，流行的文档型数据库</span>\nbrew tap mongodb/brew <span># https://github.com/mongodb/homebrew-brew</span>\nbrew <span>install</span> mongodb-community\nbrew <span>install</span> --cask mongodb-compass <span># mongodb official gui</span>\nbrew services start mongodb/brew/mongodb-community <span># start when launched</span>\n<span># motrix，下载工具</span>\nbrew <span>install</span> --cask motrix <span># https://motrix.app/</span>\n<span># mysqlworkbench，mysql gui</span>\nbrew <span>install</span> --cask mysqlworkbench <span># https://www.mysql.com/products/workbench/</span>\n<span># mounty，重新挂载受写保护的 NTFS 卷</span>\nbrew <span>install</span> --cask mounty <span># https://mounty.app/</span>\n<span># obs，录屏工具</span>\nbrew <span>install</span> --cask obs <span># https://obsproject.com/</span>\n<span># openineditor-lite，在编辑器快速打开当前目录</span>\nbrew <span>install</span> --cask openineditor-lite <span># https://github.com/Ji4n1ng/OpenInTerminal</span>\n<span># openinterminal-lite，在终端快速打开当前目录</span>\nbrew <span>install</span> --cask openinterminal-lite <span># https://github.com/Ji4n1ng/OpenInTerminal</span>\n<span># openjdk，开发 Android 用</span>\nbrew <span>install</span> openjdk <span># https://openjdk.java.net/</span>\n<span># postman，接口工具</span>\nbrew <span>install</span> --cask postman <span># https://www.postman.com/</span>\n<span># prince，将 HTML 转换成 PDF</span>\nbrew <span>install</span> --cask prince <span># https://www.princexml.com/</span>\n<span># qq</span>\nbrew <span>install</span> --cask qq <span># https://im.qq.com/macqq/</span>\n<span># rectangle，快速移动、调整窗口大小</span>\nbrew <span>install</span> --cask rectangle <span># https://rectangleapp.com/</span>\n<span># responsively，帮助响应式开发</span>\nbrew <span>install</span> --cask responsively <span># https://responsively.app/</span>\n<span># snipaste，屏幕截图</span>\nbrew <span>install</span> --cask snipaste <span># https://www.snipaste.com/</span>\n<span># sourcetree，git gui</span>\nbrew <span>install</span> --cask sourcetree <span># https://www.sourcetreeapp.com/</span>\n<span># steam</span>\nbrew <span>install</span> --cask steam\n<span># subversion，代码版本管理</span>\nbrew <span>install</span> svn <span># https://subversion.apache.org/</span>\n<span># tencent-lemon，系统清理和状态工具</span>\nbrew <span>install</span> --cask tencent-lemon <span># https://lemon.qq.com/</span>\n<span># tencent-meeting，会议工具</span>\nbrew <span>install</span> --cask tencent-meeting <span># https://meeting.tencent.com/</span>\n<span># thunder，下载工具</span>\nbrew <span>install</span> --cask thunder <span># https://www.xunlei.com/</span>\n<span># utools，效率工具，包括翻译、剪切板、网页快搜的功能的插件支持</span>\n<span># 开源插件见 https://yuanliao.info/d/2168--</span>\nbrew <span>install</span> --cask utools <span># https://u.tools/index.html</span>\n<span># wechat</span>\nbrew <span>install</span> --cask wechat <span># https://mac.weixin.qq.com/</span>\n<span># wechat work</span>\nbrew <span>install</span> --cask wechatwork <span># https://work.weixin.qq.com/</span>\n<span># wechatwebdevtools，微信小程序开发者工具</span>\nbrew <span>install</span> --cask wechatwebdevtools <span># https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html</span>\n<span># yuque，语雀，知识库工具</span>\nbrew <span>install</span> --cask yuque <span># https://www.yuque.com/</span>\n<span># you-get，下载网络媒体资源</span>\nbrew <span>install</span> you-get <span># https://you-get.org/</span>\n<span># zoom，会议工具</span>\nbrew <span>install</span> --cask zoom <span># https://www.zoom.us/</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br><span>118</span><br></div></div><ul>\n<li>安装 <code>node</code> 相关。</li>\n</ul>\n<div><pre><code><span># nvm</span>\n<span>curl</span> -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh <span>|</span> <span>bash</span> <span># https://github.com/nvm-sh/nvm</span>\n<span>export</span> <span>NVM_NODEJS_ORG_MIRROR</span><span>=</span>https://nodejs.org/dist <span># use default origin</span>\n<span># export NVM_NODEJS_ORG_MIRROR=http://npm.taobao.org/mirrors/node # use taobao origin</span>\n<span># install node</span>\nnvm <span>install</span> <span>10</span>\nnvm <span>install</span> <span>12</span>\nnvm <span>install</span> <span>14</span>\nnvm <span>install</span> <span>16</span>\n<span># set default</span>\nnvm <span>alias</span> default <span>14</span>\n<span># use lts (2021.05.30)</span>\nnvm use <span>14</span>\n<span># install global deps</span>\n<span>npm</span> i -g --registry<span>=</span>https://registry.npm.taobao.org @tarojs/cli\n<span>npm</span> i -g --registry<span>=</span>https://registry.npm.taobao.org @types/node\n<span>npm</span> i -g --registry<span>=</span>https://registry.npm.taobao.org @umijs/create-umi-app\n<span>npm</span> i -g --registry<span>=</span>https://registry.npm.taobao.org @vitejs/create-app\n<span>npm</span> i -g --registry<span>=</span>https://registry.npm.taobao.org @vue/cli\n<span>npm</span> i -g --registry<span>=</span>https://registry.npm.taobao.org @vue/devtools\n<span>npm</span> i -g --registry<span>=</span>https://registry.npm.taobao.org cgr\n<span>npm</span> i -g --registry<span>=</span>https://registry.npm.taobao.org cnpm\n<span>npm</span> i -g --registry<span>=</span>https://registry.npm.taobao.org commitizen\n<span>npm</span> i -g --registry<span>=</span>https://registry.npm.taobao.org create-egg\n<span>npm</span> i -g --registry<span>=</span>https://registry.npm.taobao.org create-next-app\n<span>npm</span> i -g --registry<span>=</span>https://registry.npm.taobao.org create-nuxt-app\n<span>npm</span> i -g --registry<span>=</span>https://registry.npm.taobao.org create-react-app\n<span>npm</span> i -g --registry<span>=</span>https://registry.npm.taobao.org expo-cli\n<span>npm</span> i -g --registry<span>=</span>https://registry.npm.taobao.org express-generator\n<span>npm</span> i -g --registry<span>=</span>https://registry.npm.taobao.org nativefier\n<span>npm</span> i -g --registry<span>=</span>https://registry.npm.taobao.org npm-check-updates\n<span>npm</span> i -g --registry<span>=</span>https://registry.npm.taobao.org <span>pnpm</span>\n<span>npm</span> i -g --registry<span>=</span>https://registry.npm.taobao.org react-devtools\n<span>npm</span> i -g --registry<span>=</span>https://registry.npm.taobao.org serve\n<span>npm</span> i -g --registry<span>=</span>https://registry.npm.taobao.org ts-node\n<span>npm</span> i -g --registry<span>=</span>https://registry.npm.taobao.org typescript\n<span>npm</span> i -g --registry<span>=</span>https://registry.npm.taobao.org <span>yarn</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br></div></div><ul>\n<li>\n<p>一些需要额外安装的应用。</p>\n<ul>\n<li><a href=\"https://browser.360.cn/ee/mac/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">360 极速浏览器</a> - 支持 flash</li>\n<li><a href=\"https://www.bitcomet.com/cn\" target=\"_blank\" rel=\"noopener noreferrer\">bitcomet</a></li>\n<li><a href=\"https://www.dcloud.io/hbuilderx.html\" target=\"_blank\" rel=\"noopener noreferrer\">hbuilderx</a> - uni-app 和 uni-cloud 开发工具</li>\n<li><a href=\"https://macwk.com/soft/macwk-updater\" target=\"_blank\" rel=\"noopener noreferrer\">macwk updater</a> - 检查更新，需要注意下正版问题</li>\n<li><a href=\"https://www.neatdownloadmanager.com/\" target=\"_blank\" rel=\"noopener noreferrer\">neat download manager</a></li>\n<li><a href=\"https://qspace.awehunt.com/zh-cn/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">qspace</a> - 多视图文件管理器，需付费</li>\n<li><a href=\"https://platform.wps.cn/\" target=\"_blank\" rel=\"noopener noreferrer\">wps</a> - brew 安装的是国际版，支持 doc/docx/xls/xlsx/ppt/pptx/pdf 等多种格式和思维导图，完全满足程序员日常需求</li>\n<li><a href=\"https://developer.apple.com/xcode/\" target=\"_blank\" rel=\"noopener noreferrer\">xcode</a> - 苹果应用开发</li>\n<li><a href=\"https://rainbowbyte.com/app/rainbowtoolbox.html\" target=\"_blank\" rel=\"noopener noreferrer\">彩虹工具箱</a> - 小工具箱</li>\n<li><a href=\"https://www.stellarplayer.com/\" target=\"_blank\" rel=\"noopener noreferrer\">恒星播放器</a> - 播放器</li>\n</ul>\n</li>\n<li>\n<p>补充一些东西在 <code>~/.zshrc</code> 末尾。</p>\n</li>\n</ul>\n<div><pre><code><span># nvm</span>\n<span>export</span> <span>NVM_DIR</span><span>=</span><span>\"<span>$HOME</span>/.nvm\"</span>\n<span># export NVM_NODEJS_ORG_MIRROR=http://npm.taobao.org/mirrors/node # use taobao mirror origin</span>\n<span>[</span> -s <span>\"<span>$NVM_DIR</span>/nvm.sh\"</span> <span>]</span> <span>&amp;&amp;</span> <span>\\</span>. <span>\"<span>$NVM_DIR</span>/nvm.sh\"</span>  <span># This loads nvm</span>\n<span>[</span> -s <span>\"<span>$NVM_DIR</span>/bash_completion\"</span> <span>]</span> <span>&amp;&amp;</span> <span>\\</span>. <span>\"<span>$NVM_DIR</span>/bash_completion\"</span>  <span># This loads nvm bash_completion</span>\n\n<span># android</span>\n<span>export</span> <span>ANDROID_HOME</span><span>=</span><span>$HOME</span>/Library/Android/sdk\n<span>export</span> <span><span>PATH</span></span><span>=</span><span>$PATH</span><span>:</span><span>$ANDROID_HOME</span>/emulator\n<span>export</span> <span><span>PATH</span></span><span>=</span><span>$PATH</span><span>:</span><span>$ANDROID_HOME</span>/tools\n<span>export</span> <span><span>PATH</span></span><span>=</span><span>$PATH</span><span>:</span><span>$ANDROID_HOME</span>/tools/bin\n<span>export</span> <span><span>PATH</span></span><span>=</span><span>$PATH</span><span>:</span><span>$ANDROID_HOME</span>/platform-tools\n\n<span># openjdk</span>\n<span>export</span> <span><span>PATH</span></span><span>=</span>/usr/local/opt/openjdk/bin:<span>$PATH</span>\n\n<span># homebrew</span>\n<span>export</span> <span><span>PATH</span></span><span>=</span>/usr/local/sbin:<span>$PATH</span>\n\n<span># v2ray</span>\n<span>export</span> <span>https_proxy</span><span>=</span>http://127.0.0.1:7890\n<span>export</span> <span>http_proxy</span><span>=</span>http://127.0.0.1:7890\n<span>export</span> <span>all_proxy</span><span>=</span>socks5://127.0.0.1:7890\n\n<span># qspace</span>\n<span>alias</span> <span>qs</span><span>=</span><span>'open -a QSpace'</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><ul>\n<li>\n<p>一些建议的在线网页。</p>\n<ul>\n<li><a href=\"https://www.deepl.com/translator\" target=\"_blank\" rel=\"noopener noreferrer\">DeepL</a> - 翻译</li>\n<li><a href=\"https://www.aliyundrive.com/\" target=\"_blank\" rel=\"noopener noreferrer\">阿里云盘</a></li>\n<li><a href=\"https://www.i4.cn/\" target=\"_blank\" rel=\"noopener noreferrer\">爱思助手</a> - ios 助手</li>\n<li><a href=\"https://www.ctfile.com/\" target=\"_blank\" rel=\"noopener noreferrer\">城通网盘</a></li>\n<li><a href=\"https://dida365.com/\" target=\"_blank\" rel=\"noopener noreferrer\">滴答清单</a> - 高效完成任务和规划时间</li>\n<li><a href=\"https://www.uupoop.com/\" target=\"_blank\" rel=\"noopener noreferrer\">稿定设计图片编辑器</a></li>\n<li><a href=\"https://www.pianku.li/\" target=\"_blank\" rel=\"noopener noreferrer\">片库</a></li>\n<li><a href=\"https://tool.lu/\" target=\"_blank\" rel=\"noopener noreferrer\">在线工具</a></li>\n<li><a href=\"https://tool.p2hp.com/\" target=\"_blank\" rel=\"noopener noreferrer\">程序员工具</a></li>\n</ul>\n</li>\n<li>\n<p>一些可以考虑的应用。</p>\n<ul>\n<li><a href=\"https://yasuo.360.cn/\" target=\"_blank\" rel=\"noopener noreferrer\">360zip</a></li>\n<li>Adobe After Effects - 专业视频处理</li>\n<li>Adobe Photoshop - 专业图片处理</li>\n<li>Affinity Photo - 专业图片处理</li>\n<li><a href=\"https://aixcoder.com/\" target=\"_blank\" rel=\"noopener noreferrer\">AIXcoder</a> - 代码自动补全工具</li>\n<li><a href=\"https://altstore.io/\" target=\"_blank\" rel=\"noopener noreferrer\">AltStore</a> - 直接安装 ipa</li>\n<li>Axure RP - 原型图</li>\n<li><a href=\"https://github.com/ripperhe/Bob\" target=\"_blank\" rel=\"noopener noreferrer\">Bob</a> - 翻译工具</li>\n<li><a href=\"https://www.cfos.de/zh-cn/cfosspeed/cfosspeed.htm\" target=\"_blank\" rel=\"noopener noreferrer\">cFosSpeed</a> - 网络加速工具，效果不是很明显</li>\n<li>Charles - 抓包</li>\n<li><a href=\"https://www.blackmagicdesign.com/products/davinciresolve/\" target=\"_blank\" rel=\"noopener noreferrer\">Davinci Resolve</a> - 专业视频处理</li>\n<li>Fiddler - 抓包</li>\n<li><a href=\"https://filezilla-project.org/\" target=\"_blank\" rel=\"noopener noreferrer\">FileZilla</a> - ftp 连接</li>\n<li><a href=\"https://www.mozilla.org/en-US/firefox/browsers/\" target=\"_blank\" rel=\"noopener noreferrer\">Firefox</a> - 浏览器</li>\n<li><a href=\"https://www.geogebra.org/\" target=\"_blank\" rel=\"noopener noreferrer\">GeoGebra</a> - 数学工具</li>\n<li><a href=\"https://www.google.cn/chrome/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">Google Chrome</a> - 浏览器</li>\n<li><a href=\"https://www.kite.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Kite</a> - 代码自动补全工具</li>\n<li><a href=\"https://github.com/alibaba/lightproxy#readme\" target=\"_blank\" rel=\"noopener noreferrer\">LightProxy</a> - 代理调试</li>\n<li>Sketch - 设计稿</li>\n<li><a href=\"https://rustdesk.com/zh/\" target=\"_blank\" rel=\"noopener noreferrer\">RustDesk</a> - 远程桌面</li>\n<li><a href=\"https://www.tabnine.com/\" target=\"_blank\" rel=\"noopener noreferrer\">TabNine</a> - 代码自动补全工具</li>\n<li><a href=\"https://www.teamviewer.cn/cn/products/teamviewer/\" target=\"_blank\" rel=\"noopener noreferrer\">TeamViewer</a> - 远程桌面</li>\n<li><a href=\"https://sunlogin.oray.com/\" target=\"_blank\" rel=\"noopener noreferrer\">向日葵</a> - 远程桌面</li>\n<li><a href=\"http://zyplayer.fun/\" target=\"_blank\" rel=\"noopener noreferrer\">zy-player</a> - 播放网络媒体</li>\n<li><a href=\"https://lv.ulikecam.com/\" target=\"_blank\" rel=\"noopener noreferrer\">剪映专业版</a> - 视频处理</li>\n<li><a href=\"https://kantu.qq.com/\" target=\"_blank\" rel=\"noopener noreferrer\">看图</a></li>\n<li><a href=\"http://mumu.163.com/\" target=\"_blank\" rel=\"noopener noreferrer\">网易 Mumu</a> - 安卓模拟器</li>\n<li><a href=\"https://imagetoolkit.potatofield.cn/\" target=\"_blank\" rel=\"noopener noreferrer\">洋芋田图像工具箱</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"windows-补充说明\"> Windows 补充说明</h2>\n<p>Windows 和 macOS 生态不同，有几个重要的地方需要注意。</p>\n<ul>\n<li>终端和 <code>shell</code>：Windows 上建议使用 <a href=\"https://www.microsoft.com/zh-cn/p/windows-terminal/9n0dx20hk701?activetab=pivot:overviewtab\" target=\"_blank\" rel=\"noopener noreferrer\">Windows Terminal</a> 作为终端，Git Bash 作为 <code>shell</code>，<a href=\"https://sspai.com/post/62167\" target=\"_blank\" rel=\"noopener noreferrer\">定制参考 1</a>，<a href=\"https://sspai.com/post/63814\" target=\"_blank\" rel=\"noopener noreferrer\">定制参考 2</a>。</li>\n<li>包管理器：macOS 上使用 Homebrew 作为包管理器，而 Windows 上推荐使用 <a href=\"https://chocolatey.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Chocolaty</a> 作为包管理器。</li>\n<li><code>nvm</code>：Windows 上需要使用 <a href=\"https://github.com/coreybutler/nvm-windows#readme\" target=\"_blank\" rel=\"noopener noreferrer\">nvm-windows</a> 管理 node 版本，而且命令上有一些区别。</li>\n<li>其它：上面的应用在 Windows 上不一定有或者有更好的选择，比如 iina 可以换成 <a href=\"http://potplayer.daum.net/?lang=zh_CN\" target=\"_blank\" rel=\"noopener noreferrer\">PotPlayer</a>，网易 Mumu 可以换成 <a href=\"https://www.ldmnq.com/\" target=\"_blank\" rel=\"noopener noreferrer\">雷电模拟器</a>，Tencent Lemon 可以换成 <a href=\"https://guanjia.qq.com/\" target=\"_blank\" rel=\"noopener noreferrer\">腾讯电脑管家</a>，<a href=\"http://www.wofficebox.com/\" target=\"_blank\" rel=\"noopener noreferrer\">万彩办公大师</a> 可以处理大量的文档等。</li>\n</ul>\n<h2 id=\"vscode\"> vscode</h2>\n<h3 id=\"插件\"> 插件</h3>\n<p>配置可以通过 Github 账号同步，你也可以使用 <a href=\"https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync\" target=\"_blank\" rel=\"noopener noreferrer\">Settings Sync</a>。</p>\n<ul>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=russell.any-rule\" target=\"_blank\" rel=\"noopener noreferrer\">any-rule</a> - 常用正则集合</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=akamud.vscode-theme-onedark\" target=\"_blank\" rel=\"noopener noreferrer\">Atom One Dark Theme</a> - 深色主题，安装并应用主题后建议重启一次</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=akamud.vscode-theme-onelight\" target=\"_blank\" rel=\"noopener noreferrer\">Atom One Light Theme</a> - 浅色主题</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag\" target=\"_blank\" rel=\"noopener noreferrer\">Auto Close Tag</a> - 自动闭合标签</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2\" target=\"_blank\" rel=\"noopener noreferrer\">Bracket Pair Colorizer 2</a> - 匹配括号颜色</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner\" target=\"_blank\" rel=\"noopener noreferrer\">Code Runner</a> - 运行代码，跑 ts 需要全局安装 ts-node</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker\" target=\"_blank\" rel=\"noopener noreferrer\">Code Spell Checker</a> - 检查拼写，减少写代码时潜在的错误</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=iceworks-team.iceworks-material-helper\" target=\"_blank\" rel=\"noopener noreferrer\">Component Helper</a> - 在 JSX 中更快更好地添加组件、编写组件属性、查找组件文档</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=mrmaoddxxaa.create-uniapp-view\" target=\"_blank\" rel=\"noopener noreferrer\">create-uniapp-view</a> - 快速创建 uni-app 视图与组件</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=pranaygp.vscode-css-peek\" target=\"_blank\" rel=\"noopener noreferrer\">CSS Peek</a> - 查找 html 文件中的 css id 和 class，并将其作为 css 的定义，可以跳转</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=iceworks-team.iceworks-doctor\" target=\"_blank\" rel=\"noopener noreferrer\">Doctor</a> - 安全和质量审核工具</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=mikestead.dotenv\" target=\"_blank\" rel=\"noopener noreferrer\">DotENV</a> - 支持 .env 文件</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets\" target=\"_blank\" rel=\"noopener noreferrer\">ES7 React/Redux/GraphQL/React-Native snippets</a> - 在 js/ts 中支持 es7 语法下的 react，redux，graphql 和 rn</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\" target=\"_blank\" rel=\"noopener noreferrer\">ESLint</a> - 支持 eslint</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph\" target=\"_blank\" rel=\"noopener noreferrer\">Git Graph</a> - 增强 git 功能</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory\" target=\"_blank\" rel=\"noopener noreferrer\">Git History</a> - 增强 git 功能</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens\" target=\"_blank\" rel=\"noopener noreferrer\">GitLens</a> - 增强 git 功能</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=vincaslt.highlight-matching-tag\" target=\"_blank\" rel=\"noopener noreferrer\">Highlight Matching Tag</a> - 高亮选中的标签及其匹配标签</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=kisstkondoros.vscode-gutter-preview\" target=\"_blank\" rel=\"noopener noreferrer\">Image preview</a> - 预览图片</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow\" target=\"_blank\" rel=\"noopener noreferrer\">indent-rainbow</a> - 缩进用彩虹色分级显示</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript (ES6) code snippets</a> - es6+ 语法的 js 代码段</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=sysoev.language-stylus\" target=\"_blank\" rel=\"noopener noreferrer\">language-stylus</a> - 支持 stylus</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=mrmlnc.vscode-less\" target=\"_blank\" rel=\"noopener noreferrer\">Less IntelliSense</a> - 支持 less</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare-pack\" target=\"_blank\" rel=\"noopener noreferrer\">Live Share Extension Pack</a> - 实时协作</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=Tyriar.lorem-ipsum\" target=\"_blank\" rel=\"noopener noreferrer\">Lorem ipsum</a> - 生成并插入乱数假文</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one\" target=\"_blank\" rel=\"noopener noreferrer\">Markdown All in One</a> - 增强 Markdown 功能，包括键盘快捷键，目录等</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced\" target=\"_blank\" rel=\"noopener noreferrer\">Markdown Preview Enhanced</a> - 增强 Markdown 预览</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint\" target=\"_blank\" rel=\"noopener noreferrer\">markdownlint</a> - 校验 Markdown 语法</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=cweijan.vscode-office\" target=\"_blank\" rel=\"noopener noreferrer\">Office Viewer</a> - 支持在 vscode 中直接查看大量格式</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=ryu1kn.partial-diff\" target=\"_blank\" rel=\"noopener noreferrer\">Partial Diff</a> - 比较文本</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\" target=\"_blank\" rel=\"noopener noreferrer\">Prettier - Code formatter</a> - 支持 prettier</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=WallabyJs.quokka-vscode\" target=\"_blank\" rel=\"noopener noreferrer\">Quokka.js</a> - 快速测试 js 和 ts</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=msjsdiag.vscode-react-native\" target=\"_blank\" rel=\"noopener noreferrer\">React Native Tools</a> - 针对 React Native 的调试和集成命令</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=iceworks-team.iceworks-refactor\" target=\"_blank\" rel=\"noopener noreferrer\">React Refactor</a> - 帮助重构代码</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=iceworks-team.iceworks-style-helper\" target=\"_blank\" rel=\"noopener noreferrer\">React Style Helper</a> - 在 JSX 中更快速地编写内联样式，并辅助开发 CSS、LESS、SASS 等样式文件</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=Syler.sass-indented\" target=\"_blank\" rel=\"noopener noreferrer\">Sass</a> - sass 工具，支持突出显示，自动完成和格式化</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=mrmlnc.vscode-scss\" target=\"_blank\" rel=\"noopener noreferrer\">SCSS IntelliSense</a> - 支持 scss 智能提示</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=stylelint.vscode-stylelint\" target=\"_blank\" rel=\"noopener noreferrer\">stylelint</a> - 支持 stylelint</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=jock.svg\" target=\"_blank\" rel=\"noopener noreferrer\">SVG</a> - SVG 编码，压缩，美化，预览多合一</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=iceworks-team.iceworks-time-master\" target=\"_blank\" rel=\"noopener noreferrer\">Time Master</a> - 通过自动跟踪编码活动从而度量编码效率</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree\" target=\"_blank\" rel=\"noopener noreferrer\">Todo Tree</a> - 高亮提示特定文本</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=shardulm94.trailing-spaces\" target=\"_blank\" rel=\"noopener noreferrer\">Trailing Spaces</a> - 处理尾部多余空格</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=ModyQyW.vscode-uni-helper\" target=\"_blank\" rel=\"noopener noreferrer\">uni-app-schemas</a> - 校验 uni-app pages.json 和 manifest.json 格式</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=ModyQyW.vscode-uni-app-snippets\" target=\"_blank\" rel=\"noopener noreferrer\">uni-app-snippets</a> - uni-app 基本能力的代码片段，包括组件和 API</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=ModyQyW.vscode-uni-cloud-snippets\" target=\"_blank\" rel=\"noopener noreferrer\">uni-cloud-snippets</a> - uni-cloud 基本能力的代码片段，包括组件和 API</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=ModyQyW.vscode-uni-ui-snippets\" target=\"_blank\" rel=\"noopener noreferrer\">uni-ui-snippets</a> - uni-ui 组件代码片段</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=octref.vetur\" target=\"_blank\" rel=\"noopener noreferrer\">Vetur</a> - vue 官方插件</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons\" target=\"_blank\" rel=\"noopener noreferrer\">vscode-icons</a> - 图标主题，也可以考虑 <a href=\"https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme\" target=\"_blank\" rel=\"noopener noreferrer\">Material Icon Theme</a>，<a href=\"https://marketplace.visualstudio.com/items?itemName=Equinusocio.vsc-material-theme-icons\" target=\"_blank\" rel=\"noopener noreferrer\">Material Theme Icons</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=voorjaar.windicss-intellisense\" target=\"_blank\" rel=\"noopener noreferrer\">WindiCSS IntelliSense</a> - 增强 WindiCSS 和 TailwindCSS 体验</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=dariofuzinato.vue-peek\" target=\"_blank\" rel=\"noopener noreferrer\">Vue Peek</a> - 允许对 vue 单文件组件 peek 和 goto definition</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml\" target=\"_blank\" rel=\"noopener noreferrer\">YAML</a> - 支持 yaml</li>\n</ul>\n<h3 id=\"settings-json\"> settings.json</h3>\n<div><pre><code><span>{</span>\n  <span>// 插件 Auto Close Tag 使用，指定插件在什么语言时激活</span>\n  <span>\"auto-close-tag.activationOnLanguage\"</span><span>:</span> <span>[</span>\n    <span>\"html\"</span><span>,</span>\n    <span>\"javascript\"</span><span>,</span>\n    <span>\"javascriptreact\"</span><span>,</span>\n    <span>\"typescript\"</span><span>,</span>\n    <span>\"typescriptreact\"</span><span>,</span>\n    <span>\"markdown\"</span><span>,</span>\n    <span>\"vue\"</span>\n  <span>]</span><span>,</span>\n  <span>// 插件 Code Spell Checker 使用，指定字典，使得编辑文件时减少额外的拼写错误负担</span>\n  <span>\"cSpell.userWords\"</span><span>:</span> <span>[</span><span>]</span><span>,</span>\n  <span>// 插件 Code Spell Checker 使用，指定要检查的文件</span>\n  <span>\"cSpell.enabledLanguageIds\"</span><span>:</span> <span>[</span>\n    <span>\"css\"</span><span>,</span>\n    <span>\"git-commit\"</span><span>,</span>\n    <span>\"graphql\"</span><span>,</span>\n    <span>\"html\"</span><span>,</span>\n    <span>\"javascript\"</span><span>,</span>\n    <span>\"javascriptreact\"</span><span>,</span>\n    <span>\"json\"</span><span>,</span>\n    <span>\"jsonc\"</span><span>,</span>\n    <span>\"less\"</span><span>,</span>\n    <span>\"markdown\"</span><span>,</span>\n    <span>\"plaintext\"</span><span>,</span>\n    <span>\"sass\"</span><span>,</span>\n    <span>\"scss\"</span><span>,</span>\n    <span>\"text\"</span><span>,</span>\n    <span>\"typescript\"</span><span>,</span>\n    <span>\"typescriptreact\"</span><span>,</span>\n    <span>\"vue\"</span><span>,</span>\n    <span>\"yaml\"</span><span>,</span>\n    <span>\"yml\"</span>\n  <span>]</span><span>,</span>\n  <span>// vscode 自带功能，指定是否校验 css，这里设置为否，配合插件 stylelint 使用</span>\n  <span>\"css.validate\"</span><span>:</span> <span>false</span><span>,</span>\n  <span>// vscode 自带功能，控制编辑区在保存文件时的行为，这里设置为 eslint 和 stylelint 自动修复</span>\n  <span>\"editor.codeActionsOnSave\"</span><span>:</span> <span>{</span>\n    <span>\"source.fixAll.eslint\"</span><span>:</span> <span>true</span><span>,</span>\n    <span>\"source.fixAll.markdownlint\"</span><span>:</span> <span>true</span><span>,</span>\n    <span>\"source.fixAll.stylelint\"</span><span>:</span> <span>true</span>\n  <span>}</span><span>,</span>\n  <span>// vscode 自带功能，控制编辑区默认使用的格式化工具，这里设置为 prettier，需要安装插件 prettier</span>\n  <span>\"editor.defaultFormatter\"</span><span>:</span> <span>\"esbenp.prettier-vscode\"</span><span>,</span>\n  <span>// vscode 自带功能，控制输入时是否自动弹出建议</span>\n  <span>\"editor.quickSuggestions\"</span><span>:</span> <span>{</span>\n    <span>\"strings\"</span><span>:</span> <span>true</span>\n  <span>}</span><span>,</span>\n  <span>// vscode 自带功能，控制是否渲染垂直标尺</span>\n  <span>\"editor.rulers\"</span><span>:</span> <span>[</span><span>{</span> <span>\"column\"</span><span>:</span> <span>80</span> <span>}</span><span>]</span><span>,</span>\n  <span>// vscode 自带功能，显示建议列表时如何预选建议，这里设置为预选第一条</span>\n  <span>\"editor.suggestSelection\"</span><span>:</span> <span>\"first\"</span><span>,</span>\n  <span>// vscode 自带功能，控制编辑区 1 个 tab 等于多少个空格，这里设置为 2 个</span>\n  <span>\"editor.tabSize\"</span><span>:</span> <span>2</span><span>,</span>\n  <span>// vscode 自带功能，控制编辑区行太长时是否自动换行，这里设置为是</span>\n  <span>\"editor.wordWrap\"</span><span>:</span> <span>\"on\"</span><span>,</span>\n  <span>// vscode 自带功能，emmet 辅助编写代码</span>\n  <span>\"emmet.includeLanguages\"</span><span>:</span> <span>{</span>\n    <span>\"json\"</span><span>:</span> <span>\"jsonc\"</span><span>,</span>\n    <span>\"vue-html\"</span><span>:</span> <span>\"html\"</span>\n  <span>}</span><span>,</span>\n  <span>// vscode 自带功能，设置文件换行，这里设置为 \\n 即 LF</span>\n  <span>\"files.eol\"</span><span>:</span> <span>\"\\n\"</span><span>,</span>\n  <span>// vscode 自带功能，指定特定后缀的文件的解析器，这里添加四种小程序，wepy，uni-app 的支持，另外把 json 文件视为 jsonc 文件</span>\n  <span>\"files.associations\"</span><span>:</span> <span>{</span>\n    <span>\"*.wxml\"</span><span>:</span> <span>\"html\"</span><span>,</span>\n    <span>\"*.wxs\"</span><span>:</span> <span>\"javascript\"</span><span>,</span>\n    <span>\"*.wxss\"</span><span>:</span> <span>\"css\"</span><span>,</span>\n    <span>\"*.axml\"</span><span>:</span> <span>\"html\"</span><span>,</span>\n    <span>\"*.sjs\"</span><span>:</span> <span>\"javascript\"</span><span>,</span>\n    <span>\"*.acss\"</span><span>:</span> <span>\"css\"</span><span>,</span>\n    <span>\"*.swan\"</span><span>:</span> <span>\"html\"</span><span>,</span>\n    <span>\"*.ttml\"</span><span>:</span> <span>\"html\"</span><span>,</span>\n    <span>\"*.ttss\"</span><span>:</span> <span>\"css\"</span><span>,</span>\n    <span>\"*.jxml\"</span><span>:</span> <span>\"html\"</span><span>,</span>\n    <span>\"*.jxss\"</span><span>:</span> <span>\"css\"</span><span>,</span>\n    <span>\"*.wpy\"</span><span>:</span> <span>\"vue\"</span><span>,</span>\n    <span>\"*.json\"</span><span>:</span> <span>\"jsonc\"</span><span>,</span>\n    <span>\"*.nvue\"</span><span>:</span> <span>\"vue\"</span><span>,</span>\n    <span>\"*.ux\"</span><span>:</span> <span>\"vue\"</span>\n  <span>}</span><span>,</span>\n  <span>// 插件 iceworks 相关</span>\n  <span>\"iceworks.materialSources\"</span><span>:</span> <span>[</span><span>]</span><span>,</span>\n  <span>\"iceworks.packageManager\"</span><span>:</span> <span>\"yarn\"</span><span>,</span>\n  <span>// vscode 自带功能，指定是否允许使用修饰器，这里设置为是</span>\n  <span>\"js/ts.implicitProjectConfig.experimentalDecorators\"</span><span>:</span> <span>true</span><span>,</span>\n  <span>// vscode 自带功能，指定 js 文件移动时是否自动更新引入，这里设置为是</span>\n  <span>\"javascript.updateImportsOnFileMove.enabled\"</span><span>:</span> <span>\"always\"</span><span>,</span>\n  <span>// vscode 自带功能，指定是否校验 less，这里设置为否</span>\n  <span>\"less.validate\"</span><span>:</span> <span>false</span><span>,</span>\n  <span>// vscode 自带功能，指定是否校验 scss，这里设置为否</span>\n  <span>\"scss.validate\"</span><span>:</span> <span>false</span><span>,</span>\n  <span>// 插件 Todo Tree 使用，指定是否开启高亮，这里设置为是</span>\n  <span>\"todo-tree.highlights.enabled\"</span><span>:</span> <span>true</span><span>,</span>\n  <span>// 插件 Todo Tree 使用，指定特定高亮格式</span>\n  <span>\"todo-tree.highlights.customHighlight\"</span><span>:</span> <span>{</span>\n    <span>\"FIX\"</span><span>:</span> <span>{</span>\n      <span>\"background\"</span><span>:</span> <span>\"#d32029\"</span><span>,</span>\n      <span>\"foreground\"</span><span>:</span> <span>\"#fff\"</span><span>,</span>\n      <span>\"icon\"</span><span>:</span> <span>\"bug\"</span><span>,</span>\n      <span>\"iconColour\"</span><span>:</span> <span>\"#d32029\"</span>\n    <span>}</span><span>,</span>\n    <span>\"PERF\"</span><span>:</span> <span>{</span>\n      <span>\"background\"</span><span>:</span> <span>\"#2b4acb\"</span><span>,</span>\n      <span>\"foreground\"</span><span>:</span> <span>\"#fff\"</span><span>,</span>\n      <span>\"icon\"</span><span>:</span> <span>\"flame\"</span><span>,</span>\n      <span>\"iconColour\"</span><span>:</span> <span>\"#2b4acb\"</span>\n    <span>}</span><span>,</span>\n    <span>\"TODO\"</span><span>:</span> <span>{</span>\n      <span>\"background\"</span><span>:</span> <span>\"#d89614\"</span><span>,</span>\n      <span>\"foreground\"</span><span>:</span> <span>\"#fff\"</span><span>,</span>\n      <span>\"icon\"</span><span>:</span> <span>\"alert\"</span><span>,</span>\n      <span>\"iconColour\"</span><span>:</span> <span>\"#d89614\"</span>\n    <span>}</span>\n  <span>}</span><span>,</span>\n  <span>// 插件 Todo Tree 使用，指定通用高亮格式</span>\n  <span>\"todo-tree.highlights.defaultHighlight\"</span><span>:</span> <span>{</span>\n    <span>\"gutterIcon\"</span><span>:</span> <span>true</span>\n  <span>}</span><span>,</span>\n  <span>// 插件 Todo Tree 使用，指定匹配的文本</span>\n  <span>\"todo-tree.general.tags\"</span><span>:</span> <span>[</span><span>\"FIX\"</span><span>,</span> <span>\"PERF\"</span><span>,</span> <span>\"TODO\"</span><span>,</span> <span>\"[ ]\"</span><span>,</span> <span>\"[x]\"</span><span>]</span><span>,</span>\n  <span>// 插件 Todo Tree 使用，指定匹配的正则表达式</span>\n  <span>\"todo-tree.regex.regex\"</span><span>:</span> <span>\"(//|#|&lt;!--|;|/\\\\*|^|^\\\\s*(-|\\\\d+.))\\\\s*($TAGS)\"</span><span>,</span>\n  <span>// vscode 自带功能，指定 ts 文件移动时是否自动更新引入，这里设置为是</span>\n  <span>\"typescript.updateImportsOnFileMove.enabled\"</span><span>:</span> <span>\"always\"</span><span>,</span>\n  <span>// 插件 Office Viewer 使用，指定 markdown 预览模式，这里指定为 vditor</span>\n  <span>\"vscode-office.markdownType\"</span><span>:</span> <span>\"vditor\"</span><span>,</span>\n  <span>// vscode 自带功能，指定颜色主题，这里指定为 Atom One Dark</span>\n  <span>\"workbench.colorTheme\"</span><span>:</span> <span>\"Atom One Dark\"</span><span>,</span>\n  <span>// vscode 自带功能，指定 md 文件的预览模式，这里指定为默认，抹除 Office Viewer 的影响</span>\n  <span>\"workbench.editorAssociations\"</span><span>:</span> <span>[</span>\n    <span>{</span>\n      <span>\"viewType\"</span><span>:</span> <span>\"default\"</span><span>,</span>\n      <span>\"filenamePattern\"</span><span>:</span> <span>\"*.md\"</span>\n    <span>}</span>\n  <span>]</span><span>,</span>\n  <span>// vscode 自带功能，指定图标主题，这里设置为 Material Icon Theme，需要安装对应的插件</span>\n  <span>\"workbench.iconTheme\"</span><span>:</span> <span>\"vscode-icons\"</span><span>,</span>\n  <span>// vscode 自带功能，指定对应文件的默认格式化工具，需要安装对应的插件</span>\n  <span>\"[vue]\"</span><span>:</span> <span>{</span>\n    <span>\"editor.defaultFormatter\"</span><span>:</span> <span>\"octref.vetur\"</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br><span>118</span><br><span>119</span><br><span>120</span><br><span>121</span><br><span>122</span><br><span>123</span><br><span>124</span><br><span>125</span><br><span>126</span><br><span>127</span><br><span>128</span><br><span>129</span><br><span>130</span><br><span>131</span><br><span>132</span><br><span>133</span><br><span>134</span><br><span>135</span><br><span>136</span><br><span>137</span><br><span>138</span><br><span>139</span><br><span>140</span><br><span>141</span><br><span>142</span><br><span>143</span><br><span>144</span><br></div></div><h2 id=\"hbuilderx\"> hbuilderx</h2>\n<p>构建使用 <code>uni-app</code> 开发的 app，用于调试运行、下载发布，其他情况使用 vscode。</p>\n<p>点击左上角 HBuilderX =&gt; 偏好设置 =&gt; 源码视图，可以自定义配置。下面是我自己的自定义配置。<code>node</code> 和 <code>npm</code> 路径不正确会导致一直编译中。</p>\n<div><pre><code><span>{</span>\n  <span>\"editor.colorScheme\"</span><span>:</span> <span>\"Atom One Dark\"</span><span>,</span>\n  <span>\"editor.fontSize\"</span><span>:</span> <span>14</span><span>,</span>\n  <span>\"editor.insertSpaces\"</span><span>:</span> <span>true</span><span>,</span>\n  <span>\"editor.tabSize\"</span><span>:</span> <span>2</span><span>,</span>\n  <span>\"editor.wordWrap\"</span><span>:</span> <span>true</span><span>,</span>\n  <span>\"eslint-js.validateOnDocumentChanged\"</span><span>:</span> <span>true</span><span>,</span>\n  <span>\"eslint-vue.validateOnDocumentChanged\"</span><span>:</span> <span>true</span><span>,</span>\n  <span>\"node.path\"</span><span>:</span> <span>\"/Users/wurui/.nvm/versions/node/v14.17.3/bin/node\"</span><span>,</span>\n  <span>\"npm.path\"</span><span>:</span> <span>\"/Users/wurui/.nvm/versions/node/v14.17.3/bin/npm\"</span>\n<span>}</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>看起来数字天堂团队并没有完善的项目开发流程，导致某些时候 vue-cli 创建的项目依赖版本和 HBuilderX 的依赖版本不一致。</p>\n<ul>\n<li>回退版本</li>\n<li>查看 HBuilderX -&gt; plugins -&gt; uniapp-cli 的依赖版本</li>\n</ul>\n<p>另外，他们也尝试做自己的生态，比如 <code>nvue</code> 和 <code>uni_modules</code>，这些都有着不少的坑。如果不是为了跨端，没有必要使用 <code>uni-app</code>。如果是为了跨端，也可以尝试优秀的 React 系框架，如 <code>taro</code>，<code>remax</code>，<code>rax</code>，<code>expo</code>。</p>\n<h2 id=\"参考\"> 参考</h2>\n<ul>\n<li><a href=\"https://github.com/Awesome-Windows/Awesome/blob/master/README-cn.md\" target=\"_blank\" rel=\"noopener noreferrer\">Awesome-Windows/Awesome</a></li>\n<li><a href=\"https://wangchujiang.com/awesome-mac/index.zh.html\" target=\"_blank\" rel=\"noopener noreferrer\">jaywcjlove/awesome-mac</a></li>\n<li><a href=\"https://github.com/sorrycc/awesome-tools\" target=\"_blank\" rel=\"noopener noreferrer\">sorrycc/awesome-tools</a></li>\n<li><a href=\"https://code.visualstudio.com/docs\" target=\"_blank\" rel=\"noopener noreferrer\">VSCode Documents</a></li>\n<li><a href=\"https://tool.kaopubear.top/\" target=\"_blank\" rel=\"noopener noreferrer\">生产力工具学习路径指南</a></li>\n</ul>\n",
      "date_published": "2021-07-05T05:18:00.000Z",
      "date_modified": "2021-07-15T07:42:28.000Z",
      "authors": [
        {
          "name": "ModyQyW <wurui7@mail3.sysu.edu.cn>"
        }
      ],
      "tags": []
    },
    {
      "title": "优化",
      "url": "https://modyqyw.top/optimization/",
      "id": "https://modyqyw.top/optimization/",
      "content_html": "<h1 id=\"优化\"> 优化</h1>\n<h2 id=\"说明\"> 说明</h2>\n<ul>\n<li>形式：尽量口语化的笔记和示例。</li>\n<li>适用：对 <code>vue</code> 和 <code>react</code> 底层，浏览器底层，js 引擎有基本了解，想要了解前端优化的开发者。</li>\n<li>目标：了解前端项目的可用优化，包括开发、编译和运行，这些优化一般需要手动处理，而不包含在各类 Linter 规则又或是官方文档说明里面。</li>\n<li>状态：目前处于完善中状态，可能会有遗漏、错误、不完美，但已经可以正常阅读。如果你发现了错误，请在评论里告诉我，谢谢。</li>\n</ul>\n<h2 id=\"处理条件分支-避免代码堆叠\"> 处理条件分支，避免代码堆叠</h2>\n<p>假定现在需要实现一个方法，接收的参数是数字，返回的参数是颜色值字符串。传入 13 的时候返回黑色，其他情况返回白色。</p>\n<div><pre><code><span>const</span> <span>getColorString</span> <span>=</span> <span>(</span><span>number</span><span>)</span> <span>=></span> <span>{</span>\n  <span>if</span> <span>(</span>number <span>===</span> <span>13</span><span>)</span> <span>{</span>\n    <span>return</span> <span>'#000'</span><span>;</span>\n  <span>}</span> <span>else</span> <span>{</span>\n    <span>return</span> <span>'#fff'</span><span>;</span>\n  <span>}</span>\n<span>}</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>假如现在需要传入 2 的时候返回 <code>#fafafa</code>，传入 3 的时候返回 <code>#f5f5f5</code>。你可能会继续扩展 <code>if ... else ...</code> 代码块，像下面这样。</p>\n<div><pre><code><span>const</span> <span>getColorString</span> <span>=</span> <span>(</span><span>number</span><span>)</span> <span>=></span> <span>{</span>\n  <span>if</span> <span>(</span>number <span>===</span> <span>2</span><span>)</span> <span>{</span>\n    <span>return</span> <span>'#fafafa'</span><span>;</span>\n  <span>}</span> <span>else</span> <span>if</span> <span>(</span>number <span>===</span> <span>3</span><span>)</span> <span>{</span>\n    <span>return</span> <span>'#f5f5f5'</span><span>;</span>\n  <span>}</span> <span>else</span> <span>if</span> <span>(</span>number <span>===</span> <span>13</span><span>)</span> <span>{</span>\n    <span>return</span> <span>'#000'</span><span>;</span>\n  <span>}</span> <span>else</span> <span>{</span>\n    <span>return</span> <span>'#fff'</span><span>;</span>\n  <span>}</span>\n<span>}</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>这也太没完没了了，长此以往将会有堆叠如山的 <code>if ... else ...</code> 块出现。我建议，当 <code>if ... else ...</code> 块达到 3 或以上的时候，就可以考虑使用 switch 了。</p>\n<div><pre><code><span>const</span> <span>getColorString</span> <span>=</span> <span>(</span><span>number</span><span>)</span> <span>=></span> <span>{</span>\n  <span>switch</span> <span>(</span>number<span>)</span> <span>{</span>\n    <span>case</span> <span>2</span><span>:</span> <span>return</span> <span>'#fafafa'</span><span>;</span>\n    <span>case</span> <span>3</span><span>:</span> <span>return</span> <span>'#f5f5f5'</span><span>;</span>\n    <span>case</span> <span>13</span><span>:</span> <span>return</span> <span>'#000'</span><span>;</span>\n    <span>default</span><span>:</span> <span>return</span> <span>'#fff'</span><span>;</span>\n  <span>}</span>\n<span>}</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>毫无疑问，继续添加 case 也会让 case 堆叠起来。在这个例子里，考虑使用 Array 来处理越来越多的 case 是一个更好的选择。</p>\n<div><pre><code><span>const</span> colors <span>=</span> <span>[</span>\n  <span>'#fff'</span><span>,</span>\n  <span>'#fafafa'</span><span>,</span>\n  <span>'#f5f5f5'</span><span>,</span>\n  <span>'#f0f0f0'</span><span>,</span>\n  <span>'#d9d9d9'</span><span>,</span>\n  <span>'#bfbfbf'</span><span>,</span>\n  <span>'#8c8c8c'</span><span>,</span>\n  <span>'#595959'</span><span>,</span>\n  <span>'#434343'</span><span>,</span>\n  <span>'#262626'</span><span>,</span>\n  <span>'#1f1f1f'</span><span>,</span>\n  <span>'#141414'</span><span>,</span>\n  <span>'#000'</span><span>,</span>\n<span>]</span><span>;</span>\n\n<span>const</span> <span>getColorString</span> <span>=</span> <span>(</span><span>number</span><span>)</span> <span>=></span> <span>{</span>\n  <span>return</span> colors<span>[</span>number<span>]</span> <span>||</span> colors<span>[</span><span>0</span><span>]</span><span>;</span>\n<span>}</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>如果说要传入字符串，那么使用 Object 是一个更好的选择。</p>\n<div><pre><code><span>const</span> colorObject <span>=</span> <span>{</span>\n  <span>'gray-1'</span><span>:</span> <span>'#fff'</span><span>,</span>\n  <span>'gray-2'</span><span>:</span> <span>'#fafafa'</span><span>,</span>\n  <span>'gray-3'</span><span>:</span> <span>'#f5f5f5'</span><span>,</span>\n  <span>'gray-4'</span><span>:</span> <span>'#f0f0f0'</span><span>,</span>\n  <span>'gray-5'</span><span>:</span> <span>'#d9d9d9'</span><span>,</span>\n  <span>'gray-6'</span><span>:</span> <span>'#bfbfbf'</span><span>,</span>\n  <span>'gray-7'</span><span>:</span> <span>'#8c8c8c'</span><span>,</span>\n  <span>'gray-8'</span><span>:</span> <span>'#595959'</span><span>,</span>\n  <span>'gray-9'</span><span>:</span> <span>'#434343'</span><span>,</span>\n  <span>'gray-10'</span><span>:</span> <span>'#262626'</span><span>,</span>\n  <span>'gray-11'</span><span>:</span> <span>'#1f1f1f'</span><span>,</span>\n  <span>'gray-12'</span><span>:</span> <span>'#141414'</span><span>,</span>\n  <span>'gray-13'</span><span>:</span> <span>'#000'</span><span>,</span>\n<span>}</span><span>;</span>\n\n<span>const</span> <span>getColorString</span> <span>=</span> <span>(</span><span>colorName</span><span>)</span> <span>=></span> <span>{</span>\n  <span>return</span> colorObject<span>[</span>colorName<span>]</span> <span>||</span> colorObject<span>[</span><span>'gray-1'</span><span>]</span><span>;</span>\n<span>}</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>如果你熟悉 Map，使用 Map 也完全没有问题。</p>\n<div><pre><code><span>const</span> colorMap <span>=</span> <span>new</span> <span>Map</span><span>(</span><span>[</span>\n  <span>[</span><span>'gray-1'</span><span>,</span> <span>'#fff'</span><span>]</span><span>,</span>\n  <span>[</span><span>'gray-2'</span><span>,</span> <span>'#fafafa'</span><span>]</span><span>,</span>\n  <span>[</span><span>'gray-3'</span><span>,</span> <span>'#f5f5f5'</span><span>]</span><span>,</span>\n  <span>[</span><span>'gray-4'</span><span>,</span> <span>'#f0f0f0'</span><span>]</span><span>,</span>\n  <span>[</span><span>'gray-5'</span><span>,</span> <span>'#d9d9d9'</span><span>]</span><span>,</span>\n  <span>[</span><span>'gray-6'</span><span>,</span> <span>'#bfbfbf'</span><span>]</span><span>,</span>\n  <span>[</span><span>'gray-7'</span><span>,</span> <span>'#8c8c8c'</span><span>]</span><span>,</span>\n  <span>[</span><span>'gray-8'</span><span>,</span> <span>'#595959'</span><span>]</span><span>,</span>\n  <span>[</span><span>'gray-9'</span><span>,</span> <span>'#434343'</span><span>]</span><span>,</span>\n  <span>[</span><span>'gray-10'</span><span>,</span> <span>'#262626'</span><span>]</span><span>,</span>\n  <span>[</span><span>'gray-11'</span><span>,</span> <span>'#1f1f1f'</span><span>]</span><span>,</span>\n  <span>[</span><span>'gray-12'</span><span>,</span> <span>'#141414'</span><span>]</span><span>,</span>\n  <span>[</span><span>'gray-13'</span><span>,</span> <span>'#000'</span><span>]</span><span>,</span>\n<span>]</span><span>)</span><span>;</span>\n\n<span>const</span> <span>getColorString</span> <span>=</span> <span>(</span><span>colorName</span><span>)</span> <span>=></span> <span>{</span>\n  <span>return</span> colorMap<span>.</span><span>get</span><span>(</span>colorName<span>)</span> <span>||</span> colorMap<span>.</span><span>get</span><span>(</span><span>'gray-1'</span><span>)</span><span>;</span>\n<span>}</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>这么做的好处就是分离了数据源和操作，避免了不必要的堆叠，在改动时更加方便明确。</p>\n<p>如果使用了 <code>vue</code> 全家桶，结合计算属性也能写出类似的代码。</p>\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span>&lt;!-- 一个传入颜色下标，显示对应颜色值的 vue 单文件组件 --></span>\n  <span><span><span>&lt;</span>span</span><span>></span></span>{{ color }}<span><span><span>&lt;/</span>span</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>import</span> <span>{</span> mapState <span>}</span> <span>from</span> <span>'vuex'</span><span>;</span>\n\n<span>export</span> <span>default</span> <span>{</span>\n  props<span>:</span> <span>{</span>\n    index<span>:</span> <span>{</span>\n      type<span>:</span> Number<span>,</span>\n      <span>default</span><span>:</span> <span>0</span><span>,</span>\n    <span>}</span><span>,</span>\n  <span>}</span><span>,</span>\n  computed<span>:</span> <span>{</span>\n    <span>// 读取数组 colors，数据源是 this.$store.state.colors</span>\n    <span>// 我们只需要拿到 colors 就可以了，无需关心数据源内部如何运作</span>\n    <span>...</span><span>mapState</span><span>(</span><span>{</span>\n      <span>colors</span><span>:</span> <span>state</span> <span>=></span> state<span>.</span>colors<span>,</span>\n    <span>}</span><span>)</span><span>,</span>\n    <span>// 设置需要显示的颜色值，默认为 #fff</span>\n    <span>color</span><span>(</span><span>)</span> <span>{</span>\n      <span>return</span> <span>this</span><span>.</span>colors<span>[</span>index<span>]</span> <span>||</span> <span>'#fff'</span>\n    <span>}</span>\n  <span>}</span><span>,</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><h2 id=\"使用事件委托减少事件绑定\"> 使用事件委托减少事件绑定</h2>\n<p>假如你有下面这么一段核心的 html 代码，需要监听所有 <code>li</code> 元素的点击事件。</p>\n<div><pre><code><span><span><span>&lt;</span>ul</span><span>></span></span>\n  <span><span><span>&lt;</span>li</span><span>></span></span>a<span><span><span>&lt;/</span>li</span><span>></span></span>\n  <span><span><span>&lt;</span>li</span><span>></span></span>b<span><span><span>&lt;/</span>li</span><span>></span></span>\n  <span><span><span>&lt;</span>li</span><span>></span></span>c<span><span><span>&lt;/</span>li</span><span>></span></span>\n<span><span><span>&lt;/</span>ul</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>很自然地会出现一种想法，那就是直接监听每个 <code>li</code> 标签的点击事件。</p>\n<img :src=\"$withBase('/images/optimization/event-delegation-1.svg')\" alt=\"事件委托 1\">\n<div><pre><code><span>// 如果你不了解 document.querySelectorAll</span>\n<span>// 或许你需要再去学习一下 js 基础</span>\ndocument<span>.</span><span>querySelectorAll</span><span>(</span><span>'li'</span><span>)</span><span>.</span><span>forEach</span><span>(</span><span>(</span><span>element</span><span>)</span> <span>=></span> <span>{</span>\n  element<span>.</span><span>onclick</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>innerHTML<span>)</span><span>;</span>\n  <span>}</span><span>;</span>\n<span>}</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>这种想法虽然直观，但性能比较差，因为它添加了 3 个监听事件。</p>\n<p>如果只监听 <code>li</code> 的父元素 <code>ul</code> 并根据 <code>event</code> 来判断，我们就省去了 2 个监听事件，消耗的浏览器资源也更少。</p>\n<img :src=\"$withBase('/images/optimization/event-delegation-2.svg')\" alt=\"事件委托 2\">\n<div><pre><code>document<span>.</span><span>querySelector</span><span>(</span><span>'ul'</span><span>)</span><span>.</span><span>onclick</span> <span>=</span> <span>(</span><span><span>{</span> target <span>}</span></span><span>)</span> <span>=></span> <span>{</span>\n  <span>if</span> <span>(</span>target<span>.</span>nodeName<span>.</span><span>toLowerCase</span><span>(</span><span>)</span> <span>===</span> <span>'li'</span><span>)</span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span>target<span>.</span>innerHTML<span>)</span>\n  <span>}</span>\n<span>}</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>如果要为大量元素都绑定一个事件，不如在它们共同的父元素上绑定一个事件以做处理，这就是事件委托。它能有效地减少绑定的事件，减少浏览器使用的内存。</p>\n<h2 id=\"留意局部性-避免性能劣化\"> 留意局部性，避免性能劣化</h2>\n<p>局部性原理 Locality 是操作系统里面的一个概念，指 CPU 访问存储器时访问的存储单元都趋于聚集在一个较小的连续区域内，这有利于提高访问速度。如果你不了解操作系统的概念，大可以直接跳到这部分的结尾看我给出的建议。</p>\n<p>由于 js 都运行在 js 引擎上，也就是专门处理 js 引擎的虚拟机上，虚拟机也类似于一个小型操作系统，所以局部性原理也可以迁移到 js 上。</p>\n<p>局部性有三种。</p>\n<ul>\n<li>时间局部性 - 被访问一次的内存位置在短期内很可能被再次访问。</li>\n<li>空间局部性 - 未来访问的内存位置很可能和当前访问的内存位置相邻。</li>\n<li>顺序局部性 - 大部分指令是顺序进行的。</li>\n</ul>\n<p>因为时间局部性和顺序局部性和引擎相关性较大，我们难以施加影响，所以我们重点关注一下空间局部性。</p>\n<p>不妨先考虑遍历一个较大的二维数组。</p>\n<div><pre><code><span>// 构造一个数组</span>\n<span>const</span> array <span>=</span> <span>[</span><span>]</span><span>;</span>\n<span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>10000</span><span>;</span> i <span>+=</span> <span>1</span><span>)</span> <span>{</span>\n  <span>const</span> element <span>=</span> <span>[</span><span>]</span><span>;</span>\n  <span>for</span> <span>(</span><span>let</span> j <span>=</span> <span>0</span><span>;</span> j <span>&lt;</span> <span>10000</span><span>;</span> j <span>+=</span> <span>1</span><span>)</span> <span>{</span>\n    element<span>.</span><span>push</span><span>(</span>j<span>)</span><span>;</span>\n  <span>}</span>\n  array<span>.</span><span>push</span><span>(</span>element<span>)</span><span>;</span>\n<span>}</span>\n\n<span>let</span> sum<span>;</span>\n<span>let</span> timestamp<span>;</span>\n\n<span>// 遍历方法 1</span>\ntimestamp <span>=</span> <span>new</span> <span>Date</span><span>(</span><span>)</span><span>;</span>\nsum <span>=</span> <span>0</span><span>;</span>\n<span>for</span> <span>(</span><span>let</span> row <span>=</span> <span>0</span><span>;</span> row <span>&lt;</span> <span>10000</span><span>;</span> row <span>+=</span> <span>1</span><span>)</span> <span>{</span>\n  <span>for</span> <span>(</span><span>let</span> col <span>=</span> <span>0</span><span>;</span> col <span>&lt;</span> <span>10000</span><span>;</span> col <span>+=</span> <span>1</span><span>)</span> <span>{</span>\n    sum <span>+=</span> array<span>[</span>row<span>]</span><span>[</span>col<span>]</span><span>;</span>\n  <span>}</span>\n<span>}</span>\nconsole<span>.</span><span>log</span><span>(</span><span>new</span> <span>Date</span><span>(</span><span>)</span> <span>-</span> timestamp<span>)</span><span>;</span>\n\n<span>// 遍历方法 2</span>\ntimestamp <span>=</span> <span>new</span> <span>Date</span><span>(</span><span>)</span><span>;</span>\nsum <span>=</span> <span>0</span><span>;</span>\n<span>for</span> <span>(</span><span>let</span> col <span>=</span> <span>0</span><span>;</span> col <span>&lt;</span> <span>10000</span><span>;</span> col <span>+=</span> <span>1</span><span>)</span> <span>{</span>\n  <span>for</span> <span>(</span><span>let</span> row <span>=</span> <span>0</span><span>;</span> row <span>&lt;</span> <span>10000</span><span>;</span> row <span>+=</span> <span>1</span><span>)</span> <span>{</span>\n    sum <span>+=</span> array<span>[</span>row<span>]</span><span>[</span>col<span>]</span><span>;</span>\n  <span>}</span>\n<span>}</span>\nconsole<span>.</span><span>log</span><span>(</span><span>new</span> <span>Date</span><span>(</span><span>)</span> <span>-</span> timestamp<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div><p>我们的重点不在 <code>sum</code> 的结果，而在两种方法的耗时。</p>\n<p>测试环境如下。</p>\n<table>\n  <tr>\n    <td>机型</td>\n    <td>MacBook Pro (15-inch, 2018)</td>\n  </tr>\n  <tr>\n    <td>系统</td>\n    <td>macOS Big Sur 11.2</td>\n  </tr>\n  <tr>\n    <td>处理器</td>\n    <td>2.6 GHz 六核Intel Core i7</td>\n  </tr>\n  <tr>\n    <td>内存</td>\n    <td>16 GB 2400 MHz DDR4</td>\n  </tr>\n  <tr>\n    <td>浏览器</td>\n    <td>Microsoft Edge 88.0.705.68</td>\n  </tr>\n</table>\n<p>遍历方法 1 的耗时在 0.98 秒左右波动，而遍历方法 2 的耗时在 3.85 秒左右波动，遍历方法 2 使用的时间几乎是遍历方法 1 的 4 倍。</p>\n<p>这和 js 引擎怎么处理数组这种引用类型有关。一般来说，js 引擎会把数组按行顺序存放在内存里，所以先访问同一行的数据（先访问 <code>array[0][0]</code> 再访问 <code>array[0][1]</code>）要比先访问同一列的数据（先访问 <code>array[0][0]</code> 再访问 <code>array[1][0]</code>）要快，在列数较多的情况下速度差距表现尤其明显。</p>\n<p>一个建议是，按照访问顺序来访问 Array 和 Object。</p>\n<p>访问 Array 可以使用 <code>Array.prototype.forEach</code> 或 <code>Array.prototype.entries</code>，也可以直接使用 <code>for</code> 和 <code>while</code> 遍历。</p>\n<div><pre><code>array<span>.</span><span>forEach</span><span>(</span><span>(</span><span>element<span>,</span> index</span><span>)</span> <span>=></span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span>element<span>,</span> index<span>)</span><span>;</span>\n<span>}</span><span>)</span><span>;</span>\n\n<span>for</span> <span>(</span><span>const</span> <span>[</span>index<span>,</span> element<span>]</span> <span>of</span> array<span>.</span><span>entries</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span>element<span>,</span> index<span>)</span><span>;</span>\n<span>}</span>\n\n<span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>,</span> length <span>=</span> array<span>.</span>length<span>;</span> i <span>&lt;</span> length<span>;</span> i <span>+=</span> <span>1</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span>array<span>[</span>i<span>]</span><span>,</span> i<span>)</span><span>;</span>\n<span>}</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>而对象的访问顺序可以使用 <code>Object.keys</code> 获取，也可以使用 <code>Object.entries</code>。</p>\n<div><pre><code><span>const</span> keys <span>=</span> Object<span>.</span><span>keys</span><span>(</span>object<span>)</span><span>;</span>\nkeys<span>.</span><span>forEach</span><span>(</span><span>(</span><span>key</span><span>)</span> <span>=></span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span>key<span>,</span> object<span>[</span>key<span>]</span><span>)</span><span>;</span>\n<span>}</span><span>)</span><span>;</span>\n<span>for</span> <span>(</span><span>const</span> <span>[</span><span>,</span> key<span>]</span> <span>of</span> keys<span>.</span><span>entries</span><span>(</span><span>)</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span>key<span>,</span> object<span>[</span>key<span>]</span><span>)</span><span>;</span>\n<span>}</span>\n<span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>,</span> length <span>=</span> keys<span>.</span>length<span>;</span> i <span>&lt;</span> length<span>;</span> i <span>+=</span> <span>1</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span>keys<span>[</span>i<span>]</span><span>,</span> object<span>[</span>keys<span>[</span>i<span>]</span><span>]</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>for</span> <span>(</span><span>const</span> <span>[</span>key<span>,</span> value<span>]</span> <span>of</span> Object<span>.</span><span>entries</span><span>(</span>object<span>)</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span>key<span>,</span> value<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h2 id=\"克制地操作-dom-减少重新渲染\"> 克制地操作 DOM，减少重新渲染</h2>\n<p>浏览器使用 HTML Parser（HTML 解析器）解析 HTML 文件，得到 DOM Tree（DOM 树，DOM 即 Document Object Model，文档对象模型）。</p>\n<p>对于 CSS 文件，浏览器使用 CSS Parser（CSS 解析器）解析，得到 Style Rules（也可以叫 CSSOM，CSS Object Model，层叠样式表对象模型）。</p>\n<p>之后，浏览器会结合 DOM Tree 和 Style Rules，生成 Render Tree（渲染树），它包含了所有节点的样式信息。</p>\n<p>浏览器生成布局 layout，再将布局绘制 paint，显示给用户查看。而生成布局和绘制这两步合称为渲染 render，耗时相当多。</p>\n<p>下面的图示囊括了以上的步骤。</p>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015091502.png\" alt=\"浏览器工作原理\" /></p>\n<p><a href=\"https://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html\" target=\"_blank\" rel=\"noopener noreferrer\">图源</a></p>\n<p>渲染至少会进行一次，也就是打开网站的那一次。之后，如果进行了特定的操作，就会导致重新渲染 rerender，也就导致了重新生成布局（简称重排 reflow）和重新绘制（简称重绘 repaint）。</p>\n<p>需要明确的是，重绘不一定导致重排，但重排一定导致重绘。</p>\n<p>比如改变文字颜色，只会导致重绘，而改变文字位置就会导致重排和重绘。重排和重绘不能避免，但可以减少，只要减少重排和重绘，就能有效地提高网页性能。</p>\n<p>一个简单有效的建议就是，对 DOM 的读操作和写操作应尽量分开，读操作放在一起，写操作另外放在一起。这样能让浏览器把变动集中在一起统一处理，避免触发多次重排和重绘。</p>\n<div><pre><code><span>// bad</span>\ndiv<span>.</span>style<span>.</span>color <span>=</span> <span>'blue'</span><span>;</span>\n<span>const</span> marginTop <span>=</span> <span>parseInt</span><span>(</span>div<span>.</span>style<span>.</span>marginTop<span>)</span><span>;</span> <span>// 浏览器被迫重新渲染</span>\ndiv<span>.</span>style<span>.</span>marginTop <span>=</span> <span>(</span>margin <span>+</span> <span>10</span><span>)</span> <span>+</span> <span>'px'</span><span>;</span>\n\n<span>// good</span>\n<span>const</span> offsetTop  <span>=</span> div<span>.</span>offsetTop<span>;</span>\ndiv<span>.</span>style<span>.</span>top <span>=</span> top <span>+</span> <span>10</span> <span>+</span> <span>\"px\"</span><span>;</span>\ndiv<span>.</span>style<span>.</span>color <span>=</span> <span>'blue'</span><span>;</span> <span>// 浏览器统一处理</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>一般地，如果写操作后读取元素的位置相关信息，就会导致立即重新渲染。下面列写了读取元素的位置相关信息的属性或方法，我们应该尽量避免这种导致立即重新渲染的操作。</p>\n<table>\n  <tr>\n    <td><code>Element.offset{Top|Right|Bottom|Left}</code></td>\n    <td><code>Element.scroll{Top|Right|Bottom|Left}</code></td>\n  </tr>\n  <tr>\n    <td><code>Element.client{Top|Right|Bottom|Left}</code></td>\n    <td><code>window.getComputedStyle</code></td>\n  </tr>\n</table>\n<p>另一个行之有效的建议就是，尽量避免过多地直接操作非 <code>display: none</code> 的处于正常文档流的 DOM 元素。这个建议需要拆分成三个部分来阐述。</p>\n<p>首先是“直接操作”。直接操作可能会导致额外的重新渲染。你可以操作 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment\" target=\"_blank\" rel=\"noopener noreferrer\">DocumentFragment</a>，操作完成后加入到 DOM 内；又或者克隆节点 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/cloneNode\" target=\"_blank\" rel=\"noopener noreferrer\">Node.cloneNode</a> 然后操作，最后用新节点替换原节点。</p>\n<p>第二个部分是“非 <code>display: none</code> 的元素”。<code>display: none</code> 的元素不会影响重新渲染，所以可以给一个需要多次操作的节点设置 <code>display: none</code>，操作完之后再让它正常显示，这样就可以只需要 2 次重新渲染。另外，<code>visibility: hidden</code> 的元素只影响重绘，不影响重排，这也是一个可利用的点。</p>\n<p>最后一个部分是“处于正常文档流的元素”。<code>position: absolute</code> 和 <code>position: fixed</code> 的元素就是脱离了正常文档流的元素，即便改变了它们，重排的开销也比较小，因为无需考虑该元素对其它元素的影响。</p>\n<p>现在 <code>vue</code> 和 <code>react</code> 内部都使用了 Virtual DOM，一般而言你无需操心 DOM 是如何读写的。但一旦脱离框架想要在原生上做更深入的优化，那就不得不提到手动调节重新渲染这个方法。</p>\n<p>某些时候无法避免密集的重新渲染，比如网页动画。网页动画的每一帧 frame 都是一次重新渲染，只有帧率达到 25 或以上，人眼才会感觉到比较流畅。</p>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015091509.jpg\" alt=\"帧率示意图\" /></p>\n<p><a href=\"https://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html\" target=\"_blank\" rel=\"noopener noreferrer\">图源</a></p>\n<p>大多数显示器的刷新频率是 60Hz（1 秒刷新 60 次），所以网页动画达到 60Hz（1 秒 60 次重新渲染，每次重新渲染的时间不能超过 16.66 毫秒）就会和大多数显示器同步刷新，达到良好的视觉效果。由于浏览器计算重排、执行重绘也需要时间，所以留给我们的操作时间不足 16.66 毫秒。</p>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015091511.png\" alt=\"重新渲染示意图\" /></p>\n<p><a href=\"https://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html\" target=\"_blank\" rel=\"noopener noreferrer\">图源</a></p>\n<p>一个解决方法是使用 web worker，跟 UI 渲染不相关的任务（比如处理数据）都放在 worker 线程，这样就不会干扰到主线程渲染 UI 了。限制就是，worker 内不能直接操作 DOM 节点，也不能使用 window 对象的默认方法和属性。</p>\n<p>另一个解决办法就是使用 <code>window.requestAnimationFrame</code>，它可以把一些代码放到下一次重新渲染时执行，类似的 API 还有 <code>window.requestIdleCallback</code>。</p>\n<p>由于我接触这方面相对较少，这里就不展开了。如果你感兴趣，不妨去查阅一下 API 说明，以及 react 团队为 concurrent mode 做出的工作。</p>\n<h2 id=\"鼓励更新-减少不必要兼容\"> 鼓励更新，减少不必要兼容</h2>\n<p>前端已经发展了多年，已经有相当多的新特性新语法加入到浏览器的支持中。遗憾的是，为了兼容低版本的浏览器，比如 IE（大部分政企和高校计算机仍在使用），低版本 Android 和低版本 iOS，不得不加入各种 polyfill，甚至只能使用旧做法来做兼容。</p>\n<p>拿 <a href=\"https://caniuse.com\" target=\"_blank\" rel=\"noopener noreferrer\">caniuse</a> 上面的 flexbox 来举例。</p>\n<img :src=\"$withBase('/images/optimization/caniuse-flexbox.png')\" alt=\"caniuse-flexbox\">\n<p>可以看到，IE 全系列，Android 4.4 和 iOS 9 之前的版本对 flexbox 支持度不佳。如果我们需要适配这些版本，就需要加入 polyfill，甚至不能使用 flexbox（IE 6-9）。</p>\n<p>为了兼容而加入的 polyfill 浪费了服务器的空间，也浪费了访问用户的流量和时间（如果下载速度比较慢的话）。如果要兼容更古老的浏览器，还会浪费了开发人员过多的时间、精力。</p>\n<p>鼓励用户放弃旧版本的浏览器不仅是帮助开发人员，也是在帮助访问用户。如果有意放弃低版本浏览器和手机系统，不妨学习一下 YouTube 是怎么劝说用户放弃 IE 6 的。</p>\n<p>迫于现实压力，在低版本浏览器彻底退出历史舞台之前，我们仍然需要做兼容，但这不阻碍我们来看一下放弃兼容之后可行的做法，某些做法甚至已经投入到实践当中了。</p>\n<ul>\n<li>图片使用 WebP/SVG/HEIF/AVIF 替代 BMP/JPG/PNG 等。</li>\n<li>图标使用 SVG 或图标字体替代 PNG。</li>\n<li>使用浏览器原生支持的 html 新标签，css 新特性（比如 flexbox/grid，可以替代 float），js 新语法和新特性（比如箭头函数，Map 和 Set）。</li>\n<li>...</li>\n</ul>\n<h2 id=\"确定标签的位置-避免解析阻塞\"> 确定标签的位置，避免解析阻塞</h2>\n<p>下面是一个使用了 bootstrap 3 的 html 文件基本结构。</p>\n<div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>\n<span><span><span>&lt;</span>html</span> <span>lang</span><span><span>=</span><span>\"</span>en<span>\"</span></span><span>></span></span>\n  <span><span><span>&lt;</span>head</span><span>></span></span>\n    <span><span><span>&lt;</span>meta</span> <span>charset</span><span><span>=</span><span>\"</span>UTF-8<span>\"</span></span> <span>/></span></span>\n    <span><span><span>&lt;</span>meta</span> <span>http-equiv</span><span><span>=</span><span>\"</span>X-UA-Compatible<span>\"</span></span> <span>content</span><span><span>=</span><span>\"</span>IE=edge<span>\"</span></span> <span>/></span></span>\n    <span><span><span>&lt;</span>meta</span> <span>name</span><span><span>=</span><span>\"</span>viewport<span>\"</span></span> <span>content</span><span><span>=</span><span>\"</span>width=device-width, initial-scale=1.0<span>\"</span></span> <span>/></span></span>\n    <span><span><span>&lt;</span>title</span><span>></span></span>Document<span><span><span>&lt;/</span>title</span><span>></span></span>\n    <span><span><span>&lt;</span>link</span>\n      <span>rel</span><span><span>=</span><span>\"</span>stylesheet<span>\"</span></span>\n      <span>href</span><span><span>=</span><span>\"</span>https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css<span>\"</span></span>\n      <span>integrity</span><span><span>=</span><span>\"</span>sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu<span>\"</span></span>\n      <span>crossorigin</span><span><span>=</span><span>\"</span>anonymous<span>\"</span></span>\n    <span>/></span></span>\n    <span><span><span>&lt;</span>link</span>\n      <span>rel</span><span><span>=</span><span>\"</span>stylesheet<span>\"</span></span>\n      <span>href</span><span><span>=</span><span>\"</span>https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap-theme.min.css<span>\"</span></span>\n      <span>integrity</span><span><span>=</span><span>\"</span>sha384-6pzBo3FDv/PJ8r2KRkGHifhEocL+1X2rVCTTkUfGk7/0pbek5mMa1upzvWbrUbOZ<span>\"</span></span>\n      <span>crossorigin</span><span><span>=</span><span>\"</span>anonymous<span>\"</span></span>\n    <span>/></span></span>\n  <span><span><span>&lt;/</span>head</span><span>></span></span>\n  <span><span><span>&lt;</span>body</span><span>></span></span>\n    ...\n    <span><span><span>&lt;</span>script</span>\n      <span>src</span><span><span>=</span><span>\"</span>https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js<span>\"</span></span>\n      <span>integrity</span><span><span>=</span><span>\"</span>sha384-aJ21OjlMXNL5UyIl/XNwTMqvzeRMZH2w8c5cRVpzpU8Y5bApTppSuUkhZXN0VxHd<span>\"</span></span>\n      <span>crossorigin</span><span><span>=</span><span>\"</span>anonymous<span>\"</span></span>\n    <span>></span></span><span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n  <span><span><span>&lt;/</span>body</span><span>></span></span>\n<span><span><span>&lt;/</span>html</span><span>></span></span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><p>可以看到，加载外链样式文件的标签放在了 html 文件头部，而加载外链脚本文件的标签放在了 html 文件尾部。这也是最常见的做法。</p>\n<p>首先需要明确一点，html 文件的解析是从上到下的。</p>\n<p>加载外链样式文件的标签放的位置，其实不影响 html 的解析，因为 css 的解析和 html 的解析会同步进行，但放的位置会影响渲染。</p>\n<p>如果把加载外链样式文件的标签放在 html 文件的尾部，浏览器就需要额外的时间解析样式文件。同时，浏览器会先渲染出一个没有外链样式的页面（会有行内样式），样式解析、加载完之后再重新渲染，这会耗费额外的时间，页面本身会闪烁，用户体验相当不好。</p>\n<p>而当浏览器解析到加载外链脚本文件的标签时，浏览器会立即下载执行，html 的解析就此暂停。如果下载执行的耗时过长，网页就会长时间没有响应，导致假死现象。</p>\n<p>所以，把加载外链样式文件的标签放在 html 文件头部，把加载外链脚本文件的标签放在 html 文件尾部，就成了最常见的做法。</p>\n<p>如果外链脚本文件内部没有操作 DOM，可以使用 <code>async</code> 或 <code>defer</code> 属性将它设置成异步加载。使用 <code>async</code> 属性的外链脚本文件一旦加载完成就会立即执行，而使用 <code>defer</code> 属性的会在 <code>DOMContentLoaded</code> 事件之前（也就是页面 DOM 加载完成时）执行。</p>\n<p>还需要注意的一点是，既然是异步加载，就无法确定哪个外链脚本文件的内容会被优先执行，这取决于下载完成的顺序。</p>\n<h2 id=\"合理构建-减少请求的时间\"> 合理构建，减少请求的时间</h2>\n<p>每一次请求资源都需要耗费一些时间。下面是我用 Microsoft Edge 88.0.705.6 打开百度的网络统计。</p>\n<img :src=\"$withBase('/images/optimization/edge-devtools-network.png')\" alt=\"edge-devtools-network\">\n<p>可以看到在禁止缓存的情况下，百度首页有 63 个请求，一共用了 7.63 秒才完成，<code>DOMContentLoaded</code> 只使用了 1.29 秒，速度已经相当不错了。</p>\n<p>点入计时，我们可以看到某一个请求的具体耗时信息。</p>\n<img :src=\"$withBase('/images/optimization/edge-devtools-network-timing-1.png')\" alt=\"edge-devtools-network-timing-1\">\n<ul>\n<li>Queueing 表示在请求队列中等待的时间。</li>\n<li>Stalled 表示从连接建立完成到真正可以传输数据之间的时间差，包含了代理协商时间。</li>\n<li>Initial Connection（或 Connecting）表示建立连接所花费的时间，包括 TCP 握手，重试，协商 SSL 等耗时。</li>\n<li>SSL 表示完成 SSL 握手所耗费的时间。</li>\n<li>Request sent 表示发出网络请求所花费的时间。</li>\n<li>Waiting(TFFB) 表示等待发出页面请求到接收到应答数据第一个字节的时间。</li>\n<li>Content Download 表示接收响应数据所花费的时间。</li>\n</ul>\n<p>此外，还有两个可能出现的说明。</p>\n<ul>\n<li>Proxy negotiation 表示与代理服务器连接进行协商所花费的时间。</li>\n<li>DNS Lookup 表示执行 DNS 查找所花费的时间。</li>\n</ul>\n<p>可以看到，这个请求里面请求和响应的时间是最长的，第二长的是连接相关的时间。但并非总是这样。</p>\n<p>下面是一个图片的请求。可以看到这一次，花费在连接上的时间更长，请求和响应的时间较短。</p>\n<img :src=\"$withBase('/images/optimization/edge-devtools-network-timing-2.png')\" alt=\"edge-devtools-network-timing-1\">\n<p>也因此，我们的构建配置要尽可能地优化这两点。</p>\n<p>一般资源都需要花费一部分时间在连接上。如果我们能合理地合并资源，减少请求的次数，就能实现有效优化。</p>\n<p>针对图片，以前会使用多张整合成一张的雪碧图，而现在一般会使用 <code>url-loader</code> 和 <code>file-loader</code> 把较小的图片内联到代码内，它们对其它的资产文件也一样有效。</p>\n<p>针对脚本文件，现在会使用 <code>webpack.optimization.splitChunks</code> 来划分，让用户先获取必要的资源来正常显示首页。</p>\n<p>除了合并资源外，压缩资源体积也是很好的解决的方法。分别使用 <code>html-webpack-plugin</code>，<code>cssnano</code> 和 <code>terser-webpack-plugin</code> 处理 html，css 和 js 文件，移除注释、空格等不影响正常运行的代码，达到压缩的目的。</p>\n<p>要进一步地压缩，不妨考虑 <code>compression-webpack-plugin</code>，它可以压缩文件得到体积更小的 gzip 文件。</p>\n<p>上面这些优化都是关于 <code>webpack</code> 的，你可以查看我的 <a href=\"./../webpack4/\">webpack4 示例</a> 进一步了解。</p>\n<p>除此之外，还可以使用 CDN 来访问某些包的已构建资源，CDN 往往拥有更快的请求和响应速度。问题在于 CDN 的稳定性并不由自己掌控，我自己更倾向于把 <code>splitChunks</code> 分离出的包部署在服务器上，不使用 CDN。</p>\n<p>框架的脚手架往往已经为我们准备好了合理的构建，我们无需操心太多，这也是为什么我更推荐使用脚手架直接开发。</p>\n<p>值得一提的是，相比于 <code>create-react-app</code>，<code>vue-cli</code> 有着特别的优化，那就是 <code>preload</code> 和 <code>prefetch</code>（使用了 <code>@vue/preload-webpack-plugin</code>）。</p>\n<p><code>&lt;link rel=&quot;preload&quot;&gt;</code> 是一种 resource hint，用来告诉浏览器页面加载后很快会被用到的资源，开始主体渲染之前尽早 preload。默认情况下，一个 <code>vue-cli</code> 创建的应用会为所有初始化渲染需要的文件自动生成 preload 提示。</p>\n<p><code>&lt;link rel=&quot;prefetch&quot;&gt;</code> 也是一种 resource hint，用来告诉浏览器在页面加载完成后，利用空闲时间提前获取用户未来可能会访问的内容。默认情况下，一个 <code>vue-cli</code> 应用会为所有作为 async chunk 生成的 js 文件自动生成 prefetch 提示。</p>\n<p>在非 <code>vue-cli</code> 初始化的项目里，你可以考虑手动添加这部分优化。</p>\n<h2 id=\"在合适的时候做合适的重构\"> 在合适的时候做合适的重构</h2>\n<p>在需求改动了一定次数之后，原本合理的代码架构可能会显得不是那么合理，跟进需求改动越来越困难。这往往是新需求与既往设计冲突而导致的。</p>\n<p>我一般倾向于在需求改动 50 次左右的时候做一次中小型的重构，而大型的重构难以简单地决定，一般由需求量，工作量，以及日期安排等因素综合决定。</p>\n<p>常见的优化手法有很多，比如封装重复代码，拆分函数功能，尽可能地使用预置 API 等。</p>\n<div><pre><code><span>// bad</span>\n<span>function</span> <span>handleSubmit</span><span>(</span><span>nickname<span>,</span> password</span><span>)</span> <span>{</span>\n  <span>if</span> <span>(</span>password<span>.</span>length <span>&lt;</span> <span>8</span><span>)</span> <span>{</span>\n    <span>alert</span><span>(</span><span>'密码长度不符合要求，请使用强密码'</span><span>)</span><span>;</span>\n  <span>}</span> <span>else</span> <span>{</span>\n    <span>let</span> username <span>=</span> <span>''</span><span>;</span>\n    <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>8</span><span>;</span> i <span>+=</span> <span>1</span><span>)</span> <span>{</span>\n      <span>if</span> <span>(</span>nickname<span>[</span>i<span>]</span><span>)</span> <span>{</span>\n        username <span>+=</span> nickname<span>[</span>i<span>]</span><span>;</span>\n      <span>}</span> <span>else</span> <span>{</span>\n        <span>break</span><span>;</span>\n      <span>}</span>\n    <span>}</span>\n    <span>alert</span><span>(</span><span>'账号是'</span> <span>+</span> username<span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>上面一段代码试图处理提交事件，思路直观但相当糟糕。</p>\n<p>首先是在提交方法内部定义了怎么校验，导致函数本身不够单一。一种更好的做法是，分离校验和提交的定义，但可以在提交方法内部调用校验方法。分离后，无论是校验还是提交，都更易于扩展了。</p>\n<div><pre><code><span>// better</span>\n<span>function</span> <span>handleValidate</span><span>(</span><span>password</span><span>)</span> <span>{</span>\n  <span>if</span> <span>(</span>password<span>.</span>length <span>&lt;</span> <span>8</span><span>)</span> <span>{</span>\n    <span>alert</span><span>(</span><span>'密码长度不符合要求，请使用强密码'</span><span>)</span><span>;</span>\n    <span>return</span> <span>false</span><span>;</span>\n  <span>}</span>\n  <span>return</span> <span>true</span><span>;</span>\n<span>}</span>\n\n<span>function</span> <span>handleSubmit</span><span>(</span><span>nickname<span>,</span> password</span><span>)</span> <span>{</span>\n  <span>if</span> <span>(</span><span>handleValidate</span><span>(</span>password<span>)</span><span>)</span> <span>{</span>\n    <span>let</span> username <span>=</span> <span>''</span><span>;</span>\n    <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>8</span><span>;</span> i <span>+=</span> <span>1</span><span>)</span> <span>{</span>\n      <span>if</span> <span>(</span>nickname<span>[</span>i<span>]</span><span>)</span> <span>{</span>\n        username <span>+=</span> nickname<span>[</span>i<span>]</span><span>;</span>\n      <span>}</span> <span>else</span> <span>{</span>\n        <span>break</span><span>;</span>\n      <span>}</span>\n    <span>}</span>\n    <span>alert</span><span>(</span><span>'账号是'</span> <span>+</span> username<span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p>另一个问题是，使用了 <code>for</code> 循环来获取 <code>nickname</code> 变量的前 8 位，并在不足 8 位时停止操作。使用预置的 <code>String.prototype.slice</code> 可以直接了当地完成这一步工作。</p>\n<div><pre><code><span>// even better</span>\n<span>function</span> <span>handleValidate</span><span>(</span><span>password</span><span>)</span> <span>{</span>\n  <span>if</span> <span>(</span>password<span>.</span>length <span>&lt;</span> <span>8</span><span>)</span> <span>{</span>\n    <span>alert</span><span>(</span><span>'密码长度不符合要求，请使用强密码'</span><span>)</span><span>;</span>\n    <span>return</span> <span>false</span><span>;</span>\n  <span>}</span>\n  <span>return</span> <span>true</span><span>;</span>\n<span>}</span>\n\n<span>function</span> <span>handleSubmit</span><span>(</span><span>nickname<span>,</span> password</span><span>)</span> <span>{</span>\n  <span>if</span> <span>(</span><span>handleValidate</span><span>(</span>password<span>)</span><span>)</span> <span>{</span>\n    <span>let</span> username <span>=</span> nickname<span>.</span><span>slice</span><span>(</span><span>0</span><span>,</span> <span>8</span><span>)</span><span>;</span>\n    <span>alert</span><span>(</span><span>'账号是'</span> <span>+</span> username<span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>现在就更良好了。更多的重构手法你可以阅读 Martin Fowler 的《重构》一书。</p>\n<p>我在这里还想再强调一点，那就是选择合适的时间点去做重构。过早地重构会浪费宝贵的开发时间，过晚地重构会使重构工作难以开展，代码难以挽回。</p>\n<h2 id=\"使用-lighthouse-辅助分析\"> 使用 LightHouse 辅助分析</h2>\n<p><a href=\"https://github.com/GoogleChrome/lighthouse#readme\" target=\"_blank\" rel=\"noopener noreferrer\">LightHouse</a> 是一个谷歌开源的网站性能分析工具，它可以分析任意网站的性能，打分并给出一些建议。</p>\n<p>你可以使用浏览器插件，也可以使用 cli。这里使用浏览器插件做演示。</p>\n<p>测试的对象依然是百度。LightHouse 生成了报告，我将它保存成 <a target=\"_blank\" :href=\"$withBase('/documents/optimization/lighthouse-report-for-baidu.pdf')\">PDF</a> 供你在线查看。</p>\n<p>报告对问题的描述和给出的解决方案都相当详细，在这里就不再展开讲解报告了。</p>\n<h2 id=\"手动优化-vue\"> 手动优化 vue</h2>\n<h3 id=\"函数式组件\"> 函数式组件</h3>\n<p>函数式组件没有状态（也就是没有响应式数据），也没有实例（也就是没有 <code>this</code>），因此它的渲染开销也较少。</p>\n<p>函数式组件非常适合用于展示固定数据。</p>\n<h3 id=\"改善-seo\"> 改善 SEO</h3>\n<p><code>vue-cli</code> 默认为我们构建一个对 SEO 不太友好的 SPA。如果需要良好的 SEO，我们不得不考虑一些方案。</p>\n<p>如果只是想改善少量页面（<code>/</code>，<code>/about</code>，<code>/contact</code> 等）的 SEO，使用预渲染 prerender 即可（<a href=\"https://github.com/chrisvfritz/prerender-spa-plugin#readme\" target=\"_blank\" rel=\"noopener noreferrer\">prerender-spa-plugin</a>）。预渲染可以在构建时 build time 生成针对特定路由的静态网页，甚至可以将网站完全静态化。</p>\n<p>在其它的情况下，你可能更需要服务端渲染 SSR。其具体的优劣和配置指南可以直接查看 <a href=\"https://ssr.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener noreferrer\">Vue SSR 指南</a>。</p>\n<p>除了手动配置 SSR 之外，直接使用 <a href=\"https://nuxtjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Nuxt</a> 或 <a href=\"https://quasar.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">Quasar</a> 也是一个很好的选择。</p>\n<p>由于我接触这方面相对较少，这里就不展开了。</p>\n<h3 id=\"异步加载非首页路由\"> 异步加载非首页路由</h3>\n<p>正如我在里提到的一样，<code>vue-cli</code> 会内置 preload 和 prefetch 的优化。</p>\n<p>下面是一个简单的配置例子。</p>\n<div><pre><code><span>import</span> Index <span>from</span> <span>'@/views/index.vue'</span><span>;</span>\n\n<span>export</span> <span>default</span> <span>new</span> <span>VueRouter</span><span>(</span><span>{</span>\n  routes<span>:</span> <span>[</span>\n    <span>{</span>\n      path<span>:</span> <span>'/'</span><span>,</span>\n      name<span>:</span> <span>'index'</span><span>,</span>\n      component<span>:</span> Index<span>,</span> <span>// preload</span>\n    <span>}</span><span>,</span>\n    <span>{</span>\n      path<span>:</span> <span>'/about'</span><span>,</span>\n      name<span>:</span> <span>'about'</span><span>,</span>\n      <span>component</span><span>:</span> <span>(</span><span>)</span> <span>=></span> <span>import</span><span>(</span><span>'@/views/about.vue'</span><span>)</span><span>,</span> <span>// prefetch</span>\n    <span>}</span><span>,</span>\n  <span>]</span><span>,</span>\n<span>}</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p><code>vue-cli</code> 会自动处理资源，为同步引入的资源添加 preload，为异步引入的资源添加 prefetch。</p>\n<p>一般来说，可以被直接访问的页面（比如首页，关于页）需要 preload，其它页面只需要 prefetch。</p>\n<h3 id=\"合理使用-vuex\"> 合理使用 vuex</h3>\n<p>在实际开发中往往会遇到多个组件需要反映相同的变化数据的情况，这时最好将共享状态提升到最近的共同父组件中去。当共同的父组件与它们跨越的层级较多，这时候更推荐使用全局状态管理。</p>\n<p>关于状态管理模式，可以直接查看 <a href=\"https://vuex.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener noreferrer\">Vuex 是什么</a>。这里只想先讨论如何划分模块的问题。</p>\n<p>如何划分模块，甚至要不要划分模块，一直没有定论。一派更倾向于不使用 <code>vuex</code> 模块，可以像 <code>redux</code> 一样使用 <code>vuex</code>。我个人属于另一派，更则倾向于使用 <code>vuex</code> 模块，并为每个模块都开启命名空间。</p>\n<p>我会把 <code>vuex</code> 模块分成两类，一类是应用使用的模块，另一类是业务使用的模块。应用使用的模块往往命名为 <code>app</code>，里面保存用户设置的语言、主题等数据；业务使用的模块命名视具体情况而定，里面保存用户信息和业务相关等数据。</p>\n<img :src=\"$withBase('/images/optimization/vuex-modules.svg')\" alt=\"vuex-modules\">\n<p>这么做的好处是明确划分了界限，强调模块化。坏处就是业务本身比较错综复杂时，非常考究开发者划分模块的功底。一旦划分的模块被业务需求模糊了界限，划分模块就会显得多余且累赘。</p>\n<p>而模块下的数据则应该尽量扁平化，模块下不应该再嵌套模块，这样能有效地避免过长的链式调用。</p>\n<h2 id=\"手动优化-react\"> 手动优化 react</h2>\n<p>TODO</p>\n<h2 id=\"参考\"> 参考</h2>\n<ul>\n<li>David Thomas, Andrew Hunt - 程序员修炼之道</li>\n<li>Martin Fowler - 重构</li>\n<li><a href=\"https://developers.google.cn/web/tools/chrome-devtools\" target=\"_blank\" rel=\"noopener noreferrer\">chrome devtools</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Tools\" target=\"_blank\" rel=\"noopener noreferrer\">firefox devtools</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium\" target=\"_blank\" rel=\"noopener noreferrer\">edge(chromium devtools</a></li>\n<li><a href=\"https://woai3c.github.io/introduction-to-front-end-engineering/\" target=\"_blank\" rel=\"noopener noreferrer\">谭光志 - 带你入门前端工程</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000002789651\" target=\"_blank\" rel=\"noopener noreferrer\">[ JS 进阶 ] 基本类型 引用类型 简单赋值 对象引用</a></li>\n<li><a href=\"https://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html\" target=\"_blank\" rel=\"noopener noreferrer\">阮一峰 - 网页性能管理详解</a></li>\n<li><a href=\"https://www.cnblogs.com/WindrunnerMax/p/13972793.html\" target=\"_blank\" rel=\"noopener noreferrer\">WindrunnerMax - Vue 常用性能优化</a></li>\n<li><a href=\"https://ssr.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener noreferrer\">Vue.js 服务端渲染指南</a></li>\n<li><a href=\"https://github.com/GoogleChrome/lighthouse#readme\" target=\"_blank\" rel=\"noopener noreferrer\">LightHouse</a></li>\n<li><a href=\"https://juejin.cn/post/6844904016325902344\" target=\"_blank\" rel=\"noopener noreferrer\">小维 FE - 一文搞懂 V8 引擎的垃圾回收</a></li>\n</ul>\n<h2 id=\"致谢\"> 致谢</h2>\n<ul>\n<li><a href=\"https://github.com/XuXianTao\" target=\"_blank\" rel=\"noopener noreferrer\">XuXianTao</a> - 阅读了初稿并提供了弥足珍贵的建议和意见</li>\n</ul>\n",
      "image": "http://www.ruanyifeng.com/blogimg/asset/2015/bg2015091502.png",
      "date_published": "2021-07-05T05:18:00.000Z",
      "date_modified": "2021-07-05T05:18:00.000Z",
      "authors": [
        {
          "name": "ModyQyW <wurui7@mail3.sysu.edu.cn>"
        }
      ],
      "tags": []
    },
    {
      "title": "学习路径",
      "url": "https://modyqyw.top/roadmap/",
      "id": "https://modyqyw.top/roadmap/",
      "content_html": "<h1 id=\"学习路径\"> 学习路径</h1>\n<p>这个部分包含了不同版本的学习路径。所有内容仅供参考。</p>\n<h2 id=\"极客时间\"> 极客时间</h2>\n<ul>\n<li><a href=\"https://time.geekbang.org/learning/path-detail/3\" target=\"_blank\" rel=\"noopener noreferrer\">计算机基础</a></li>\n<li><a href=\"https://time.geekbang.org/learning/path-detail/2\" target=\"_blank\" rel=\"noopener noreferrer\">前端工程师</a></li>\n<li><a href=\"https://time.geekbang.org/learning/path-detail/16\" target=\"_blank\" rel=\"noopener noreferrer\">后端工程师</a></li>\n<li><a href=\"https://time.geekbang.org/learning/path-detail/6\" target=\"_blank\" rel=\"noopener noreferrer\">测试工程师</a></li>\n<li><a href=\"https://time.geekbang.org/learning/path-detail/9\" target=\"_blank\" rel=\"noopener noreferrer\">运维工程师</a></li>\n<li><a href=\"https://time.geekbang.org/learning/path-detail/5\" target=\"_blank\" rel=\"noopener noreferrer\">架构师</a></li>\n<li><a href=\"https://time.geekbang.org/learning/path-detail/8\" target=\"_blank\" rel=\"noopener noreferrer\">产品经理</a></li>\n</ul>\n<h2 id=\"方糖气球\"> 方糖气球</h2>\n<ul>\n<li><a href=\"https://ftqq.com/fangtang-fullstack/\" target=\"_blank\" rel=\"noopener noreferrer\">方糖气球</a></li>\n</ul>\n<h2 id=\"roadmap-sh\"> roadmap.sh</h2>\n<ul>\n<li><a href=\"https://roadmap.sh/\" target=\"_blank\" rel=\"noopener noreferrer\">英文版</a></li>\n</ul>\n<h2 id=\"ledge\"> ledge</h2>\n<ul>\n<li><a href=\"https://github.com/phodal/ledge/blob/master/src/assets/docs/skilltrees\" target=\"_blank\" rel=\"noopener noreferrer\">技能图谱</a></li>\n</ul>\n<h2 id=\"素燕\"> 素燕</h2>\n<ul>\n<li><a href=\"https://github.com/lefex/FE#readme\" target=\"_blank\" rel=\"noopener noreferrer\">前端小课</a></li>\n</ul>\n<h2 id=\"神秘\"> 神秘</h2>\n<ul>\n<li><a href=\"https://d.shikey.com/jike\" target=\"_blank\" rel=\"noopener noreferrer\">神秘</a></li>\n</ul>\n",
      "date_published": "2021-07-05T05:18:00.000Z",
      "date_modified": "2021-07-05T07:28:56.000Z",
      "authors": [
        {
          "name": "ModyQyW <wurui7@mail3.sysu.edu.cn>"
        }
      ],
      "tags": []
    },
    {
      "title": "安全",
      "url": "https://modyqyw.top/safety/",
      "id": "https://modyqyw.top/safety/",
      "content_html": "<h1 id=\"安全\"> 安全</h1>\n<h2 id=\"说明\"> 说明</h2>\n<ul>\n<li>形式：尽量口语化的笔记。</li>\n<li>适用：想要了解网络安全的开发者。</li>\n<li>目标：了解开发和日常使用里常见的安全问题。</li>\n<li>状态：目前处于完善中状态，可能会有遗漏、错误、不完美，但已经可以正常阅读。如果你发现了错误，请在评论里告诉我，谢谢。</li>\n</ul>\n<h2 id=\"从-http-到-https\"> 从 HTTP 到 HTTPS</h2>\n<h3 id=\"http\"> HTTP</h3>\n<p>在信息安全逐步受到重视的大前提下，人们重新审视了 HTTP 协议。</p>\n<h4 id=\"http-通信使用明文\"> HTTP 通信使用明文</h4>\n<p>基于 TCP/IP 的 HTTP 本身没有加密的功能，所以没有办法加密通信通道，这是 HTTP 通信使用明文的核心痛点。</p>\n<p>而为了防止被窃听，我们引入了加密技术。当然，我们现在知道被广泛使用的就是 HTTPS（HTTP Secure，超文本传输安全协议），我们现在可以简单地认为 HTTPS = HTTP + SSL（Secure Socket Layer，安全套接层）/TLS（Transport Layer Security，安全层传输协议）。HTTPS 组合使用 HTTP 和 SSL/TLS，加密了通信通道，使得别人无法窃听通信内容。</p>\n<p>如果我们不加密通信通道，我们也可以加密通信内容。但这么做，别人仍然能窃听加密后的通信内容，所以仍然有通信内容被篡改的风险。</p>\n<p>TLS 是以 SSL 为原型开发的协议，后面将统一称为 SSL。</p>\n<h4 id=\"http-协议没有验证通信方的身份\"> HTTP 协议没有验证通信方的身份</h4>\n<p>HTTP 不会确认通信方的请求/响应，也就是说任何人都能发出请求/响应，这也就带来了一系列问题。</p>\n<p>比较常见的隐患有这么几个：</p>\n<ul>\n<li>没有办法确认服务器是不是目标服务器，服务器有可能是恶意服务器。</li>\n<li>没有办法确认客户端是不是目标客户端，客户端有可能是恶意客户端。</li>\n<li>没有办法确认客户端是不是有权限访问特定的内容。</li>\n<li>没有办法阻止海量请求下的 DoS（Denial of Service，拒绝服务）攻击。</li>\n</ul>\n<p>SSL 提供了证书这种手段来确认身份。一般来说，证书由值得信赖的第三方机构颁发，它非常难以伪造，用于确认身份。所以，只要确认证书，就可以确认持有证书的所有者身份。</p>\n<h4 id=\"http-协议不能证明报文完整正确\"> HTTP 协议不能证明报文完整正确</h4>\n<p>HTTP 没有办法确认发出的请求/响应和收到的请求/响应是相同的，所以请求/响应可能会在中途被他人拦截并修改，这也就是中间人攻击（Man-in-the-Middle Attack，MITM）。</p>\n<p>可以使用 MD5/SHA-1 等散列值校验的方法、PGP 等数字签名方法来确定完整性，但是需要用户亲自验证，并不便捷，另外也存在 PGP/MD5/... 本身被改写的极端情况，并不安全。</p>\n<p>SSL 提供了认证和加密处理及摘要功能，有效地解决了这个问题。</p>\n<h3 id=\"https\"> HTTPS</h3>\n<p>组合使用 HTTP 和通信加密、证书、完整性保护等机制，我们就得到了 HTTPS。</p>\n<p>需要再次强调的是，HTTPS 不是应用层的新协议，只是用 SSL/TLS 代替了 HTTP 通信接口部分而已。使用 HTTP 时，HTTP 直接和 TCP/IP 通信。而使用 HTTPS 时，HTTPS 先和 SSL/TLS 通信，再由 SSL/TLS 和 TCP/IP 通信。所以我们上面提到，可以简单地认为 HTTPS = HTTP + SSL/TLS。</p>\n<p>HTTPS 不是绝对安全的，但它大幅增加了攻击的成本，所以一般认为 HTTPS 是相对安全的。</p>\n<h4 id=\"对称加密和非对称加密\"> 对称加密和非对称加密</h4>\n<p>SSL 使用到了非对称加密，这是一种比对称加密更稳妥的加密方式。</p>\n<p>对称加密是加解密共用一个密钥的加密方式，算法公开、计算量小、加密速度快、加密效率高，常见的对称加密算法有 DES，RC，BlowFish。对称加密的问题在于：</p>\n<ul>\n<li>发送的过程中密钥有可能会被他人窃听，进而丧失加密的意义，但不发送密钥的话对方又无法解密信息。</li>\n<li>保留密钥需要考虑安全问题。</li>\n<li>更进一步地说，如果密钥能够安全地发出，那信息也应该能安全地发出，那加密还有什么必要呢？</li>\n</ul>\n<p>非对称加密解决了对称加密的几个问题。非对称加密使用了两个密钥：</p>\n<ul>\n<li>一个称为私钥，请求方自己保留，用于解密响应方返回的已加密的响应信息。</li>\n<li>另一个称为公钥，请求方公开，响应方用公钥加密响应信息再返回。</li>\n</ul>\n<p>这么做就无需担心密钥被窃听进而被用于破解信息，因为发出的密钥只是公钥，而使用公钥成功解密信息的可能性微乎其微，解密成本大大提高，通信双方只需互换公钥就可以实现相对意义上的安全通信。常见的非对称加密算法有 RSA，Elgamal，DiffieHellman，ECC。</p>\n<p>非对称加密最大的缺点就是处理速度慢，如果所有通信都使用非对称加密，速度将会大大降低。所以从安全和速度两方面考虑，HTTPS 采用了混合加密机制。</p>\n<h4 id=\"混合加密机制\"> 混合加密机制</h4>\n<p>HTTPS 首先会使用非对称加密方式确定共用密钥，然后在通信过程中使用共用密钥进行对称加密。</p>\n<p>由于共用密钥被非对称加密后再进行传输，所以即使被人窃听，也难以解密出共用密钥，后续过程再使用共用密钥加密信息、发送信息就相对而言是安全的。</p>\n<h4 id=\"证书和数字签名\"> 证书和数字签名</h4>\n<p>混合加密机制也并非无懈可击，破绽就在于公钥上，怎么证明拿到的用于非对称加密的公钥是真的呢？也就是说，怎么证明正在通信的服务器就是目标服务器呢？</p>\n<p>这就需要数字证书认证机构（CA，Certificate Authority）和相关机构颁发的服务器公钥证书了。客户端和服务器都认可并信赖 CA，这是服务器公钥证书起作用的前提。</p>\n<p>服务器的运营人员会向 CA 申请公钥证书，CA 判明身份无误后，会对服务器公钥做处理，然后把处理后的服务器公钥和证书绑定到一起，给到运营人员手上。</p>\n<p>运营人员配置好服务器公钥证书后，服务器会把这个证书发送给客户端以进行非对称加密通信，收到证书的客户端会使用 CA 的公钥验证证书上的数字签名，确认无误后就能确定两件事情：</p>\n<ul>\n<li>证书真实有效。</li>\n<li>服务器的公钥真实有效。</li>\n</ul>\n<p>但这里还有一个套娃问题，怎么确定 CA 的公钥真实有效？服务器的公钥由 CA 证书证明真实性和有效性，那 CA 的公钥呢？事实上，客户端基本都内置了常见 CA 的公钥，这一点无需过多担心。</p>\n<p>这里另外再说一下，CA 对服务器公钥做的处理，就是数字签名。CA 会使用 CA 私钥对服务器公钥进行签名，使用 CA 公钥就可以验证这个签名。</p>\n<p>上面提到的证书，是证明公钥真实有效的证书，但证书不只有这一种，我们还可能会见到证明组织真实性的 EV SSL 证书，用于确认服务器背后运营的企业是不是真的存在。这种证书的目的是防止钓鱼攻击，但实际上并没有起到很好的效果。</p>\n<p>除了服务器有证书，客户端也可以有证书，作用和服务器证书一样，证明正在通信的客户端就是目标客户端。但客户端证书应用很少，一般会用于银行业，主要有以下几个问题：</p>\n<ul>\n<li>用户需要手动安装客户端证书。</li>\n<li>客户端证书大多数需要付费购买。</li>\n<li>客户端证书只能证明客户端真实存在，不能证明使用者真实有效。</li>\n</ul>\n<p>还有一个比较常见的证书，那就是自签名证书，也就是自己给自己颁发的证书。这种证书多用于苹果设备需要使用特殊工具时，比如爱思助手。只要安装了自签名证书，苹果设备就会认可、允许安装应用。</p>\n<p>最后还需要强调的一点是，服务器证书生效的前提是 CA 值得信赖。如果 CA 被入侵，证书就变成了黑客的通行证。尽管还存在着 CRL（Certificate Revocation List，证书吊销列表）和 RCA（Root Certificate Authority，根数字证书认证机构，客户端可以删除根数字证书颁发机构使得对应的数字证书无效）机制作为应对，但生效也需要一段时间，而在这段时间内，黑客还是可以搞一些破坏的。</p>\n<h3 id=\"https-安全通信机制\"> HTTPS 安全通信机制</h3>\n<p>在通信开始时，客户端和服务器会进行 SSL 四次握手（注意，三次握手指 TCP 三次握手）。</p>\n<p>第一次握手指客户端发送 Client Hello 报文开始通信，报文内包括客户端支持的 SSL 版本，使用的加密算法和密钥长度等信息。</p>\n<p>第二次握手指服务器端收到 Client Hello 报文后，以 Server Hello 报文响应，报文内容和 Client Hello 报文内容类似。然后，服务器端发送包含公钥证书的 Certificate 报文。最后，服务器端发出 Server Hello Done 报文，表示传输结束。</p>\n<p>第三次握手指客户端发送 Client Key Exchange 报文，报文内包含 Pre-master secret 随机密码串，报文本身使用服务器公钥加密。然后，客户端发送 Change Cipher Spec 报文，目的是提示服务器后续通信会采用 Pre-master secret 密钥加密。最后，客户端发送 Finished 报文，报文内包含连接到现在全部报文的整体校验值，握手能否成功要以服务器能否正确解密为标准。</p>\n<p>第四次握手指服务器端发送 Change Cipher Spec 报文和 Finished 报文。</p>\n<p>至此，SSL 连接建立完成，通信将受到 SSL 的保护。之后就开始使用应用层协议通信，即 HTTP 通信。</p>\n<p>应用层发送数据时，还会附加 MAC（Message Authentication Code）报文摘要，它可以查知报文是否被篡改。</p>\n<p>最后还需要明确一点，协议本身几乎不会成为网络攻击的目标，服务器、客户端等才是网络攻击的目标。</p>\n<h2 id=\"xss\"> XSS</h2>\n<p>XSS 即 Cross-Site Scripting，跨站脚本。因为 CSS 用于指代 Cascading Style Sheets，层叠样式表，所以跨站脚本的英文缩写使用 X 替代 C 避免混淆。</p>\n<p>XSS 攻击常常利用动态创建的 HTML 发起，它可以让攻击者嵌入恶意脚本代码到正常用户会访问到的页面中（比如注册时起名叫 <code>&lt;script&gt;&lt;/script&gt;</code> 并在其中填入恶意代码），当正常用户访问该页面时，嵌入的恶意脚本代码就会被执行。XSS 攻击会利用虚假表单骗取个人信息，利用脚本窃取用户 Cookie，利用用户发送恶意请求，显示伪造的文章/图片等。</p>\n<p>简而言之，如果把输入内容（不只是用户输入内容，也可能是 URL 参数等）直接显示到网页，就很容易遭受 XSS 攻击，所以我们需要转义用户输入的内容乃至 URL 里面的参数，把 <code>&lt;script&gt;</code> 之类的标签转换成 <code>&amp;lt;script&amp;gt;</code> 之类的标签。网站开发的一个准则就是，永远不要相信输入内容，永远要检验输入内容。</p>\n<p>同样的解决方案也可以用于 SQL 注入，一种利用不经校验就直接把传递的参数使用到 SQL 语句里的攻击方式。执行了错误的 SQL 语句将可能使数据表被篡改，从而让用户遭受损失。</p>\n<h2 id=\"csrf-xsrf\"> CSRF/XSRF</h2>\n<p>CSRF/XSRF 即 Cross-Site Request Forgery，跨站请求伪造。</p>\n<p>XSS 攻击更多的是欺骗用户，让用户认为某个网站是安全的，但实际上网站本身会运行恶意脚本。而 CSRF 攻击是欺骗用户浏览器，让浏览器完成恶意操作的攻击。</p>\n<p>举个例子，假如一家银行使用特定格式的 URL 地址转账 <code>http://www.examplebank.com/withdraw?account=AccoutName&amp;amount=1000&amp;for=PayeeName</code>。攻击者只需要在用户身份信息未过期时添加 <code>&lt;img src=&quot;http://www.examplebank.com/withdraw?account=Alice&amp;amount=1000&amp;for=Badman&quot;&gt;</code>，就可以成功转账。这意味着，用户只要访问由其他用户生成内容的网站（比如博客），都是不安全的。</p>\n<p>目前，浏览器厂商们已经尽力防范 CSRF 攻击，比如逐步禁止第三方 Cookie 等。我们也可以在开发中尽量避免 CSRF 攻击，比如使用 localStorage 和 sessionStorage 保存身份信息（目前常常使用 Token）并在请求时提交，在允许的前提下缩短身份信息的有效时间，人工验证等。</p>\n<h2 id=\"文件上传漏洞\"> 文件上传漏洞</h2>\n<p>攻击者上传可执行文件、恶意脚本等，随后再执行攻击操作，这就是文件上传漏洞。要避开文件上传漏洞相当简单，只需要在上传时检查文件名称和后缀，同时要求用户使用较新的浏览器版本操作即可。</p>\n<h2 id=\"参考\"> 参考</h2>\n<ul>\n<li>上野宣 - 图解 HTTP</li>\n<li><a href=\"https://developers.weixin.qq.com/community/develop/article/doc/000046a5fdc7802a15f7508b556413\" target=\"_blank\" rel=\"noopener noreferrer\">一次安全可靠的通信——HTTPS 原理</a></li>\n</ul>\n<h2 id=\"致谢\"> 致谢</h2>\n<ul>\n<li><a href=\"https://github.com/XuXianTao\" target=\"_blank\" rel=\"noopener noreferrer\">XuXianTao</a> - 阅读了初稿并提供了弥足珍贵的建议和意见</li>\n</ul>\n",
      "date_published": "2021-07-05T05:18:00.000Z",
      "date_modified": "2021-07-05T05:18:00.000Z",
      "authors": [
        {
          "name": "ModyQyW <wurui7@mail3.sysu.edu.cn>"
        }
      ],
      "tags": []
    },
    {
      "title": "杂谈",
      "url": "https://modyqyw.top/tittle-tattle/",
      "id": "https://modyqyw.top/tittle-tattle/",
      "content_html": "<h1 id=\"杂谈\"> 杂谈</h1>\n<h2 id=\"关于做人-2\"> 关于做人 2</h2>\n<p><a href=\"https://weibo.com/u/2809151872\" target=\"_blank\" rel=\"noopener noreferrer\">@HMS-XIN</a> 的<a href=\"https://weibo.com/2809151872/JrqmppZQj\" target=\"_blank\" rel=\"noopener noreferrer\">微博</a>。</p>\n<blockquote>\n<p>一个人当然可以选择明哲保身，只是别忘了，美好的未来从来都不会从天而降，每一个明明知道真理与理性在哪一边却因懦弱和不想惹事上身而选择沉默的人，都在扮演一个冷漠看客的角色。</p>\n<p>看客们虽然没有主动作恶，但当恶势力明显在各种嚣张、猖狂、上蹿下跳、玩得风生水起的时候，如果你们仍然选择冷眼旁观，你们没资格抱怨这个世界在变糟，【因为这是你们与恶势力勾搭合力作用下的必然结果，因为你不曾阻止它去变糟。】</p>\n</blockquote>\n<h2 id=\"从大四到毕业\"> 从大四到毕业</h2>\n<p>我时常会想，毕业之后我的生活会变成什么样子呢。我还没有想好，就已经毕业了。说起来奇怪，我骂了三年，要搬出去那会还有点挺舍不得的，虽然有那么多讨厌的政策，虽然有那么多讨厌的人，可是那会，我还想留下来。</p>\n<p>搬出来了，随之而来的，是租房，工作合同，落户等等一系列的事情。</p>\n<p>没有和女朋友合租在一起，也不知道好，还是不好，合租在一起就少一些自己的时间了，不合租在一起又觉得像少了一点什么。</p>\n<p>工作合同签下了，感觉那就是现代的卖身契。一想到 60 多岁还要工作，突然就失去了工作的动力。如果不是为了钱，还会有多少人去工作呢？</p>\n<p>户口迁到了广州，估计这辈子都是要靠租房过活了吧。</p>\n<p>现在坐在租房里，又怀念起之前的学校生活，突然觉得，之前的学校生活也没那么糟糕了。我的不舍得，我的不开心，突然间就涌上来了。</p>\n<h2 id=\"从大三到大四\"> 从大三到大四</h2>\n<p>从大三到大四是个什么感觉？要考虑的事情突然变得多得多，重量级也变得不同了。在我看来，最为突出的需要考虑的事情就是考研与工作之间的抉择。</p>\n<p>本来，在大三上学期就应该考虑二者的抉择的，但我似乎有些过于迟钝。等到了大四，才开始了我自己的选择。我选的是工作，最主要的原因是我当时处于一种厌学的状态，不是厌恶学习，而是厌恶学校；其次是因为我也想靠自己独立生活，再然后就是想反补家里。</p>\n<p>为什么会厌恶学校？或多或少都跟新上任的校长相关。学院大变动导致的混乱，上课时间未经征求意见修改，校园未经征求意见地改造——林林总总，我体会不到大一时候学校以学生为本的态度，更别提老师压力加大、甚至有老师离职的传言了。</p>\n<p>“德才兼备，领袖气质，家国情怀。”背后所蕴含的，是全面推广、鼓励科研的想法，仿佛有一股劲，逼着你去读研、读博。我并不喜欢这种由别人来安排我的未来的做法，甚至可以称为厌恶。</p>\n<p>说回考研与工作。考研自然就意味着首先要花一年多的时间来准备考独木桥一般的试，然后要花两年甚至更多的时间来跟着导师做科研，紧接着再面临考博还是工作的抉择（又或者，你从一开始就已经想好了）。要挑一个好导师，要学着自己去研究、学习，期间需要付出的努力绝不会比高三少多少，甚至会多得多。</p>\n<p>而工作呢？需要去花上一两个月的时间去准备，然后海投，到处参加笔试、面试，所耗费的精力、时间比考研少，也能提前汲取经验，但是薪水起点自然就会比硕士、博士要低一些。</p>\n<p>假如选择考研，兼职、实习都尽量先放一放，除非是家里很需要你的一份薪水，不然的话必须以考研为重。假如选择工作，应该提前去找一些相关的实习做，尽可能地从里面拿点经验，这样在秋招里面也有优势。</p>\n<p>保研的话，就考验从大一开始的努力程度了，并不在此处的讨论范围内。</p>\n<p>还有什么是值得考虑的呢？或许就是自己的兴趣。我一直认为，没有任何一个兴趣的人能够活得长久，因为生活总是很操蛋，兴趣能让你放松、快乐。拿我自己来说，我以前喜欢看小说，喜欢打 DotA，现在喜欢打魂系列游戏还有策略类游戏——我的兴趣就是做自己想做的事情。未来会如何呢？或许不会打游戏了，而是转投别的方向去了，这谁也说不准，只要快乐，就完事了。</p>\n<p>或许不会打游戏，也不是说失去了热爱。我对游戏的热情没有那么容易消退，但生活总是会逼迫我做出或这或那的退步，日后打不了游戏也是一种可能性。</p>\n<h2 id=\"关于做人-1\"> 关于做人 1</h2>\n<p>我曾思考过，20+岁的人，应该懂的是什么，我想不分先后地列写出来。</p>\n<p>第一点是直白。最常见的反例就是问了一句“在吗”，然后就没有了后续。每个人都有自己的生活、自己的工作，如果一定要等待别人的回复才说下一句，又或者在那里支支吾吾半天，那是在浪费彼此的时间。表达相应的礼节之后直接单刀直入表达自己需求即可，至于别人愿不愿意回不回你，那是别人的事情了。</p>\n<p>第二点是思辨能力。最简单的来说，就是某样东西又或者某件事，是否正确、是否合理、是否值得做，等等一系列的等等。别人都去插队，自己要插吗？别人都在骂，自己也要骂吗？别人不会做某件事情，自己要去帮助吗？</p>\n<p>如果看完问题，就已经给出了自己的答案，那无疑是缺乏思辨能力的。这些问题都仅仅是最核心的部分，是否还存在着需要附加说明的情况呢？有一个人插队了，保安不做劝阻，服务员不做劝阻，大家自发地插到他前面去，让他的插队做无用功，你是否要做同样的事情？别人不会做某件事情，但拒绝一切帮助，想要自己探索出方法来，你也要去帮助吗？</p>\n<p>诸如此类，还有太多太多的情况。如果说你简单地认为非黑即白，那还请再加油。</p>\n<p>如果说你看到这里，没有对我上面写的东西进行过深入思考，也能表明你的思辨能力还是缺乏的，不妨多多评估自己的道德基准，以达到提升的效果。</p>\n<p>第三点是自我驱动力。9102 年了，如果一个人不会去自己学习新的知识，被淘汰是必然的。就连最摸的秦川，也会换他喜欢的女人，也会出现新的口头禅，你又有什么理由不去学点新东西呢？</p>\n<p>当然了，信息时代最不能缺少的就是信息，请务必学一些计算机相关的知识，比如计算机网络、计算机硬件、计算机软件等等，但不必去学习开发（除非你真的很感兴趣）。</p>\n<p>第四点是坚持。坚持学一点新东西，坚持复习一点旧东西，坚持做自己喜欢做的事情。坚持下去，总会收获一点什么的。</p>\n<p>第五点是责任心。该归自己的事情，请务必完成，假如因为种种原因不能完成，也要找到相应的处理方案；不归自己的事情，比如同事让你帮做属于他那份工作，说“不”就可以了，因为对所有事情负全责恰恰是对自己最不负责的行为之一。</p>\n<p>第六点是包容开放的观念。不要要求别人与自己一致，尊重彼此间的差异性。</p>\n<blockquote>\n<p><a href=\"https://www.zhihu.com/question/20181996\" target=\"_blank\" rel=\"noopener noreferrer\">抑郁症的表现有什么？</a></p>\n</blockquote>\n<p>第七点是自我调节。压力会一直摧残着你，请千万千万，不要有轻生的念头，坚持做自己喜欢做的事情，做好时间规划，如果实在不行了，去看心理医生。</p>\n<p>另外想附上渣浪微博<a href=\"https://weibo.com/u/6038922387?is_all=1\" target=\"_blank\" rel=\"noopener noreferrer\">@乔凯文</a>的置顶微博。</p>\n<blockquote>\n<p>可能你现在很焦虑，你觉得这个社会已经没有底线，道德滑坡了三十年，社交网络里全都是负能量。你觉得你不是超级英雄，所以你对此无能为力，只能在微博上表达愤怒。</p>\n<p>记得我说过吗？这个社会，就是你我。我们是什么样，这个社会就是什么样。如果这个社会雪崩了，那么你我也是其中的一片雪花，我们都有责任。</p>\n<p>如果你从政，那么请记住你入党时宣的誓。“随时准备为党和人民牺牲一切。”不仅是一句口号。政府的公信力靠你们来维护，无论你在基层还是在国务院，请勿忘初衷。</p>\n<p>如果你是一名商人，请不要造假售假坑蒙拐骗。君子爱财，取之有道。货真价实，信誉卓著。才是立身之本。</p>\n<p>如果你是一名记者，请记住我国新闻伦理规范的根本原则是为人民服务。你不光是党和政府的喉舌，还是人民的话筒。</p>\n<p>如果你是一名老师，请一定善待每一个孩子。为人师者，必先正其身，方能教书育人，此乃师德之本。</p>\n<p>如果你是从事新媒体的，请不要为了流量而模糊事件本身的焦点，只重传播却忽略真相。要知道，你的流量越大，肩上的责任也就越大。</p>\n<p>即使你只是一名普通人，看到开童车的，你可以积极举报。看到不公的事，你可以理性发声。表达愤怒的同时，也多转发一下呼吁相关法律条款完善的微博，推动事件从根本上解决，避免类似悲剧重演。不论现实还是网上，为自己说的每一句话负责任。互联网时代，你我都知道键盘有多么重要。</p>\n<p>社会责任感其实没那么虚无缥缈，对自己做的每一好件事情都怀有信念感，就好。</p>\n<p>只有我们守住自己的底线，这个社会才有底线。</p>\n</blockquote>\n<p>但行好事，莫问前程。</p>\n<h2 id=\"希望\"> 希望</h2>\n<p>我对现在的中国社会失望吗？失望。</p>\n<p>我对现在的中国社会抱有希望吗？抱有希望。</p>\n<p>我的某个老师说过类似的话：中国现在的社会的确还不够好，还有很多可进步的地方，但是你们要知道，现在是中国历史上最好的时代，现在的社会是中国历史上最好的社会，而变得更好的契机，就是你们。</p>\n<p>正因如此，我才在经历那么多奇葩事情之后，还没有彻底丧失对国家、对社会的希望。</p>\n",
      "date_published": "2020-04-03T17:33:51.000Z",
      "date_modified": "2021-03-24T08:00:18.000Z",
      "authors": [
        {
          "name": "ModyQyW <wurui7@mail3.sysu.edu.cn>"
        }
      ],
      "tags": []
    },
    {
      "title": "Webpack4",
      "url": "https://modyqyw.top/webpack4/",
      "id": "https://modyqyw.top/webpack4/",
      "content_html": "<h1 id=\"webpack4\"> Webpack4</h1>\n<h2 id=\"说明\"> 说明</h2>\n<ul>\n<li>形式：尽量口语化的笔记和示例。</li>\n<li>适用：了解 npm，有原生 js 和 <code>react</code> / <code>vue</code> 开发经验，想要了解、自定义 js 工具链的开发者。</li>\n<li>目标：跟着实操能入门 <code>webpack4</code>，能解决实际开发中 50% 以上的问题，熟悉参考资料后能解决 80% 以上的问题。</li>\n<li>思路：<code>是什么 -&gt; 为什么 -&gt; 怎么做</code> 和 <code>为什么 -&gt; 是什么 -&gt; 怎么做</code>。</li>\n<li>结构：拿单页应用作示例，着重关注怎么使用，最后列出参考资料给你查阅学习。</li>\n<li>环境：macOS，zsh，<a href=\"https://ohmyz.sh/\" target=\"_blank\" rel=\"noopener noreferrer\">oh-my-zsh</a>，<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener noreferrer\">node</a> v12，<a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener noreferrer\">vscode</a> 和 <a href=\"https://www.google.com/chrome/browser/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">chrome</a>。另外用 vscode 的 <a href=\"https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer\" target=\"_blank\" rel=\"noopener noreferrer\">live server 插件</a>或 <a href=\"https://github.com/vercel/serve#readme\" target=\"_blank\" rel=\"noopener noreferrer\">serve</a> 测试构建。</li>\n<li>约定：使用<code>${PROJECT_DIR}</code>表示项目根目录，一般认为<code>package.json</code>所处目录就是项目根目录。</li>\n<li>支持：支持现代浏览器和 IE 11。</li>\n<li>状态：目前处于完善中状态，可能会有遗漏、错误、不完美，但已经可以正常阅读。如果你发现了错误，请在评论里告诉我，谢谢。</li>\n</ul>\n<h2 id=\"为什么要使用构建工具\"> 为什么要使用构建工具</h2>\n<ul>\n<li>开发代码可以使用新语法 <code>syntax</code> 和新特性 <code>feature</code></li>\n<li>进一步处理图片、文件等资产文件</li>\n<li>自动添加大部分 css 前缀</li>\n<li>压缩混淆只需要做简单的自定义</li>\n<li>构建文件的版本管理只需要做简单的自定义</li>\n</ul>\n<p>总而言之，构建工具帮我们完成了大量重复的构建工作，使我们能投入更多的时间到开发工作。</p>\n<h2 id=\"webpack-简介\"> webpack 简介</h2>\n<h3 id=\"是什么\"> 是什么</h3>\n<p><code>webpack</code> 是一个静态模块构建工具，根据配置分析依赖、生成依赖图、构建（也就是打包）。</p>\n<h3 id=\"优点\"> 优点</h3>\n<ul>\n<li>使用广泛</li>\n<li>生态丰富</li>\n<li>社区活跃</li>\n<li>配置灵活</li>\n</ul>\n<h3 id=\"缺点\"> 缺点</h3>\n<ul>\n<li>文档不友好，对某些概念没有解释得很好</li>\n<li>配置项过多且复杂，某些配置项可能会有意想不到的影响</li>\n</ul>\n<h3 id=\"竞品\"> 竞品</h3>\n<ul>\n<li><a href=\"https://parceljs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">parcel</a> - 等 v2</li>\n<li><a href=\"https://www.snowpack.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">snowpack</a></li>\n<li><a href=\"https://github.com/vitejs/vite\" target=\"_blank\" rel=\"noopener noreferrer\">vite</a></li>\n</ul>\n<p><a href=\"https://www.rollupjs.org/guide/en/\" target=\"_blank\" rel=\"noopener noreferrer\">rollup</a> 在某些方面有缺失，不属于 <code>webpack</code> 竞品。</p>\n<p><a href=\"https://poi.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">poi</a> 属于 <code>webpack</code> 的封装，同样不属于 <code>webpack</code> 竞品。</p>\n<h3 id=\"在线配置\"> 在线配置</h3>\n<ul>\n<li><a href=\"https://createapp.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">create-app</a></li>\n</ul>\n<h2 id=\"基本概念\"> 基本概念</h2>\n<h3 id=\"模块-module\"> 模块 module</h3>\n<p>任何文件都可以被 <code>webpack</code> 解析成模块 <code>module</code>。<code>webpack</code> 本身支持解析某些文件，而 <code>webpack</code> 本身不支持解析的，需要使用工具来帮助解析。</p>\n<h3 id=\"入口-entry\"> 入口 entry</h3>\n<p><code>entry</code> 指定 <code>webpack</code> 工作的时候从哪个文件开始分析依赖，默认值是 <code>${PROJECT_DIR}/src/index.js</code>。这个文件也会被叫做入口文件或者入口模块。</p>\n<div><pre><code><span>// 使用 path 模块来指定路径</span>\n<span>const</span> path <span>=</span> <span>require</span><span>(</span><span>'path'</span><span>)</span><span>;</span>\n\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>// 指定 entry 为 ${PROJECT_DIR}/src/app.js</span>\n  entry<span>:</span> path<span>.</span><span>resolve</span><span>(</span><span>'src'</span><span>,</span> <span>'app.js'</span><span>)</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><ul>\n<li><code>path</code> 是 node 的内置模块，我们可以在 <code>webpack</code> 的配置文件里使用 <code>require</code> 语句引用这个模块。</li>\n<li><code>module.exports</code> 用于导出配置。</li>\n<li><code>path.resolve</code> 是 <code>path</code> 模块内置的方法，它能将提供的字符串参数拼接成一个绝对路径，来指定 <code>entry</code> 的值。</li>\n</ul>\n<p><code>path.join</code> 也较为常用，它和 <code>path.resolve</code> 用法、作用相似，两者之间的主要区别是 <code>path.join</code> 仅仅拼接给出的字符串然后返回一个字符串（可能无意义，取决于给出的字符串），而 <code>path.resolve</code> 会解析然后返回一个绝对路径。</p>\n<p>下面是两个对比示例。</p>\n<div><pre><code>path<span>.</span><span>join</span><span>(</span><span>'/a'</span><span>,</span> <span>'/b'</span><span>)</span><span>;</span> <span>// string /a/b</span>\npath<span>.</span><span>resolve</span><span>(</span><span>'/a'</span><span>,</span> <span>'/b'</span><span>)</span><span>;</span> <span>// string /b</span>\n\npath<span>.</span><span>join</span><span>(</span><span>\"a\"</span><span>,</span> <span>\"b1\"</span><span>,</span> <span>\"..\"</span><span>,</span> <span>\"b2\"</span><span>)</span><span>;</span> <span>// string a/b2</span>\npath<span>.</span><span>resolve</span><span>(</span><span>\"a\"</span><span>,</span> <span>\"b1\"</span><span>,</span> <span>\"..\"</span><span>,</span> <span>\"b2\"</span><span>)</span><span>;</span> <span>// string ${PROJECT_DIR}/a/b2</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id=\"输出-output\"> 输出 output</h3>\n<p><code>output</code> 可以指定 <code>webpack</code> 存放所有输出文件的基本路径 <code>output.path</code>，还有 <code>entry</code> 对应的输出文件的路径和文件名 <code>output.filename</code>。</p>\n<p><code>entry</code> 对应的输出文件默认是 <code>${PROJECT_DIR}/dist/main.js</code>。</p>\n<div><pre><code><span>// 使用 path 模块来指定路径</span>\n<span>const</span> path <span>=</span> <span>require</span><span>(</span><span>'path'</span><span>)</span><span>;</span>\n\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>// 指定 entry 是 ${PROJECT_DIR}/src/app.js</span>\n  entry<span>:</span> path<span>.</span><span>resolve</span><span>(</span><span>'src'</span><span>,</span> <span>'app.js'</span><span>)</span><span>,</span>\n  <span>// 指定 output 目录是 ${PROJECT_DIR}/dist</span>\n  <span>// 指定 entry 对应的输出文件是 ${PROJECT_DIR}/dist/bundle.js</span>\n  output<span>:</span> <span>{</span>\n    path<span>:</span> path<span>.</span><span>resolve</span><span>(</span><span>'dist'</span><span>)</span><span>,</span>\n    filename<span>:</span> <span>'bundle.js'</span><span>,</span>\n  <span>}</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>如果指定 <code>output.filename = 'js/bundle.js'</code>，那么 <code>entry</code> 对应的输出文件是 <code>${PROJECT_DIR}/dist/js/bundle.js</code>。</p>\n<h3 id=\"加载器-loader\"> 加载器 loader</h3>\n<p><code>webpack</code> 本身只能处理 <code>.js</code> 和 <code>.json</code> 文件，<code>loader</code> 增强了 <code>webpack</code> 的解析能力，使得 <code>webpack</code> 能够处理 <code>.jsx</code>，<code>.ts</code>，<code>.tsx</code>，<code>.css</code> 等文件。</p>\n<div><pre><code><span>// 使用 path 模块来指定路径</span>\n<span>const</span> path <span>=</span> <span>require</span><span>(</span><span>'path'</span><span>)</span><span>;</span>\n\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>// 指定 entry 为 ${PROJECT_DIR}/src/app.js</span>\n  entry<span>:</span> path<span>.</span><span>resolve</span><span>(</span><span>'src'</span><span>,</span> <span>'app.js'</span><span>)</span><span>,</span>\n  <span>// 指定 output 目录为 ${PROJECT_DIR}/dist</span>\n  <span>// 指定 entry 对应的输出文件为 ${PROJECT_DIR}/dist/bundle.js</span>\n  output<span>:</span> <span>{</span>\n    path<span>:</span> path<span>.</span><span>resolve</span><span>(</span><span>'dist'</span><span>)</span><span>,</span>\n    filename<span>:</span> <span>'bundle.js'</span><span>,</span>\n  <span>}</span><span>,</span>\n  module<span>:</span> <span>{</span>\n    rules<span>:</span> <span>[</span>\n      <span>{</span>\n        <span>// png 文件</span>\n        test<span>:</span> <span><span>/</span><span>\\.png$</span><span>/</span></span><span>,</span>\n        <span>// 使用 url-loader 处理</span>\n        use<span>:</span> <span>'url-loader'</span><span>,</span>\n      <span>}</span><span>,</span>\n    <span>]</span><span>,</span>\n  <span>}</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><ul>\n<li><code>module.rules</code> 数组里面的每一个元素都是处理模块的规则。</li>\n<li>每一个元素都是对象 object，有两个必需的属性。\n<ul>\n<li>一个必需的属性是 <code>test</code>，用来指定需要解析的文件，它的值往往是一个正则表达式。</li>\n<li>另一个必需的属性是 <code>use</code>，指定用来解析文件的 <code>loader</code>。</li>\n</ul>\n</li>\n</ul>\n<p>有的 <code>loader</code> 还会关联 <code>plugin</code> 或者有额外的属性供你配置，具体信息要查看对应 <code>loader</code> 的文档。</p>\n<h3 id=\"插件-plugin\"> 插件 plugin</h3>\n<p><code>plugin</code>被用来执行范围更广的任务，比如打包优化，资源管理，注入环境变量等。</p>\n<div><pre><code><span>// 使用 path 模块来指定路径</span>\n<span>const</span> path <span>=</span> <span>require</span><span>(</span><span>'path'</span><span>)</span><span>;</span>\n<span>const</span> <span>{</span> BundleAnalyzerPlugin <span>}</span> <span>=</span> <span>require</span><span>(</span><span>'webpack-bundle-analyzer'</span><span>)</span><span>;</span>\n\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>// 指定 entry 为 ${PROJECT_DIR}/src/app.js</span>\n  entry<span>:</span> path<span>.</span><span>resolve</span><span>(</span><span>'src'</span><span>,</span> <span>'app.js'</span><span>)</span><span>,</span>\n  <span>// 指定 output 目录为 ${PROJECT_DIR}/dist</span>\n  <span>// 指定 entry 对应的输出文件为 ${PROJECT_DIR}/dist/bundle.js</span>\n  output<span>:</span> <span>{</span>\n    path<span>:</span> path<span>.</span><span>resolve</span><span>(</span><span>'dist'</span><span>)</span><span>,</span>\n    filename<span>:</span> <span>'bundle.js'</span><span>,</span>\n  <span>}</span><span>,</span>\n  module<span>:</span> <span>{</span>\n    rules<span>:</span> <span>[</span>\n      <span>{</span>\n        <span>// png 文件</span>\n        test<span>:</span> <span><span>/</span><span>\\.png$</span><span>/</span></span><span>,</span>\n        <span>// 使用 url-loader 处理</span>\n        use<span>:</span> <span>'url-loader'</span><span>,</span>\n      <span>}</span><span>,</span>\n    <span>]</span><span>,</span>\n  <span>}</span><span>,</span>\n  plugins<span>:</span> <span>[</span>\n    <span>// 分析生成包大小</span>\n    <span>new</span> <span>BundleAnalyzerPlugin</span><span>(</span><span>{</span>\n      analyzerMode<span>:</span> <span>'static'</span><span>,</span>\n      defaultSizes<span>:</span> <span>'stat'</span><span>,</span>\n      openAnalyzer<span>:</span> <span>false</span><span>,</span>\n    <span>}</span><span>)</span><span>,</span>\n  <span>]</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br></div></div><h3 id=\"模式-mode\"> 模式 mode</h3>\n<p>指定不同的模式，<code>webpack</code> 会自动启用不同的优化。</p>\n<p>模式一共有三种：<code>production</code>（生产模式），<code>development</code>（开发模式），<code>none</code>（无优化模式），默认值是<code>production</code>，优化程度由高到低依次是 <code>production</code>，<code>development</code>，<code>none</code>。</p>\n<p><code>none</code> 不会启用优化，我们一般不会去用它。而 <code>production</code> 和 <code>development</code> 的默认优化往往不能满足项目要求，我们还要进一步定制。</p>\n<div><pre><code><span>// 使用 path 模块来指定路径</span>\n<span>const</span> path <span>=</span> <span>require</span><span>(</span><span>'path'</span><span>)</span><span>;</span>\n<span>const</span> BundleAnalyzerPlugin <span>=</span> <span>require</span><span>(</span><span>'webpack-bundle-analyzer'</span><span>)</span><span>.</span>BundleAnalyzerPlugin<span>;</span>\n\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>// 指定 mode 为 development，即开发模式</span>\n  mode<span>:</span> <span>'development'</span><span>,</span>\n  <span>// 指定 entry 为 ${PROJECT_DIR}/src/app.js</span>\n  entry<span>:</span> path<span>.</span><span>resolve</span><span>(</span><span>'src'</span><span>,</span> <span>'app.js'</span><span>)</span><span>,</span>\n  <span>// 指定 output 目录为 ${PROJECT_DIR}/dist</span>\n  <span>// 指定 entry 对应的输出文件为 ${PROJECT_DIR}/dist/bundle.js</span>\n  output<span>:</span> <span>{</span>\n    path<span>:</span> path<span>.</span><span>resolve</span><span>(</span><span>'dist'</span><span>)</span><span>,</span>\n    filename<span>:</span> <span>'bundle.js'</span><span>,</span>\n  <span>}</span><span>,</span>\n  module<span>:</span> <span>{</span>\n    rules<span>:</span> <span>[</span>\n      <span>{</span>\n        <span>// png 文件</span>\n        test<span>:</span> <span><span>/</span><span>\\.png$</span><span>/</span></span><span>,</span>\n        <span>// 使用 url-loader 处理</span>\n        use<span>:</span> <span>'url-loader'</span><span>,</span>\n      <span>}</span><span>,</span>\n    <span>]</span><span>,</span>\n  <span>}</span><span>,</span>\n  plugins<span>:</span> <span>[</span>\n    <span>// 分析生成包大小</span>\n    <span>new</span> <span>BundleAnalyzerPlugin</span><span>(</span><span>{</span>\n      analyzerMode<span>:</span> <span>'static'</span><span>,</span>\n      defaultSizes<span>:</span> <span>'stat'</span><span>,</span>\n      openAnalyzer<span>:</span> <span>false</span><span>,</span>\n    <span>}</span><span>)</span><span>,</span>\n  <span>]</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br></div></div><h3 id=\"module-chunk-bundle\"> module，chunk，bundle</h3>\n<p><code>bundle</code> 是最终输出的一个或多个文件，也就是最终得到的代码块，或者叫做构建包。</p>\n<p><code>chunk</code> 则是构建过程中的代码块，它是一些 <code>module</code> 的封装，也可以叫做这些 <code>module</code> 的集合。构建结束后，<code>chunk</code> 就表现为 <code>bundle</code>。但为了方便区分，一般会在一些文件的文件名里使用 <code>chunk</code>。</p>\n<p>一个 <code>entry</code> 会对应一个或者多个 <code>chunk</code>，但最终只会生成一个 <code>bundle</code>，这个 <code>bundle</code> 一般会包含多个文件。</p>\n<h2 id=\"demo01-一个简单的-demo\"> demo01 - 一个简单的 demo</h2>\n<p>前面简单地讲述了 <code>webpack</code> 的几个基本概念，下面开始实战来强化这些概念。</p>\n<p>这里再强调一次，笔记和示例是用 macOS 做示例的，请不要无脑跟做。</p>\n<p>首先安装 <a href=\"https://github.com/nvm-sh/nvm\" target=\"_blank\" rel=\"noopener noreferrer\">nvm</a>。nvm 是一个用于管理 node 版本的工具。</p>\n<div><pre><code><span>curl</span> -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh <span>|</span> <span>bash</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>如果你已经安装了 node，你也可以考虑完全卸载 node 之后安装 nvm。如果不需要频繁更换 node 版本，可以直接安装 node。</p>\n<p>安装 nvm 之后，使用 nvm 来安装 node v12。</p>\n<div><pre><code>nvm <span>install</span> <span>12</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>新建一个 <code>demo</code> 文件夹，进入该文件夹，用 <code>npm</code> 初始化，这会在当前目录下生成一个默认的 <code>package.json</code> 文件。</p>\n<div><pre><code><span>mkdir</span> demo <span># 新建一个 demo 文件夹</span>\n<span>cd</span> demo <span># 进入该文件夹</span>\n<span>npm</span> init -y <span># npm 初始化</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>根目录下新建一个 <code>.npmrc</code> 文件用来配置 <code>npm</code>，这里我们指定依赖源是国内的淘宝源，这样安装依赖的速度会更快一点。</p>\n<div><pre><code><span>registry</span><span>=</span>https://registry.npm.taobao.org/\n<span>chromedriver_cdnurl</span><span>=</span>https://npm.taobao.org/mirrors/chromedriver/\n<span>electron_builder_binaries_mirror</span><span>=</span>https://npm.taobao.org/mirrors/electron-builder-binaries/\n<span>electron_mirror</span><span>=</span>https://npm.taobao.org/mirrors/electron/\n<span>fsevents_binary_host_mirror</span><span>=</span>http://npm.taobao.org/mirrors/fsevents/\n<span>node_inspector_cdnurl</span><span>=</span>https://npm.taobao.org/mirrors/node-inspector/\n<span>phantomjs_cdnurl</span><span>=</span>https://npm.taobao.org/mirrors/phantomjs/\n<span>sass_binary_site</span><span>=</span>https://npm.taobao.org/mirrors/node-sass/\n<span>selenium_cdnurl</span><span>=</span>https://npm.taobao.org/mirrors/selenium/\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>然后安装相关依赖。</p>\n<div><pre><code><span>npm</span> i clean-webpack-plugin@~3.0.0 -D\n<span>npm</span> i copy-webpack-plugin@~6.4.0 -D\n<span>npm</span> i friendly-errors-webpack-plugin@~1.7.0 -D\n<span>npm</span> i html-webpack-plugin@~4.5.1 -D\n<span>npm</span> i webpack@~4.46.0 -D\n<span>npm</span> i webpack-cli@~4.5.0 -D\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>创建一个内容简单的 <code>${PROJECT_DIR}/src/index.js</code>。</p>\n<div><pre><code>document<span>.</span><span>write</span><span>(</span><span>'Hello webpack!'</span><span>)</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>创建一个 <code>webpack</code> 配置文件 <code>${PROJECT_DIR}/webpack.config.js</code>。不特意指定配置文件的时候，<code>webpack</code> 会默认使用这个文件作为配置文件。</p>\n<div><pre><code><span>// 使用 path 模块来指定路径</span>\n<span>const</span> path <span>=</span> <span>require</span><span>(</span><span>'path'</span><span>)</span><span>;</span>\n\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>// 指定 mode</span>\n  mode<span>:</span> <span>'production'</span><span>,</span>\n  <span>// 指定 entry</span>\n  entry<span>:</span> path<span>.</span><span>resolve</span><span>(</span><span>'src'</span><span>,</span> <span>'index.js'</span><span>)</span><span>,</span>\n  <span>// 指定 output</span>\n  output<span>:</span> <span>{</span>\n    path<span>:</span> path<span>.</span><span>resolve</span><span>(</span><span>'dist'</span><span>)</span><span>,</span>\n    filename<span>:</span> <span>'bundle.js'</span><span>,</span>\n  <span>}</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>我们再来修改 <code>package.json</code> 里面的 <code>scripts</code> 字段。这样，我们就能通过 <code>webpack-cli</code> 提供的命令调用 <code>webpack</code> 构建。</p>\n<div><pre><code><span>{</span>\n  ...<span>,</span>\n  <span>\"scripts\"</span><span>:</span> <span>{</span>\n    <span>\"build\"</span><span>:</span> <span>\"webpack\"</span>\n  <span>}</span><span>,</span>\n  ...\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>接着，就执行命令开始构建吧。</p>\n<div><pre><code><span>npm</span> run build\n</code></pre>\n<div><span>1</span><br></div></div><p>构建结束后，我们可以看到，在 <code>dist</code> 文件夹里面会出现一个 <code>bundle.js</code> 文件。但是我们还需要手动创建一个 <code>.html</code> 文件然后引用它，才能正常使用。</p>\n<p>实际开发的时候，每次构建之后都耗费时间去做这样的重复工作是难以忍受的。我们需要一些自动处理的手段，来帮我们自动生成 <code>.html</code> 文件并引用这个 <code>bundle.js</code> 文件。</p>\n<p>项目根目录新建一个 <code>public</code> 文件夹，里面放 <code>favicon.ico</code>（可以自己随便找一个，或者把你现在有的图片转成 ico 格式）和 <code>index.html</code>。</p>\n<p><code>index.html</code> 里面的内容列出在下面。我们在 L7 引用了 <code>favicon.ico</code> 作为网站图标。</p>\n<div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>\n<span><span><span>&lt;</span>html</span> <span>lang</span><span><span>=</span><span>\"</span>en<span>\"</span></span><span>></span></span>\n  <span><span><span>&lt;</span>head</span><span>></span></span>\n    <span><span><span>&lt;</span>meta</span> <span>charset</span><span><span>=</span><span>\"</span>UTF-8<span>\"</span></span> <span>/></span></span>\n    <span><span><span>&lt;</span>meta</span> <span>name</span><span><span>=</span><span>\"</span>viewport<span>\"</span></span> <span>content</span><span><span>=</span><span>\"</span>width=device-width, initial-scale=1.0<span>\"</span></span> <span>/></span></span>\n    <span><span><span>&lt;</span>meta</span> <span>http-equiv</span><span><span>=</span><span>\"</span>X-UA-Compatible<span>\"</span></span> <span>content</span><span><span>=</span><span>\"</span>IE=edge,chrome=1<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>link</span> <span>href</span><span><span>=</span><span>\"</span>favicon.ico<span>\"</span></span> <span>type</span><span><span>=</span><span>\"</span>image/x-icon<span>\"</span></span> <span>/></span></span>\n    <span><span><span>&lt;</span>title</span><span>></span></span>demo01<span><span><span>&lt;/</span>title</span><span>></span></span>\n  <span><span><span>&lt;/</span>head</span><span>></span></span>\n  <span><span><span>&lt;</span>body</span><span>></span></span><span><span><span>&lt;/</span>body</span><span>></span></span>\n<span><span><span>&lt;/</span>html</span><span>></span></span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>接着，我们在 <code>${PROJECT_DIR}/webpack.config.js</code> 里配置，让 <code>copy-webpack-plugin</code> 来处理网站图标，让 <code>html-webpack-plugin</code> 处理 <code>.html</code> 文件里的引用。</p>\n<div><pre><code><span>const</span> CopyPlugin <span>=</span> <span>require</span><span>(</span><span>'copy-webpack-plugin'</span><span>)</span><span>;</span>\n<span>const</span> HtmlPlugin <span>=</span> <span>require</span><span>(</span><span>'html-webpack-plugin'</span><span>)</span><span>;</span>\n\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>...</span>\n  <span>// 指定 entry</span>\n  entry<span>:</span> path<span>.</span><span>resolve</span><span>(</span><span>'src'</span><span>,</span> <span>'index.js'</span><span>)</span><span>,</span>\n  <span>// 指定 output</span>\n  output<span>:</span> <span>{</span>\n    path<span>:</span> path<span>.</span><span>resolve</span><span>(</span><span>'dist'</span><span>)</span><span>,</span>\n    filename<span>:</span> <span>'bundle.js'</span><span>,</span>\n  <span>}</span><span>,</span>\n  plugins<span>:</span> <span>[</span>\n    <span>// 复制 ${PROJECT_DIR}/public/favicon.ico</span>\n    <span>// 最终生成 ${PROJECT_DIR}/dist/favicon.ico</span>\n    <span>new</span> <span>CopyPlugin</span><span>(</span><span>{</span>\n      patterns<span>:</span> <span>[</span><span>{</span> <span>from</span><span>:</span> path<span>.</span><span>resolve</span><span>(</span><span>'public'</span><span>,</span> <span>'favicon.ico'</span><span>)</span> <span>}</span><span>]</span><span>,</span>\n    <span>}</span><span>)</span><span>,</span>\n    <span>// 使用 ${PROJECT_DIR}/public/index.html 作为模板</span>\n    <span>// 最终生成 ${PROJECT_DIR}/dist/index.html</span>\n    <span>new</span> <span>HtmlPlugin</span><span>(</span><span>{</span>\n      title<span>:</span> <span>'demo01'</span><span>,</span>\n      template<span>:</span> path<span>.</span><span>resolve</span><span>(</span><span>'public'</span><span>,</span> <span>'index.html'</span><span>)</span><span>,</span>\n    <span>}</span><span>)</span><span>,</span>\n  <span>]</span><span>,</span>\n  <span>...</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><ul>\n<li><code>copy-webpack-plugin</code> 会把 <code>favicon.ico</code> 复制到输出目录下（在这个例子里面，输出目录就是 <code>${PROJECT_DIR}/dist</code>）作为网站图标。</li>\n<li><code>html-webpack-plugin</code> 会使用 <code>${PROJECT_DIR}/public/index.html</code> 作为承载 <code>bundle.js</code> 和 <code>favicon.ico</code> 的模板，最终会生成 <code>${PROJECT_DIR}/dist/index.html</code>，这个文件会自动引用相关的 <code>.js</code> 文件。</li>\n</ul>\n<p>重新构建，构建结束之后，我们会发现 <code>${PROJECT_DIR}/dist</code> 里面出现了三个文件：<code>favicon.ico</code>，<code>index.html</code> 和 <code>bundle.js</code>，而 <code>index.html</code> 中还自动引用了 <code>bundle.js</code>。</p>\n<p>一切都很完美，但不能忽视的是，每次构建之前都应该删除上一次的构建包，也就是删除 <code>${PROJECT_DIR}/dist</code>。目前不删除不会有什么影响，但以后构建出来的文件越来越多，不删除可能会导致新旧构建冲突、<code>${PROJECT_DIR}/dist</code> 越来越大、<code>${PROJECT_DIR}/dist</code> 里面的文件越来越多等问题。</p>\n<p>我们可以使用 <code>clean-webpack-plugin</code> 来解决这个问题，默认地，<code>clean-webpack-plugin</code> 会根据 <code>output.path</code> 自动确认、删除上一次构建的结果。</p>\n<div><pre><code><span>const</span> <span>{</span> CleanWebpackPlugin<span>:</span> CleanPlugin <span>}</span> <span>=</span> <span>require</span><span>(</span><span>'clean-webpack-plugin'</span><span>)</span><span>;</span>\n\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>...</span>\n  plugins<span>:</span> <span>[</span>\n    <span>// 移除上一次的构建文件</span>\n    <span>new</span> <span>CleanPlugin</span><span>(</span><span>)</span><span>,</span>\n    <span>...</span>\n  <span>]</span><span>,</span>\n  <span>...</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>如果构建出现了问题，<code>webpack</code> 会输出一长串错误信息，使用 <code>friendly-errors-webpack-plugin</code> 可以让输出的错误信息更加友好。</p>\n<div><pre><code><span>const</span> FriendlyErrorsPlugin <span>=</span> <span>require</span><span>(</span><span>'friendly-errors-webpack-plugin'</span><span>)</span><span>;</span>\n\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>...</span>\n  plugins<span>:</span> <span>[</span>\n    <span>// 显示友好的错误信息</span>\n    <span>new</span> <span>FriendlyErrorsPlugin</span><span>(</span><span>)</span><span>,</span>\n    <span>...</span>\n  <span>]</span><span>,</span>\n  <span>...</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>完整的 <code>webpack.config.js</code> 代码列写在下面。</p>\n<div><pre><code><span>// 使用 path 模块来指定路径</span>\n<span>const</span> path <span>=</span> <span>require</span><span>(</span><span>'path'</span><span>)</span><span>;</span>\n<span>// 使用 plugin</span>\n<span>const</span> <span>{</span> CleanWebpackPlugin<span>:</span> CleanPlugin <span>}</span> <span>=</span> <span>require</span><span>(</span>\"clean<span>-</span>webpack<span>-</span>plugin'<span>)</span><span>;</span>\n<span>const</span> CopyPlugin <span>=</span> <span>require</span><span>(</span><span>'copy-webpack-plugin'</span><span>)</span><span>;</span>\n<span>const</span> HtmlPlugin <span>=</span> <span>require</span><span>(</span><span>'html-webpack-plugin'</span><span>)</span><span>;</span>\n<span>const</span> FriendlyErrorsPlugin <span>=</span> <span>require</span><span>(</span><span>'friendly-errors-webpack-plugin'</span><span>)</span><span>;</span>\n\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>// 指定 mode</span>\n  mode<span>:</span> <span>'production'</span><span>,</span>\n  <span>// 指定 entry</span>\n  entry<span>:</span> path<span>.</span><span>resolve</span><span>(</span><span>'src'</span><span>,</span> <span>'index.js'</span><span>)</span><span>,</span>\n  <span>// 指定 output</span>\n  output<span>:</span> <span>{</span>\n    path<span>:</span> path<span>.</span><span>resolve</span><span>(</span><span>'dist'</span><span>)</span><span>,</span>\n    filename<span>:</span> <span>'bundle.js'</span><span>,</span>\n  <span>}</span><span>,</span>\n  <span>// 指定 plugin</span>\n  plugins<span>:</span> <span>[</span>\n    <span>// 显示友好的错误信息</span>\n    <span>new</span> <span>FriendlyErrorsPlugin</span><span>(</span><span>)</span><span>,</span>\n    <span>// 移除上一次的构建文件</span>\n    <span>new</span> <span>CleanPlugin</span><span>(</span><span>)</span><span>,</span>\n    <span>// 复制 ${PROJECT_DIR}/public/favicon.ico</span>\n    <span>// 最终生成 ${PROJECT_DIR}/dist/favicon.ico</span>\n    <span>new</span> <span>CopyPlugin</span><span>(</span><span>{</span>\n      patterns<span>:</span> <span>[</span><span>{</span> <span>from</span><span>:</span> path<span>.</span><span>resolve</span><span>(</span><span>'public'</span><span>,</span> <span>'favicon.ico'</span><span>)</span> <span>}</span><span>]</span><span>,</span>\n    <span>}</span><span>)</span><span>,</span>\n    <span>// 使用 ${PROJECT_DIR}/public/index.html 作为模板</span>\n    <span>// 最终生成 ${PROJECT_DIR}/dist/index.html</span>\n    <span>new</span> <span>HtmlPlugin</span><span>(</span><span>{</span>\n      title<span>:</span> <span>'demo01'</span><span>,</span>\n      template<span>:</span> path<span>.</span><span>resolve</span><span>(</span><span>'public'</span><span>,</span> <span>'index.html'</span><span>)</span><span>,</span>\n    <span>}</span><span>)</span><span>,</span>\n  <span>]</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br></div></div><p>重新开始构建，之后可以看到简短的提示信息。下面是最终的目录结构（省略了<code>node_modules</code>）。</p>\n<div><pre><code><span>.</span>\n├── dist\n│   ├── bundle.js\n│   ├── favicon.ico\n│   └── index.html\n├── package-lock.json\n├── package.json\n├── public\n│   ├── favicon.ico\n│   └── index.html\n├── src\n│   └── index.js\n└── webpack.config.js\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>使用 <code>live server</code> 或 <code>serve</code> 来查看效果，可以看到 <code>Hello webpack!</code>。</p>\n<p>🎉恭喜，一个简单的 webpack demo 已经完成啦～</p>\n<p>参考源代码见 <a href=\"https://github.com/ModyQyW/webpack4-demos/tree/master/demo01\" target=\"_blank\" rel=\"noopener noreferrer\">modyqyw/webpack-demos/demo01</a>。</p>\n<h2 id=\"demo02-再看核心概念\"> demo02 - 再看核心概念</h2>\n<p>在这一部分，我们来稍微深入一下核心概念。</p>\n<h3 id=\"再看入口-entry\"> 再看入口 entry</h3>\n<p>一开始我们说到，<code>webpack</code> 会分析依赖生成依赖图，而分析依赖生成依赖图的起点就由 <code>entry</code> 指定。</p>\n<p><img src=\"https://ae01.alicdn.com/kf/Hc2861d3d0e2b4ad89bfab9c37be5ecbcK.jpg\" alt=\"webpack示意图\" /></p>\n<p>单页面应用 SPA 只有一个入口，也就是说，<code>entry</code> 是一个字符串 string 或一个对象 object。多页面应用 MPA 有多个入口，<code>entry</code> 只能是一个对象 object。demo01 里的配置就是一个 SPA 的配置。</p>\n<p>demo01 中 <code>entry</code> 的写法等同于下面的代码，也就是说，单入口写成字符串形式的时候，实际上会转换成对象形式，默认的 key 是 <code>main</code>。</p>\n<div><pre><code><span>const</span> path <span>=</span> <span>require</span><span>(</span><span>'path'</span><span>)</span><span>;</span>\n\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>...</span><span>,</span>\n  entry<span>:</span> <span>{</span>\n    main<span>:</span> path<span>.</span><span>resolve</span><span>(</span><span>'src'</span><span>,</span> <span>'index.js'</span><span>)</span><span>,</span>\n  <span>}</span><span>,</span>\n  <span>...</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p><code>context</code> 可能会跟 <code>entry</code> 一起使用，它可以指定 <code>entry</code> 的基本路径。对于 MPA，使用 <code>context</code> 往往能使 <code>entry</code> 更简洁。下面是一个示例。</p>\n<div><pre><code><span>const</span> path <span>=</span> <span>require</span><span>(</span><span>'path'</span><span>)</span><span>;</span>\n\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>...</span><span>,</span>\n  context<span>:</span> path<span>.</span><span>resolve</span><span>(</span><span>'src'</span><span>)</span><span>,</span>\n  entry<span>:</span> <span>'./index.js'</span><span>,</span>\n  <span>...</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>考虑到实际开发时必要的工程化，我们有必要把 <code>webpack</code> 配置相关的文件放到一个单独的文件夹内，方便修改。</p>\n<p>我们先把没有使用到 <code>context</code> 的 <code>webpack.config.js</code> 移动到 <code>${PROJECT_DIR}/config</code> 文件夹中，再指定 <code>entry</code> 的 key 为 <code>app</code>。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/config/webpack.config.js</span>\n<span>const</span> path <span>=</span> <span>require</span><span>(</span><span>'path'</span><span>)</span><span>;</span>\n\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>...</span><span>,</span>\n  entry<span>:</span> <span>{</span>\n    app<span>:</span> path<span>.</span><span>resolve</span><span>(</span><span>'src'</span><span>,</span> <span>'index.js'</span><span>)</span><span>,</span>\n  <span>}</span><span>,</span>\n  <span>...</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>移动配置文件后，就需要修改 <code>package.json</code> 里的命令，手动指定配置文件了。</p>\n<div><pre><code><span>{</span>\n  ...<span>,</span>\n  <span>\"scripts\"</span><span>:</span> <span>{</span>\n    <span>\"build\"</span><span>:</span> <span>\"webpack --config ./config/webpack.config.js\"</span>\n  <span>}</span><span>,</span>\n  ...\n<span>}</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id=\"再看输出-output\"> 再看输出 output</h3>\n<p><code>webpack</code> 构建的结果如何输出由 <code>output</code> 指定。</p>\n<p>SPA 可以直接指定 <code>output.filename</code> 和 <code>output.path</code>，像之前的示例一样，但更好的方法是使用对应的 <code>chunk</code> 的名称来给文件命名，而不是简单直接地使用固定名称。</p>\n<p><code>entry</code> 目前只会对应一个 <code>chunk</code>，而这个 <code>chunk</code> 的名称就是 <code>entry</code> 的键，也就是 <code>app</code>。</p>\n<p>我们修改一下 <code>output</code> 的配置，使得 <code>entry</code> 指定的文件构建出来之后跟随 <code>entry</code> 的 key。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/config/webpack.config.js</span>\n<span>const</span> path <span>=</span> <span>require</span><span>(</span><span>'path'</span><span>)</span><span>;</span>\n\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>...</span><span>,</span>\n  entry<span>:</span> <span>{</span>\n    app<span>:</span> path<span>.</span><span>resolve</span><span>(</span><span>'src'</span><span>,</span> <span>'index.js'</span><span>)</span><span>,</span>\n  <span>}</span><span>,</span>\n  output<span>:</span> <span>{</span>\n    path<span>:</span> path<span>.</span><span>resolve</span><span>(</span><span>'dist'</span><span>)</span><span>,</span>\n    filename<span>:</span> <span>'[name].js'</span><span>,</span>\n  <span>}</span><span>,</span>\n  <span>...</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><ul>\n<li><code>output.filename = '[name].js'</code> 表示使用对应的 <code>chunk</code> 的名称来给文件命名。</li>\n</ul>\n<h3 id=\"再看插件-plugin\"> 再看插件 plugin</h3>\n<p><code>plugin</code> 用来增强 <code>webpack</code> 功能，比如优化打包文件，管理资源，注入环境变量等等，它作用于整个构建过程。</p>\n<p>前面的例子中，我们用到了 <code>copy-webpack-plugin</code>，<code>html-webpack-plugin</code> 一些相对来说比较简单的 <code>plugin</code>。</p>\n<p>每个 <code>plugin</code> 都需要放到 <code>plugins</code> 字段数组里，顺序一般不影响，具体的配置需要去查询对应的文档。</p>\n<h3 id=\"再看加载器-loader\"> 再看加载器 loader</h3>\n<p>因为 <code>webpack</code> 默认只支持解析 <code>.js</code> 和 <code>.json</code> 文件，所以项目中使用到的其他文件，比如图片文件、字体文件、样式文件等，就只能使用 <code>loader</code> 解析。</p>\n<p>下面会关注一些常用的 <code>loader</code>。</p>\n<h4 id=\"js-语法和特性相关的-loader\"> js 语法和特性相关的 loader</h4>\n<p>因为 <code>webpack</code> 本身并不支持解析 es6+ 语法，所以要使用 es6+ 语法，我们就需要使用 <code>babel</code> 和 <code>babel-loader</code> 来解析。</p>\n<p><code>babel</code> 的一个主要作用就是把新语法转换成旧语法，也就是我们常说的语法转换，比如把箭头函数转换成 <code>function</code>。<code>babel-loader</code> 使得 <code>webpack</code> 在构建过程中能使用 <code>babel</code> 处理相关的文件。</p>\n<p>首先还是要安装相关的依赖。</p>\n<div><pre><code><span>npm</span> i @babel/runtime@~7.12.13\n<span>npm</span> i core-js@~3.8.3\n<span>npm</span> i react@~17.0.1\n<span>npm</span> i react-dom@~17.0.1\n<span>npm</span> i regenerator-runtime@~0.13.7\n<span>npm</span> i @babel/cli@~7.12.13 -D\n<span>npm</span> i @babel/core@~7.12.13 -D\n<span>npm</span> i @babel/plugin-transform-runtime@~7.12.15 -D\n<span>npm</span> i @babel/preset-env@~7.12.13 -D\n<span>npm</span> i @babel/preset-react@~7.12.13 -D\n<span>npm</span> i babel-loader@~8.2.2 -D\n<span>npm</span> i @types/react@~17.0.1 -D\n<span>npm</span> i @types/react-dom@~17.0.0 -D\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>然后修改 <code>webpack</code> 配置。不要忘记，对于 <code>webpack</code> 来说，所有文件都可以看成一个模块，所以需要在模块对应的字段下写配置。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/config/webpack.config.js</span>\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>...</span>\n  <span>// 指定 loader</span>\n  module<span>:</span> <span>{</span>\n    rules<span>:</span> <span>[</span>\n      <span>...</span><span>,</span>\n      <span>{</span>\n        <span>// js/jsx 文件</span>\n        test<span>:</span> <span><span>/</span><span>\\.jsx?$</span><span>/</span></span><span>,</span>\n        <span>// 只处理 src 里面的 js/jsx 文件</span>\n        include<span>:</span> <span><span>/</span><span>src</span><span>/</span></span><span>,</span>\n        <span>// 使用 babel-loader 处理</span>\n        use<span>:</span> <span>[</span><span>{</span> loader<span>:</span> <span>'babel-loader'</span> <span>}</span><span>]</span><span>,</span>\n      <span>}</span><span>,</span>\n      <span>...</span>\n    <span>]</span><span>,</span>\n  <span>}</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><ul>\n<li><code>test: /\\.jsx?$/</code> 表示只处理 <code>.js</code> 和 <code>.jsx</code> 文件。</li>\n<li><code>include: /src/</code> 表示只处理 <code>src</code> 里面的 <code>.js</code> 和 <code>.jsx</code> 文件，这能够有效地提高效率，同时避免可能存在的二次编译问题。一般来说，<code>node_modules</code> 里面的 <code>.js</code> 和 <code>.jsx</code> 文件都会直接支持 es5，所以不需要处理。</li>\n<li>你也可以使用 <code>exclude</code> 来指定不需要处理的文件，它的优先级比 <code>include</code> 更高。</li>\n</ul>\n<p>修改完 <code>webpack</code> 配置后，我们还需要配置 <code>babel</code>，让它根据我们的需求转换语法。我们创建 <code>${PROJECT_DIR}/babel.config.json</code> 作为 <code>babel</code> 的配置文件。</p>\n<p>要支持 es6+ 语法非常简单，只需要直接使用的 <code>@babel/preset-env</code>。</p>\n<div><pre><code><span>{</span>\n  <span>\"presets\"</span><span>:</span> <span>[</span><span>\"@babel/preset-env\"</span><span>]</span>\n<span>}</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>但 <code>@babel/preset-env</code> 默认的配置往往不能准确满足项目需求。一个比较常见的项目需求是支持特定的浏览器和特定的浏览器版本，比如支持 IE 11。</p>\n<p>这个时候，我们就需要向 <code>@babel/preset-env</code> 说明目标浏览器，也就是语法转换后的代码能够跑在什么浏览器上。</p>\n<p>我们可以用 <code>${PROJECT_DIR}/.browserslistrc</code> 文件来说明目标浏览器。<code>.browserslistrc</code> 文件是一个特殊的依赖于 <code>browserslist</code> 的文件，它的内容说明了项目的目标浏览器，会被 <code>@babel/preset-env</code> 读取并使用。</p>\n<p>我们为 <code>${PROJECT_DIR}/.browserslistrc</code> 添加以下内容。</p>\n<div><pre><code><span>></span> <span>0.2</span>%\nlast <span>3</span> versions\nnot dead\nchrome <span>></span><span>=</span> <span>70</span>\nfirefox <span>></span><span>=</span> <span>68</span>\nsafari <span>></span><span>=</span> <span>13</span>\nie <span>></span><span>=</span> <span>11</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><ul>\n<li><code>&gt; 0.2%</code> 表示需要支持使用率超过 0.2% 的浏览器。</li>\n<li><code>last 3 versions</code> 表示需要支持浏览器的最近 3 个版本。</li>\n<li><code>not dead</code> 表示浏览器在最近 24 个月内还得到过官方的支持。</li>\n<li><code>chrome &gt;= 70</code> 表示 chrome 的版本需要不小于 70。</li>\n<li><code>firefox &gt;= 68</code> 表示 firefox 的版本需要不小于 68。</li>\n<li><code>safari &gt;= 13</code> 表示 safari 的版本需要不小于 13。</li>\n<li><code>ie &gt;= 11</code> 表示 ie 的版本需要不小于 11。</li>\n</ul>\n<p>上面的条件取并集，就是需要支持的浏览器范围。</p>\n<p>说明目标浏览器之后，<code>babel</code> 在转换语法的时候会更加精准。它会把目标浏览器不支持的 es6+ 语法转换成 es5 语法，同时保留目标浏览器支持的 es6+ 语法。</p>\n<p>但是如果转换后的代码中存在浏览器不支持的特性，比如 <code>Promise</code>，那该怎么办呢？这个时候，<code>babel</code> 的另一个作用——自动补齐特性——就很好地解决了这个问题。</p>\n<p>polyfill 指的是能够提供一些浏览器本身没有的新特性的 js 代码包。我们可以配置 <code>babel</code> 自动引入 polyfill 来自动补齐目标浏览器的特性。</p>\n<p><code>@babel/preset-env</code> 默认只会转换语法，我们需要手动配置来启用自动补全特性的功能。</p>\n<div><pre><code><span>{</span>\n  <span>\"presets\"</span><span>:</span> <span>[</span>\n    <span>[</span>\n      <span>\"@babel/preset-env\"</span><span>,</span>\n      <span>{</span>\n        <span>\"useBuiltIns\"</span><span>:</span> <span>\"usage\"</span><span>,</span>\n        <span>\"corejs\"</span><span>:</span> <span>{</span> <span>\"version\"</span><span>:</span> <span>3</span><span>,</span> <span>\"proposals\"</span><span>:</span> <span>true</span> <span>}</span>\n      <span>}</span>\n    <span>]</span>\n  <span>]</span>\n<span>}</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><ul>\n<li><code>useBuiltIns</code> 指定 <code>@babel/preset-env</code> 怎么处理 polyfill。\n<ul>\n<li>默认地，<code>useBuiltIns</code> 的值是 <code>false</code>，也就是不处理 polyfill。</li>\n<li><code>useBuiltIns</code> 可以指定成 <code>entry</code>，这时候我们需要手动地在项目入口引入 <code>core-js</code> 和 <code>regenerator-runtime</code>，这种情况较为少见。</li>\n<li>指定成 <code>usage</code> 是一般情况下更好的选择，这时候我们无需手动引入，<code>babel/preset-env</code> 会为我们根据目标浏览器做相关的引入。</li>\n</ul>\n</li>\n<li><code>core-js</code> 指定 <code>@babel/preset-env</code> 使用什么版本的 <code>core-js</code>，只有 <code>useBuiltIns</code> 的值是 <code>entry</code> 或 <code>usage</code> 的时候起作用。\n<ul>\n<li>默认地，<code>core-js</code> 的值是 2，表示使用 <code>core-js</code> v2。</li>\n<li>指定成 3 是更好的选择，因为 <code>core-js</code> v3 提供了更多的 polyfill，同时减少了全局污染。</li>\n<li>只指定版本，就只会引入稳定的特性。要引入提案特性，可以指定 <code>&quot;proposals&quot;: true</code>，这样就可以使用 <code>core-js</code> v3 已经支持的提案（一般已经足够稳定）。</li>\n</ul>\n</li>\n</ul>\n<p>这时候，<code>babel</code> 会为我们自动引入 <code>core-js</code> v3 和 <code>regenerator-runtime</code> 中和项目代码关联的部分，自动补全浏览器特性。</p>\n<p>但使用这样的配置构建出来的代码还不能投入到生产环境中。自动补全浏览器特性之后可能会使得每个文件头部都增加了相同的代码，比如多个文件都使用了 <code>Promise</code>，转译之后就会在这些文件的头部都引入相同的 <code>Promise</code> 相关的 polyfill。这些重复的代码会影响最终构建包的体积，在实际开发中是难以接受的。</p>\n<p>我们可以使用 <code>@babel/plugin-transform-runtime</code> 来抽离这些重复的 polyfill 代码，把它们放到一起，进一步压缩最终构建包的体积。代码里面用到对应功能的时候，会自动引入对应的 polyfill。</p>\n<div><pre><code><span>{</span>\n  <span>\"presets\"</span><span>:</span> <span>[</span>\n    <span>[</span>\n      <span>\"@babel/preset-env\"</span><span>,</span>\n      <span>{</span>\n        <span>\"useBuiltIns\"</span><span>:</span> <span>\"usage\"</span><span>,</span>\n        <span>\"corejs\"</span><span>:</span> <span>{</span> <span>\"version\"</span><span>:</span> <span>3</span><span>,</span> <span>\"proposals\"</span><span>:</span> <span>true</span> <span>}</span>\n      <span>}</span>\n    <span>]</span>\n  <span>]</span><span>,</span>\n  <span>\"plugins\"</span><span>:</span> <span>[</span><span>\"@babel/plugin-transform-runtime\"</span><span>]</span>\n<span>}</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>除了 es6+ 的语法，我们还想支持 <code>react</code> 语法。我们也可以用 <code>babel</code> 来解析 <code>react</code> 代码，只需要根据 <code>@babel/preset-react</code> 的文档配置就可以了。</p>\n<div><pre><code><span>{</span>\n  <span>\"presets\"</span><span>:</span> <span>[</span>\n    <span>[</span>\n      <span>\"@babel/preset-env\"</span><span>,</span>\n      <span>{</span>\n        <span>\"useBuiltIns\"</span><span>:</span> <span>\"usage\"</span><span>,</span>\n        <span>\"corejs\"</span><span>:</span> <span>{</span> <span>\"version\"</span><span>:</span> <span>3</span><span>,</span> <span>\"proposals\"</span><span>:</span> <span>true</span> <span>}</span>\n      <span>}</span>\n    <span>]</span><span>,</span>\n    <span>\"@babel/preset-react\"</span>\n  <span>]</span><span>,</span>\n  <span>\"env\"</span><span>:</span> <span>{</span>\n    <span>\"development\"</span><span>:</span> <span>{</span>\n      <span>\"presets\"</span><span>:</span> <span>[</span><span>[</span><span>\"@babel/preset-react\"</span><span>,</span> <span>{</span> <span>\"development\"</span><span>:</span> <span>true</span> <span>}</span><span>]</span><span>]</span>\n    <span>}</span>\n  <span>}</span><span>,</span>\n  <span>\"plugins\"</span><span>:</span> <span>[</span><span>\"@babel/plugin-transform-runtime\"</span><span>]</span>\n<span>}</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>之后可以修改 <code>${PROJECT_DIR}/src/index.js</code>。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/src/index.js</span>\n<span>import</span> React <span>from</span> <span>'react'</span><span>;</span>\n<span>import</span> ReactDOM <span>from</span> <span>'react-dom'</span><span>;</span>\n<span>import</span> App <span>from</span> <span>'./App.jsx'</span><span>;</span>\n\nReactDOM<span>.</span><span>render</span><span>(</span>\n  <span>&lt;</span>React<span>.</span>StrictMode<span>></span>\n    <span>&lt;</span>App <span>/</span><span>></span>\n  <span>&lt;</span><span>/</span>React<span>.</span>StrictMode<span>></span><span>,</span>\n  document<span>.</span><span>getElementById</span><span>(</span><span>'root'</span><span>)</span><span>,</span>\n<span>)</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>如果不想写 <code>.jsx</code> 等后缀，我们可以手动设置 <code>resolve.extensions</code>。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/config/webpack.config.js</span>\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>...</span>\n  resolve<span>:</span> <span>{</span>\n    <span>// 不用写 .js，.jsx，.ts 和 .tsx</span>\n    extensions<span>:</span> <span>[</span><span>'.js'</span><span>,</span> <span>'.jsx'</span><span>,</span> <span>'.ts'</span><span>,</span> <span>'.tsx'</span><span>]</span><span>,</span>\n  <span>}</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>我们在 <code>App.jsx</code> 里使用 <code>react</code>，<code>react-dom</code>，<code>Promise</code> 以测试我们的配置。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/src/App.jsx</span>\n<span>import</span> React<span>,</span> <span>{</span> useEffect <span>}</span> <span>from</span> <span>'react'</span><span>;</span>\n<span>import</span> iconWebpack <span>from</span> <span>'./assets/webpack.png'</span><span>;</span>\n\n<span>const</span> <span>App</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n  <span>useEffect</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n    <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve</span><span>)</span> <span>=></span> <span>{</span>\n      <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n        document<span>.</span>title <span>=</span> <span>'Hello World!'</span><span>;</span>\n        <span>resolve</span><span>(</span><span>)</span><span>;</span>\n      <span>}</span><span>,</span> <span>5000</span><span>)</span><span>;</span>\n    <span>}</span><span>)</span><span>;</span>\n  <span>}</span><span>,</span> <span>[</span><span>]</span><span>)</span><span>;</span>\n\n  <span>return</span> <span>(</span>\n    <span>&lt;</span>div<span>></span>\n      <span>&lt;</span>span<span>></span>Hello Webpack<span>!</span><span>&lt;</span><span>/</span>span<span>></span>\n    <span>&lt;</span><span>/</span>div<span>></span>\n  <span>)</span><span>;</span>\n<span>}</span><span>;</span>\n\n<span>export</span> <span>default</span> App<span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p>之后构建并运行测试。如果一切正常，可以看到页面上会出现 <code>Hello Webpack!</code> 的文字，5 秒左右标签页的标题被修改成 <code>Hello World!</code>。ie 11 本身不支持 <code>Promise</code>，但在 ie 11 上测试也能有这样的效果，说明 <code>Promise</code> 已经被加入进去了。</p>\n<p>已经支持了特定特性的浏览器不会再度引入对应的 polyfill。</p>\n<p><code>@babel/plugin-transform-runtime</code> 也可以和 <code>core-js</code> 搭配使用，你可以自行尝试。</p>\n<h4 id=\"样式相关的-loader\"> 样式相关的 loader</h4>\n<p>由于 <code>webpack</code> 本身并不支持解析 <code>.css</code>，<code>.sass</code> 和 <code>.scss</code> 文件，所以我们需要用 <code>loader</code> 去解析这些文件。要解析 <code>.less</code> 和 <code>.styl</code> 文件，相对应的 <code>loader</code> 的配置大同小异，参考对应文档摸索就可以了，这里不再演示。</p>\n<p>首先还是要安装相关的依赖。</p>\n<div><pre><code><span>npm</span> i zent@~9.3.0\n<span>npm</span> i babel-plugin-zent@~2.2.2 -D\n<span>npm</span> i style-loader@~2.0.0 -D\n<span>npm</span> i css-loader@~5.0.2 -D\n<span>npm</span> i sass@~1.32.6 -D\n<span>npm</span> i sass-loader@~10.1.1 -D\n<span>npm</span> i resolve-url-loader@~3.1.2 -D\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p><code>css-loader</code> 能够把 <code>.css</code> 文件解析成 css 模块，而 <code>style-loader</code> 能够将 css 模块嵌入到文件中。</p>\n<p>我们先在 <code>${PROJECT_DIR}/src/index.js</code> 引入 <code>.css</code> 文件。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/src/index.js</span>\n<span>import</span> React <span>from</span> <span>'react'</span><span>;</span>\n<span>import</span> ReactDOM <span>from</span> <span>'react-dom'</span><span>;</span>\n<span>import</span> App <span>from</span> <span>'./App'</span><span>;</span>\n<span>import</span> <span>'./index.css'</span><span>;</span>\n\nReactDOM<span>.</span><span>render</span><span>(</span>\n  <span>&lt;</span>React<span>.</span>StrictMode<span>></span>\n    <span>&lt;</span>App <span>/</span><span>></span>\n  <span>&lt;</span><span>/</span>React<span>.</span>StrictMode<span>></span><span>,</span>\n  document<span>.</span><span>getElementById</span><span>(</span><span>'root'</span><span>)</span><span>,</span>\n<span>)</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>然后创建 <code>${PROJECT_DIR}/src/index.css</code>，设置一些样式。</p>\n<div><pre><code><span>/* ${PROJECT_DIR}/src/index.css */</span>\n<span>*,\n::before,\n::after</span> <span>{</span>\n  <span>box-sizing</span><span>:</span> border-box<span>;</span>\n  <span>padding</span><span>:</span> 0<span>;</span>\n  <span>margin</span><span>:</span> 0<span>;</span>\n<span>}</span>\n\n<span>html,\nbody</span> <span>{</span>\n  <span>min-width</span><span>:</span> 1280px<span>;</span>\n  <span>min-height</span><span>:</span> 100%<span>;</span>\n  <span>font-family</span><span>:</span> -apple-system<span>,</span> BlinkMacSystemFont<span>,</span> <span>\"Segoe UI\"</span><span>,</span> Roboto<span>,</span> <span>\"Helvetica Neue\"</span><span>,</span> Helvetica<span>,</span> <span>\"PingFang SC\"</span><span>,</span> <span>\"Hiragino Sans GB\"</span><span>,</span> <span>\"Microsoft YaHei\"</span><span>,</span> <span>\"微软雅黑\"</span><span>,</span> Arial<span>,</span> <span>\"Noto Sans\"</span><span>,</span> sans-serif<span>,</span> <span>\"Apple Color Emoji\"</span><span>,</span> <span>\"Segoe UI Emoji\"</span><span>,</span> <span>\"Segoe UI Symbol\"</span><span>,</span> <span>\"Noto Color Emoji\"</span><span>;</span>\n  <span>-webkit-font-smoothing</span><span>:</span> antialiased<span>;</span>\n  <span>-moz-osx-font-smoothing</span><span>:</span> grayscale<span>;</span>\n<span>}</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>最后，我们修改一下 <code>webpack</code> 配置，增加对 <code>.css</code> 文件的解析。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/config/webpack.config.js</span>\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>...</span><span>,</span>\n  <span>// 指定 loader</span>\n  module<span>:</span> <span>{</span>\n    rules<span>:</span> <span>[</span>\n      <span>...</span><span>,</span>\n      <span>{</span>\n        <span>// css 文件</span>\n        test<span>:</span> <span><span>/</span><span>\\.css$</span><span>/</span></span><span>,</span>\n        <span>// 先使用 css-loader 再使用 style-loader 处理</span>\n        use<span>:</span> <span>[</span><span>{</span> loader<span>:</span> <span>'style-loader'</span> <span>}</span><span>,</span> <span>{</span> loader<span>:</span> <span>'css-loader'</span> <span>}</span><span>]</span><span>,</span>\n      <span>}</span><span>,</span>\n      <span>...</span>\n    <span>]</span><span>,</span>\n  <span>}</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><ul>\n<li><code>loader</code> 的调用顺序是从后往前的。上面的示例里，会先调用 <code>css-loader</code> 处理 <code>.css</code> 文件，再调用 <code>style-loader</code> 做进一步处理。</li>\n</ul>\n<p>重新构建并运行，我们可以在浏览器开发者工具中看到，样式已经作为 <code>&lt;style&gt;</code> 被插入到 <code>&lt;head&gt;</code> 标签里面。</p>\n<p>处理 <code>.sass</code> 和 <code>.scss</code> 文件有少许的不同。<code>sass-loader</code> 会把 <code>.sass</code> 和 <code>.scss</code> 文件转换成 <code>.css</code> 文件，而 <code>.css</code> 文件的处理步骤就跟上面一致。所以，我们只需要复制粘贴，然后配置 <code>sass-loader</code> 就可以了。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/config/webpack.config.js</span>\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>...</span><span>,</span>\n  <span>// 指定 loader</span>\n  module<span>:</span> <span>{</span>\n    rules<span>:</span> <span>[</span>\n      <span>...</span><span>,</span>\n      <span>{</span>\n        <span>// css 文件</span>\n        test<span>:</span> <span><span>/</span><span>\\.css$</span><span>/</span></span><span>,</span>\n        <span>// 先使用 css-loader 再使用 style-loader 处理</span>\n        use<span>:</span> <span>[</span><span>{</span> loader<span>:</span> <span>'style-loader'</span> <span>}</span><span>,</span> <span>{</span> loader<span>:</span> <span>'css-loader'</span> <span>}</span><span>]</span><span>,</span>\n      <span>}</span><span>,</span>\n      <span>{</span>\n        <span>// sass/scss 文件</span>\n        test<span>:</span> <span><span>/</span><span>\\.s[ac]ss$</span><span>/</span></span><span>,</span>\n        <span>// 依次使用 sass-loader，css-loader 和 style-loader 处理</span>\n        use<span>:</span> <span>[</span>\n          <span>{</span> loader<span>:</span> <span>'style-loader'</span> <span>}</span><span>,</span>\n          <span>{</span> loader<span>:</span> <span>'css-loader'</span> <span>}</span><span>,</span>\n          <span>{</span> loader<span>:</span> <span>'sass-loader'</span> <span>}</span><span>,</span>\n        <span>]</span><span>,</span>\n      <span>}</span><span>,</span>\n      <span>...</span><span>,</span>\n    <span>]</span><span>,</span>\n  <span>}</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><p><code>sass-loader</code> 会处理 <code>@import</code> 语句，所以我们还需要配置 <code>css-loader</code>，说明在 <code>css-loader</code> 之前还有 1 个 <code>loader</code> 会处理 <code>@import</code> 语句。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/config/webpack.config.js</span>\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>...</span><span>,</span>\n  <span>// 指定 loader</span>\n  module<span>:</span> <span>{</span>\n    rules<span>:</span> <span>[</span>\n      <span>...</span><span>,</span>\n      <span>{</span>\n        <span>// css 文件</span>\n        test<span>:</span> <span><span>/</span><span>\\.css$</span><span>/</span></span><span>,</span>\n        <span>// 先使用 css-loader 再使用 style-loader 处理</span>\n        use<span>:</span> <span>[</span><span>{</span> loader<span>:</span> <span>'style-loader'</span> <span>}</span><span>,</span> <span>{</span> loader<span>:</span> <span>'css-loader'</span> <span>}</span><span>]</span><span>,</span>\n      <span>}</span><span>,</span>\n      <span>{</span>\n        <span>// sass/scss 文件</span>\n        test<span>:</span> <span><span>/</span><span>\\.s[ac]ss$</span><span>/</span></span><span>,</span>\n        <span>// 依次使用 sass-loader，css-loader 和 style-loader 处理</span>\n        use<span>:</span> <span>[</span>\n          <span>{</span> loader<span>:</span> <span>'style-loader'</span> <span>}</span><span>,</span>\n          <span>{</span>\n            loader<span>:</span> <span>'css-loader'</span><span>,</span>\n            options<span>:</span> <span>{</span>\n              importLoaders<span>:</span> <span>1</span><span>,</span>\n            <span>}</span><span>,</span>\n          <span>}</span><span>,</span>\n          <span>{</span> loader<span>:</span> <span>'sass-loader'</span> <span>}</span><span>,</span>\n        <span>]</span><span>,</span>\n      <span>}</span><span>,</span>\n      <span>...</span><span>,</span>\n    <span>]</span><span>,</span>\n  <span>}</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br></div></div><p>sass/scss 没有 url 重写的功能，所以我们还需要加入 <code>resolve-url-loader</code>，避免实际使用的时候出现 url 指向不正确的问题。<code>resolve-url-loader</code> 不会处理 <code>@import</code> 语句，所以不用再修改 <code>css-loader</code> 的 <code>importLoaders</code> 配置项。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/config/webpack.config.js</span>\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>...</span><span>,</span>\n  <span>// 指定 loader</span>\n  module<span>:</span> <span>{</span>\n    rules<span>:</span> <span>[</span>\n      <span>...</span><span>,</span>\n      <span>{</span>\n        <span>// css 文件</span>\n        test<span>:</span> <span><span>/</span><span>\\.css$</span><span>/</span></span><span>,</span>\n        <span>// 先使用 css-loader 再使用 style-loader 处理</span>\n        use<span>:</span> <span>[</span><span>{</span> loader<span>:</span> <span>'style-loader'</span> <span>}</span><span>,</span> <span>{</span> loader<span>:</span> <span>'css-loader'</span> <span>}</span><span>]</span><span>,</span>\n      <span>}</span><span>,</span>\n      <span>{</span>\n        <span>// sass/scss 文件</span>\n        test<span>:</span> <span><span>/</span><span>\\.s[ac]ss$</span><span>/</span></span><span>,</span>\n        <span>// 依次使用 sass-loader，resolve-url-loader，css-loader 和 style-loader 处理</span>\n        use<span>:</span> <span>[</span>\n          <span>{</span> loader<span>:</span> <span>'style-loader'</span> <span>}</span><span>,</span>\n          <span>{</span>\n            loader<span>:</span> <span>'css-loader'</span><span>,</span>\n            options<span>:</span> <span>{</span>\n              importLoaders<span>:</span> <span>1</span><span>,</span>\n            <span>}</span><span>,</span>\n          <span>}</span><span>,</span>\n          <span>{</span> loader<span>:</span> <span>'resolve-url-loader'</span> <span>}</span><span>,</span>\n          <span>{</span> loader<span>:</span> <span>'sass-loader'</span> <span>}</span><span>,</span>\n        <span>]</span><span>,</span>\n      <span>}</span><span>,</span>\n      <span>...</span><span>,</span>\n    <span>]</span><span>,</span>\n  <span>}</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><p>我们把 <code>index.css</code> 重命名为 <code>index.scss</code>，修改 <code>${PROJECT_DIR}/src/index.js</code> 里面的引入。重新构建、测试，一切正常。</p>\n<p>我们再来试着添加并使用 <code>zent</code> 这个组件库。我们修改 <code>${PROJECT_DIR}/src/App.jsx</code>，加入栅格系统和带图标的按钮。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/src/App.jsx</span>\n<span>import</span> React<span>,</span> <span>{</span> useEffect <span>}</span> <span>from</span> <span>'react'</span><span>;</span>\n<span>import</span> <span>{</span>\n  LayoutRow <span>as</span> Row<span>,</span>\n  LayoutCol <span>as</span> Col<span>,</span>\n  LayoutGrid <span>as</span> Grid<span>,</span>\n  Button<span>,</span>\n  Icon<span>,</span>\n<span>}</span> <span>from</span> <span>'zent'</span><span>;</span>\n\n<span>const</span> <span>App</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n  <span>useEffect</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n    <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve</span><span>)</span> <span>=></span> <span>{</span>\n      <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n        document<span>.</span>title <span>=</span> <span>'Hello World!'</span><span>;</span>\n        <span>resolve</span><span>(</span><span>)</span><span>;</span>\n      <span>}</span><span>,</span> <span>5000</span><span>)</span><span>;</span>\n    <span>}</span><span>)</span><span>;</span>\n  <span>}</span><span>,</span> <span>[</span><span>]</span><span>)</span><span>;</span>\n\n  <span>return</span> <span>(</span>\n    <span>&lt;</span>Grid<span>></span>\n      <span>&lt;</span>Row<span>></span>\n        <span>&lt;</span>Col span<span>=</span><span>{</span><span>24</span><span>}</span><span>></span>\n          <span>&lt;</span>Button type<span>=</span><span>\"primary\"</span><span>></span>\n            <span>&lt;</span>Icon type<span>=</span><span>\"youzan\"</span> <span>/</span><span>></span>\n            Hello Zent<span>!</span>\n          <span>&lt;</span><span>/</span>Button<span>></span>\n        <span>&lt;</span><span>/</span>Col<span>></span>\n      <span>&lt;</span><span>/</span>Row<span>></span>\n    <span>&lt;</span><span>/</span>Grid<span>></span>\n  <span>)</span><span>;</span>\n<span>}</span><span>;</span>\n\n<span>export</span> <span>default</span> App<span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br></div></div><p>然后修改 <code>${PROJECT_DIR}/babel.config.json</code>，根据 <code>babel-plugin-zent</code> 说明加入按需加载的优化。</p>\n<div><pre><code><span>{</span>\n  ...<span>,</span>\n  <span>\"plugins\"</span><span>:</span> <span>[</span>\n    <span>\"@babel/plugin-transform-runtime\"</span><span>,</span>\n    <span>[</span>\n      <span>\"zent\"</span><span>,</span>\n      <span>{</span>\n        <span>\"libraryName\"</span><span>:</span> <span>\"zent\"</span><span>,</span>\n        <span>\"noModuleRewrite\"</span><span>:</span> <span>false</span><span>,</span>\n        <span>\"automaticStyleImport\"</span><span>:</span> <span>true</span><span>,</span>\n        <span>\"useRawStyle\"</span><span>:</span> <span>true</span>\n      <span>}</span>\n    <span>]</span>\n  <span>]</span>\n<span>}</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>重新构建、测试，可以看到一个蓝色的按钮，按钮内左边是有赞的图标，文字是 <code>Hello Zent</code>。</p>\n<p>但仅仅是解析 <code>.css</code>，<code>.sass</code> 和 <code>scss</code> 还远远不能达到实际的需求，我们往往会需要使用 css 新特性，或者压缩 css 代码，又或者为 css 属性添加浏览器前缀。这时候我们就需要使用 <code>postcss</code> 和 <code>postcss-loader</code>，不少人把 <code>postcss</code> 叫做 css 界的 <code>babel</code>。</p>\n<div><pre><code><span>npm</span> i postcss@~8.2.5 -D\n<span>npm</span> i postcss-loader@~4.2.0 -D\n<span>npm</span> i autoprefixer@~10.2.4 -D\n<span>npm</span> i postcss-preset-env@~6.7.0 -D\n<span>npm</span> i cssnano@~4.1.10 -D\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>在 <code>webpack</code> 配置文件里使用 <code>postcss-loader</code>。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/config/webpack.config.js</span>\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>...</span><span>,</span>\n  <span>// 指定 loader</span>\n  module<span>:</span> <span>{</span>\n    rules<span>:</span> <span>[</span>\n      <span>...</span><span>,</span>\n      <span>{</span>\n        <span>// css 文件</span>\n        test<span>:</span> <span><span>/</span><span>\\.css$</span><span>/</span></span><span>,</span>\n        <span>// 依次使用 postcss-loader，css-loader，style-loader 处理</span>\n        use<span>:</span> <span>[</span>\n          <span>{</span> loader<span>:</span> <span>'style-loader'</span> <span>}</span><span>,</span>\n          <span>{</span>\n            loader<span>:</span> <span>'css-loader'</span><span>,</span>\n            options<span>:</span> <span>{</span>\n              importLoaders<span>:</span> <span>1</span><span>,</span>\n            <span>}</span><span>,</span>\n          <span>}</span><span>,</span>\n          <span>{</span> loader<span>:</span> <span>'postcss-loader'</span> <span>}</span><span>,</span>\n        <span>]</span><span>,</span>\n      <span>}</span><span>,</span>\n      <span>{</span>\n        <span>// sass/scss 文件</span>\n        test<span>:</span> <span><span>/</span><span>\\.s[ac]ss$</span><span>/</span></span><span>,</span>\n        <span>// 依次使用 sass-loader，resolve-url-loader，postcss-loader，css-loader，style-loader 处理</span>\n        use<span>:</span> <span>[</span>\n          <span>{</span> loader<span>:</span> <span>'style-loader'</span> <span>}</span><span>,</span>\n          <span>{</span>\n            loader<span>:</span> <span>'css-loader'</span><span>,</span>\n            options<span>:</span> <span>{</span>\n              importLoaders<span>:</span> <span>2</span><span>,</span>\n            <span>}</span><span>,</span>\n          <span>}</span><span>,</span>\n          <span>{</span> loader<span>:</span> <span>'postcss-loader'</span> <span>}</span><span>,</span>\n          <span>{</span> loader<span>:</span> <span>'resolve-url-loader'</span> <span>}</span><span>,</span>\n          <span>{</span> loader<span>:</span> <span>'sass-loader'</span> <span>}</span><span>,</span>\n        <span>]</span><span>,</span>\n      <span>}</span><span>,</span>\n      <span>...</span><span>,</span>\n    <span>]</span><span>,</span>\n  <span>}</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br></div></div><ul>\n<li><code>postcss-loader</code> 会处理 <code>@import</code> 语句，注意修改 <code>css-loader</code> 的 <code>importLoaders</code> 配置项。</li>\n</ul>\n<p>创建一个 <code>${PROJECT_DIR}/postcss.config.js</code> 文件作为 <code>postcss</code> 的配置文件。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/postcss.config.js</span>\nmodule<span>.</span>exports <span>=</span> <span>{</span><span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>空文件等同于没有配置 <code>postcss</code>。要让 <code>postcss</code> 处理 css，就需要使用插件。</p>\n<p>浏览器厂商们有时会给实验性的或者非标准的 css 属性添加前缀，这样就可以让开发者进行试验，同时也不会使得标准化之后现有代码被破坏。</p>\n<p>因为存在浏览器厂商自实现某些实验性的属性、停止更新浏览器导致没有浏览器跟随标准等情况，所以为 css 属性添加特定浏览器的前缀也带有了 polyfill 的意味。</p>\n<p>手动添加前缀是相当麻烦的一件事情，使用 <code>autoprefixer</code> 插件可以让 <code>postcss</code> 自动为我们补全浏览器的样式前缀。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/postcss.config.js</span>\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  plugins<span>:</span> <span>[</span>\n    <span>require</span><span>(</span><span>'autoprefixer'</span><span>)</span><span>,</span>\n  <span>]</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>无需额外的配置，<code>autoprefixer</code> 会自动寻找目标浏览器的说明，也就是 <code>${PROJECT_DIR}/.browserslistrc</code>，并且根据目标浏览器自动地添加前缀。</p>\n<p>而要处理某些 css 的新语法和新特性，我们就需要用到另外一个插件 <code>postcss-preset-env</code>。和 <code>@babel/preset-env</code> 类似，它可以为我们处理 css 的某些新语法和新特性，而且，它还内置了 <code>autoprefixer</code> 的功能。我们可以直接把 <code>autoprefixer</code> 换成 <code>postcss-preset-env</code>，<code>${PROJECT_DIR}/.browserslistrc</code> 也会被自动地读取使用。</p>\n<p>这时候，<code>postcss</code> 就会根据目标浏览器自动添加属性前缀、处理相对稳定的新语法和新特性了。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/postcss.config.js</span>\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  plugins<span>:</span> <span>[</span>\n    <span>require</span><span>(</span><span>'postcss-preset-env'</span><span>)</span><span>,</span>\n  <span>]</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>默认地，<code>postcss-preset-env</code> 会自动处理 stage 2+ 的新语法和新特性，你可以在它的官方网站中查看。</p>\n<p>最后，<code>cssnano</code> 插件可以帮助我们压缩 <code>.css</code> 文件并且去除掉多余的注释，用法也同样很简单。但要注意，只有在生产环境下才需要压缩并去除注释，所以我们在生产环境时再引入 <code>cssnano</code>。</p>\n<p>这里我们参考官方文档的配置，使用 <code>cssnano-preset-default</code>，配置移除所有注释。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/postcss.config.js</span>\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  plugins<span>:</span> <span>[</span>\n    <span>require</span><span>(</span><span>'postcss-preset-env'</span><span>)</span><span>,</span>\n    process<span>.</span>env<span>.</span><span>NODE_ENV</span> <span>===</span> <span>'production'</span> <span>&amp;&amp;</span>\n      <span>require</span><span>(</span><span>'cssnano'</span><span>)</span><span>(</span><span>{</span>\n        preset<span>:</span> <span>[</span><span>'default'</span><span>,</span> <span>{</span> discardComments<span>:</span> <span>{</span> removeAll<span>:</span> <span>true</span> <span>}</span> <span>}</span><span>]</span><span>,</span>\n      <span>}</span><span>)</span><span>,</span>\n  <span>]</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>如果你在加入 <code>cssnano</code> 前查看过生产环境下构建出来的 <code>.css</code> 文件，你会发现文件已经被压缩过了，只是注释没有被去掉。这是因为目前我们所有的 <code>.css</code> 文件都是由 <code>.scss</code> 编译而来，而在生产环境下，<code>sass</code> 依赖会给 <code>sass-loader</code> 指定 <code>outputStyle: 'compressed'</code>，这就导致了我们得到的 <code>.css</code> 文件已经被压缩过一次，但注释仍然还在。</p>\n<p>加入 <code>cssnano</code> 插件仍然是有必要的，因为 <code>.css</code> 文件依旧没有被压缩，而 <code>.css</code> 和 <code>.scss</code> 文件的注释也没有被去掉，<code>cssnano</code> 可以很好地完成这部分工作。</p>\n<p>到此为止，<code>postcss</code> 已经能自动处理我们的 css 代码中用到的新语法和新特性，会自动添加属性前缀，能压缩并移除注释了。</p>\n<p>某些样式库可能需要我们引入对应的组件样式，比如上面的 <code>zent</code>。我们在配置对应的 <code>loader</code> 的时候没有像配置 <code>babel-loader</code> 一样只处理 <code>src</code> 内的样式文件，这么做是有原因的。</p>\n<ul>\n<li>比起 js/jsx 文件的内容，样式文件的内容往往更小，处理起来不会耗费过多资源。</li>\n<li>样式文件本身有可能没被处理过，无论有没有被处理过，重新处理一次的结果也不会有任何影响，由我们的 <code>loader</code> 处理一次是保险的选择。</li>\n</ul>\n<h4 id=\"资产相关的-loader\"> 资产相关的 loader</h4>\n<p>一般我们把项目使用到的图片、字体、音频、视频之类的文件叫做项目资产文件，它们一般不能被直接修改。</p>\n<p>最常用的处理资产的 <code>loader</code> 就是 <code>file-loader</code> 和 <code>url-loader</code>。<code>url-loader</code> 是 <code>file-loader</code> 的升级版，增加了文件大小的上限配置，达到大小上限时会自动使用 <code>file-loader</code>，没达到大小上限的时候，会把文件转换成 base64 数据，然后硬编码到代码里。</p>\n<p>为什么要转换成 base64 数据硬编码进代码呢？一方面，直接硬编码进代码可以减轻在读取该部分文件时的页面闪烁，提高用户体验，另一方面也可以减少网络请求，降低服务器压力。</p>\n<p>如果 base64 数据太多太大，加载网页的速度依旧会变慢，所以不是所有文件都适宜转换成 base64 数据。</p>\n<p>下面来演示如何加入和使用这两个 <code>loader</code>。首先还是安装依赖。</p>\n<div><pre><code><span>npm</span> i file-loader@~6.2.0 -D\n<span>npm</span> i url-loader@~4.1.1 -D\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>直接修改配置文件。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/config/webpack.config.js</span>\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>...</span><span>,</span>\n  <span>// 指定 loader</span>\n  module<span>:</span> <span>{</span>\n    rules<span>:</span> <span>[</span>\n      <span>...</span><span>,</span>\n      <span>{</span>\n        <span>// 图片文件</span>\n        test<span>:</span> <span><span>/</span><span>\\.(png|jpg|jpeg|gif)$</span><span>/</span></span><span>,</span>\n        <span>// 使用 url-loader 处理</span>\n        use<span>:</span> <span>[</span>\n          <span>{</span>\n            loader<span>:</span> <span>'url-loader'</span><span>,</span>\n            options<span>:</span> <span>{</span>\n              <span>// 2 MB 上限</span>\n              limit<span>:</span> <span>2097152</span><span>,</span>\n              <span>// 放进 ${output.path}/img 文件夹里</span>\n              outputPath<span>:</span> <span>'img'</span><span>,</span>\n              <span>// 使用 ${output.path}/img 文件夹里的图片</span>\n              publicPath<span>:</span> <span>'img'</span><span>,</span>\n            <span>}</span><span>,</span>\n          <span>}</span><span>,</span>\n        <span>]</span><span>,</span>\n      <span>}</span><span>,</span>\n      <span>{</span>\n        <span>// 字体文件</span>\n        test<span>:</span> <span><span>/</span><span>\\.(woff|woff2|eot|ttf|otf)$</span><span>/</span></span><span>,</span>\n        <span>// 使用 url-loader 处理</span>\n        use<span>:</span> <span>[</span>\n          <span>{</span>\n            loader<span>:</span> <span>'url-loader'</span><span>,</span>\n            options<span>:</span> <span>{</span>\n              limit<span>:</span> <span>2097152</span><span>,</span>\n              outputPath<span>:</span> <span>'fonts'</span><span>,</span>\n              publicPath<span>:</span> <span>'fonts'</span><span>,</span>\n            <span>}</span><span>,</span>\n          <span>}</span><span>,</span>\n        <span>]</span><span>,</span>\n      <span>}</span><span>,</span>\n    <span>]</span><span>,</span>\n    <span>...</span><span>,</span>\n  <span>}</span><span>,</span>\n  <span>...</span><span>,</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br></div></div><ul>\n<li>指定 <code>limit: 2097152</code> 后，超过 2 MB 时，<code>url-loader</code> 会自动降级成 <code>file-loader</code>。在实际应用里可以自行调整这个限制。</li>\n<li><code>outputPath</code> 和 <code>publicPath</code> 是和项目中配置的输出路径 <code>output.path</code> 相关的，在这个项目里，也就是和 <code>${PROJECT_DIR}/dist</code> 相关。像上面的配置，最终构建结果是图片放进了 <code>${PROJECT_DIR}/dist/img</code> 里，而字体放进了 <code>${PROJECT_DIR}/dist/fonts</code> 里，使用资产的时候代码会自动到对应的文件夹里获取。</li>\n<li>把图片和字体放入各自的文件夹中，主要目的是区分开不同类型的文件，避免所有文件都直接放在 <code>${PROJECT_DIR}/dist</code>。当然也可以把图片、字体等都放入到 <code>${PROJECT_DIR}/dist/assets</code> 里，只需要注意修改 <code>outputPath</code> 和 <code>publicPath</code> 即可。</li>\n</ul>\n<p>放一个图片文件在 <code>${PROJECT_DIR}/src/assets</code> 里面（我这里放了 <code>webpack.png</code>），然后在 <code>${PROJECT_DIR}/src/App.jsx</code> 里引入、使用它。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/src/App.jsx</span>\n<span>import</span> React<span>,</span> <span>{</span> useEffect <span>}</span> <span>from</span> <span>'react'</span><span>;</span>\n<span>import</span> <span>{</span>\n  LayoutRow <span>as</span> Row<span>,</span>\n  LayoutCol <span>as</span> Col<span>,</span>\n  LayoutGrid <span>as</span> Grid<span>,</span>\n  Button<span>,</span>\n  Icon<span>,</span>\n<span>}</span> <span>from</span> <span>'zent'</span><span>;</span>\n<span>import</span> iconWebpack <span>from</span> <span>'./assets/webpack.png'</span><span>;</span>\n<span>import</span> <span>'./App.scss'</span><span>;</span>\n\n<span>const</span> <span>App</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n  <span>useEffect</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n    <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve</span><span>)</span> <span>=></span> <span>{</span>\n      <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n        document<span>.</span>title <span>=</span> <span>'Hello World!'</span><span>;</span>\n        <span>resolve</span><span>(</span><span>)</span><span>;</span>\n      <span>}</span><span>,</span> <span>5000</span><span>)</span><span>;</span>\n    <span>}</span><span>)</span><span>;</span>\n  <span>}</span><span>,</span> <span>[</span><span>]</span><span>)</span><span>;</span>\n\n  <span>return</span> <span>(</span>\n    <span>&lt;</span>Grid<span>></span>\n      <span>&lt;</span>Row<span>></span>\n        <span>&lt;</span>Col span<span>=</span><span>{</span><span>24</span><span>}</span><span>></span>\n          <span>&lt;</span>img className<span>=</span><span>\"icon\"</span> src<span>=</span><span>{</span>iconWebpack<span>}</span> <span>/</span><span>></span>\n          <span>&lt;</span>Button type<span>=</span><span>\"primary\"</span><span>></span>\n            <span>&lt;</span>Icon type<span>=</span><span>\"youzan\"</span> <span>/</span><span>></span>\n            Hello Zent<span>!</span>\n          <span>&lt;</span><span>/</span>Button<span>></span>\n        <span>&lt;</span><span>/</span>Col<span>></span>\n      <span>&lt;</span><span>/</span>Row<span>></span>\n    <span>&lt;</span><span>/</span>Grid<span>></span>\n  <span>)</span><span>;</span>\n<span>}</span><span>;</span>\n\n<span>export</span> <span>default</span> App<span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br></div></div><div><pre><code><span>// ${PROJECT_DIR}/src/App.scss</span>\n<span>.icon </span><span>{</span>\n  <span>display</span><span>:</span> inline-block<span>;</span>\n  <span>width</span><span>:</span> 32px<span>;</span>\n  <span>height</span><span>:</span> 32px<span>;</span>\n  <span>margin-right</span><span>:</span> 8px<span>;</span>\n  <span>vertical-align</span><span>:</span> middle<span>;</span>\n<span>}</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>放一个字体文件在 <code>${PROJECT_DIR}/src/assets</code> 里面（我这里放入了阿里普惠体的字体文件 <code>Alibaba-PuHuiTi-Regular.ttf</code>），然后在 <code>${PROJECT_DIR}/src/index.scss</code> 里引入、使用它。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/src/index.scss</span>\n<span><span>@font-face</span></span> <span>{</span>\n  <span>font-family</span><span>:</span> <span>\"Alibaba PuHuiTi\"</span><span>;</span>\n  <span>src</span><span>:</span> <span>url</span><span>(</span><span>\"./assets/Alibaba-PuHuiTi-Regular.ttf\"</span><span>)</span> <span>format</span><span>(</span><span>\"ttf\"</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>*,\n::before,\n::after </span><span>{</span>\n  <span>box-sizing</span><span>:</span> border-box<span>;</span>\n  <span>padding</span><span>:</span> 0<span>;</span>\n  <span>margin</span><span>:</span> 0<span>;</span>\n<span>}</span>\n\n<span>html,\nbody </span><span>{</span>\n  <span>min-width</span><span>:</span> 1280px<span>;</span>\n  <span>min-height</span><span>:</span> 100%<span>;</span>\n  <span>font-family</span><span>:</span> <span>\"Alibaba PuHuiTi\"</span><span>,</span> -apple-system<span>,</span> BlinkMacSystemFont<span>,</span> <span>\"Segoe UI\"</span><span>,</span> Roboto<span>,</span> <span>\"Helvetica Neue\"</span><span>,</span> Helvetica<span>,</span> <span>\"PingFang SC\"</span><span>,</span> <span>\"Hiragino Sans GB\"</span><span>,</span> <span>\"Microsoft YaHei\"</span><span>,</span> <span>\"微软雅黑\"</span><span>,</span> Arial<span>,</span> <span>\"Noto Sans\"</span><span>,</span> sans-serif<span>,</span> <span>\"Apple Color Emoji\"</span><span>,</span> <span>\"Segoe UI Emoji\"</span><span>,</span> <span>\"Segoe UI Symbol\"</span><span>,</span> <span>\"Noto Color Emoji\"</span><span>;</span>\n  <span>-webkit-font-smoothing</span><span>:</span> antialiased<span>;</span>\n  <span>-moz-osx-font-smoothing</span><span>:</span> grayscale<span>;</span>\n<span>}</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p>重新构建，可以看到 <code>${PROJECT_DIR}/dist</code> 目录下多出了一个文件夹 <code>fonts</code>，里面是一个字体文件，名字被修改成一串字符串（也就是文件指纹，后面会做进一步解释），而图片文件被硬编码进代码里。测试一切正常。</p>\n<p><code>url-loader</code> 和 <code>file-loader</code> 只会处理 <code>.js</code> 中引用的图片。如果需要在 <code>.html</code> 里引用，那就需要使用 <code>html-loader</code> 处理；如果需要在 <code>.vue</code> 里引用，那就需要使用 <code>vue-loader</code> 处理。</p>\n<p>或许你还想了解 svg 该如何处理，不妨自己去查查资料，亲手实践一下。</p>\n<h3 id=\"再看模式-mode\"> 再看模式 mode</h3>\n<p>指定不同的模式，<code>webpack</code> 会自动启用不同的优化。默认模式是 <code>production</code>，默认取值范围是 <code>development</code>，<code>production</code> 和 <code>none</code>。</p>\n<p>现在，我们每一次查看代码效果，都要执行 <code>npm run build</code>，然后用 <code>live server</code> 或 <code>serve</code> 启动。这相当麻烦，尤其是开发的时候，这么做会耗费很多时间，而且开发时也不应该使用 <code>production</code> 模式，而应该使用 <code>development</code> 模式。</p>\n<p><code>webpack-dev-server</code> 帮我们解决了这个问题。使用 <code>webpack-dev-server</code> 可以不刷新浏览器就看到我们开发的时候修改代码后的结果（这也就是我们常说的热更新），也不会生成文件放到 <code>dist</code> 目录下。实际上，生成文件会被放到内存里。</p>\n<div><pre><code><span>npm</span> i cross-env@~7.0.3 -D\n<span>npm</span> i webpack-dev-server@~3.11.2 -D\n<span>npm</span> i webpack-merge@~5.7.3 -D\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>我们还要根据环境来使用不同的构建配置。基于可维护性考虑，我们应该拆分出不同环境的构建配置文件，最终根据环境暴露出对应环境的构建配置。</p>\n<p>首先修改<code>package.json</code>。</p>\n<div><pre><code><span>{</span>\n  ...<span>,</span>\n  <span>\"scripts\"</span><span>:</span> <span>{</span>\n    <span>\"dev\"</span><span>:</span> <span>\"cross-env NODE_ENV=development webpack serve --config ./config/webpack.config.js --progress\"</span><span>,</span>\n    <span>\"build\"</span><span>:</span> <span>\"cross-env NODE_ENV=production webpack --config ./config/webpack.config.js\"</span>\n  <span>}</span><span>,</span>\n  ...\n<span>}</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><ul>\n<li><code>cross-env</code> 可以修改 <code>process.env.NODE_ENV</code> 的值，进而供我们确认环境。</li>\n<li><code>webpack serve</code> 会自动调用 <code>webpack-dev-server</code>。</li>\n</ul>\n<p>接着，我们把原本 <code>${PROJECT_DIR}/config/webpack.config.js</code> 中除 <code>mode</code> 之外的内容抽离出来，放到 <code>${PROJECT_DIR}/config/webpack.base.js</code> 里。这部分内容作为基础配置，会被所有环境的配置所引用。</p>\n<p>再新建两个配置文件，内容列写在下面。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/config/webpack.dev.js</span>\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  mode<span>:</span> <span>'development'</span><span>,</span>\n  devServer<span>:</span> <span>{</span>\n    hot<span>:</span> <span>true</span><span>,</span>\n    quiet<span>:</span> <span>true</span><span>,</span>\n  <span>}</span><span>,</span>\n  devtool<span>:</span> <span>'eval-cheap-source-map'</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><ul>\n<li><code>devServer.hot = true</code> 表示开启 <code>webpack-dev-server</code> 的热更新。</li>\n<li><code>devServer.quiet = true</code> 表示减少构建输出的信息显示。</li>\n<li><code>devtool</code> 可以确定错误对应的代码，能帮助调试，这里指定为 <code>source-map</code>。</li>\n</ul>\n<div><pre><code><span>// ${PROJECT_DIR}/config/webpack.prod.js</span>\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  mode<span>:</span> <span>'production'</span><span>,</span>\n  devtool<span>:</span> <span>'source-map'</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>最后修改 <code>${PROJECT_DIR}/config/webpack.config.js</code>，让它在不同环境暴露不同的构建配置。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/config/webpack.config.js</span>\n<span>const</span> <span>{</span> merge <span>}</span> <span>=</span> <span>require</span><span>(</span><span>'webpack-merge'</span><span>)</span><span>;</span>\n<span>const</span> baseConfig <span>=</span> <span>require</span><span>(</span><span>'./webpack.base.js'</span><span>)</span><span>;</span>\n<span>const</span> devConfig <span>=</span> <span>require</span><span>(</span><span>'./webpack.dev.js'</span><span>)</span><span>;</span>\n<span>const</span> prodConfig <span>=</span> <span>require</span><span>(</span><span>'./webpack.prod.js'</span><span>)</span><span>;</span>\n\n<span>if</span> <span>(</span>process<span>.</span>env<span>.</span><span>NODE_ENV</span> <span>===</span> <span>'development'</span><span>)</span> <span>{</span>\n  module<span>.</span>exports <span>=</span> <span>merge</span><span>(</span>baseConfig<span>,</span> devConfig<span>)</span><span>;</span>\n<span>}</span> <span>else</span> <span>{</span>\n  module<span>.</span>exports <span>=</span> <span>merge</span><span>(</span>baseConfig<span>,</span> prodConfig<span>)</span><span>;</span>\n<span>}</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><ul>\n<li>使用 <code>webpack-merge</code> 组合基本配置和特定环境配置。</li>\n</ul>\n<p>最后分别执行 <code>npm run dev</code> 和 <code>npm run build</code> 做测试，一切正常。下面是最终项目目录（省略了 <code>node_modules</code>）。</p>\n<div><pre><code><span>.</span>\n├── babel.config.json\n├── config\n│   ├── webpack.base.js\n│   ├── webpack.config.js\n│   ├── webpack.dev.js\n│   └── webpack.prod.js\n├── dist\n│   ├── app.js\n│   ├── app.js.map\n│   ├── favicon.ico\n│   ├── fonts\n│   ├── index.html\n│   └── report.html\n├── package-lock.json\n├── package.json\n├── postcss.config.js\n├── public\n│   ├── favicon.ico\n│   └── index.html\n└── src\n    ├── assets\n    ├── App.jsx\n    ├── App.scss\n    ├── index.js\n    └── index.scss\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><p>对于<code>react</code>，还可以加入<code>react-hot-loader</code>进一步提升使用体验。有兴趣可以查阅相关资料学习。</p>\n<p>🎉恭喜，你的第二个 webpack demo 已经完成啦～</p>\n<p>参考源代码见 <a href=\"https://github.com/ModyQyW/webpack4-demos/tree/master/demo02\" target=\"_blank\" rel=\"noopener noreferrer\">modyqyw/webpack-demos/demo02</a>。</p>\n<h2 id=\"demo03-优化\"> demo03 - 优化</h2>\n<h3 id=\"使用文件指纹做版本管理\"> 使用文件指纹做版本管理</h3>\n<p>人的指纹是特殊的，不存在完全相同的人的指纹，所以依靠人的指纹可以确定唯一的人。文件指纹的用途和人的指纹相近，可以用来确定文件有没有改变，方便做版本管理。</p>\n<p>常用的文件指纹有三类。</p>\n<ul>\n<li><code>hash</code> - 和整个项目的构建有关，只要项目里有文件被修改，值就会有变化。特别地，对于图片、字体这些资产文件，<code>hash</code> 和整个项目的构建无关，而是和文件内容相关。一般只会在资产文件上使用。</li>\n<li><code>chunkhash</code> - 根据不同的 <code>chunk</code> 生成 <code>hash</code>。通常会把依赖库和业务代码分别抽离出对应的 <code>chunk</code>，然后使用 <code>chunkhash</code>。也就是说，一般对 <code>.js</code> 文件使用 <code>chunkhash</code>。</li>\n<li><code>contenthash</code> - 根据文件内容生成 <code>hash</code>。<code>.js</code> 文件常常会引用 <code>.css</code> 文件，如果使用 <code>chunkhash</code>，就会导致修改 <code>.js</code> 文件、没有修改 <code>.css</code> 文件的情况下，<code>.css</code> 文件的 <code>hash</code> 也变化了，这不太符合工程要求，所以 <code>.css</code> 文件一般使用 <code>contenthash</code>。资产文件也可以使用 <code>contenthash</code>。</li>\n</ul>\n<p>我们先来修改 <code>${PROJECT_DIR}/config/webpack.base.js</code>，为图片和字体添加文件指纹。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/config/webpack.base.js</span>\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>...</span><span>,</span>\n  module<span>:</span> <span>{</span>\n    rules<span>:</span> <span>[</span>\n      <span>...</span><span>,</span>\n      <span>{</span>\n        test<span>:</span> <span><span>/</span><span>\\.(png|jpg|jpeg|gif)$</span><span>/</span></span><span>,</span>\n        use<span>:</span> <span>[</span>\n          <span>{</span>\n            loader<span>:</span> <span>'url-loader'</span><span>,</span>\n            options<span>:</span> <span>{</span>\n              <span>...</span><span>,</span>\n              name<span>:</span> <span>'[name].[contenthash:8].[ext]'</span><span>,</span>\n            <span>}</span><span>,</span>\n          <span>}</span><span>,</span>\n        <span>]</span><span>,</span>\n      <span>}</span><span>,</span>\n      <span>{</span>\n        test<span>:</span> <span><span>/</span><span>\\.(woff|woff2|eot|ttf|otf)$</span><span>/</span></span><span>,</span>\n        use<span>:</span> <span>[</span>\n          <span>{</span>\n            loader<span>:</span> <span>'url-loader'</span><span>,</span>\n            options<span>:</span> <span>{</span>\n              <span>...</span><span>,</span>\n              name<span>:</span> <span>'[name].[contenthash:8].[ext]'</span><span>,</span>\n            <span>}</span><span>,</span>\n          <span>}</span><span>,</span>\n        <span>]</span><span>,</span>\n      <span>}</span><span>,</span>\n      <span>...</span><span>,</span>\n    <span>]</span><span>,</span>\n  <span>}</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br></div></div><ul>\n<li><code>[name]</code> 表示使用文件本身的命名。</li>\n<li><code>[contenthash:8]</code> 表示使用 <code>contenthash</code> 的前 8 位，也可以写成 <code>[hash:8]</code>，结果会是一样的，这是因为 <code>url-loader</code> 和 <code>file-loader</code> 将会以同样的方式处理 <code>contenthash</code> 和 <code>hash</code>，这是文件指纹的特例。</li>\n<li><code>[ext]</code> 表示使用文件本身的后缀。</li>\n</ul>\n<p>而要在生产模式下为 <code>.css</code> 文件添加文件指纹，就不能使用 <code>style-loader</code>。<code>style-loader</code> 会把 <code>.css</code> 文件嵌入到 <code>.js</code> 文件中，我们无法得到单独的 <code>.css</code> 文件，自然也就无法添加文件指纹了。</p>\n<p>要解决这个问题，我们要使用 <code>mini-css-extract-plugin</code>，它能分离出 <code>.css</code> 文件让我们添加文件指纹。一般只会在生产环境中使用它，在开发环境里，从效率考虑，还是会使用 <code>style-loader</code>。</p>\n<div><pre><code><span>npm</span> i mini-css-extract-plugin@~1.3.6 -D\n</code></pre>\n<div><span>1</span><br></div></div><p>我们再把 <code>${PROJECT_DIR}/config/webpack.base.js</code> 里关于 css 的部分都放到 <code>${PROJECT_DIR}/config/webpack.dev.js</code> 里。</p>\n<p>现在，完整的 <code>${PROJECT_DIR}/config/webpack.base.js</code> 包含了 <code>entry</code>，<code>plugin</code> 和 <code>loader</code>。其中，图片文件和字体文件的处理都使用了 <code>contenthash</code> 的前 8 位。</p>\n<p>我们只是移除了其中关于 css 的部分，下面给出完整的文件内容供参考。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/config/webpack.base.js</span>\n<span>const</span> path <span>=</span> <span>require</span><span>(</span><span>'path'</span><span>)</span><span>;</span>\n<span>const</span> <span>{</span> CleanWebpackPlugin<span>:</span> CleanPlugin <span>}</span> <span>=</span> <span>require</span><span>(</span><span>'clean-webpack-plugin'</span><span>)</span><span>;</span>\n<span>const</span> CopyPlugin <span>=</span> <span>require</span><span>(</span><span>'copy-webpack-plugin'</span><span>)</span><span>;</span>\n<span>const</span> HtmlPlugin <span>=</span> <span>require</span><span>(</span><span>'html-webpack-plugin'</span><span>)</span><span>;</span>\n<span>const</span> FriendlyErrorsPlugin <span>=</span> <span>require</span><span>(</span><span>'friendly-errors-webpack-plugin'</span><span>)</span><span>;</span>\n\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  entry<span>:</span> <span>{</span>\n    app<span>:</span> path<span>.</span><span>resolve</span><span>(</span><span>'src'</span><span>,</span> <span>'index.js'</span><span>)</span><span>,</span>\n  <span>}</span><span>,</span>\n  plugins<span>:</span> <span>[</span>\n    <span>new</span> <span>FriendlyErrorsPlugin</span><span>(</span><span>)</span><span>,</span>\n    <span>new</span> <span>CleanPlugin</span><span>(</span><span>)</span><span>,</span>\n    <span>new</span> <span>CopyPlugin</span><span>(</span><span>{</span>\n      patterns<span>:</span> <span>[</span><span>{</span> <span>from</span><span>:</span> path<span>.</span><span>resolve</span><span>(</span><span>'public'</span><span>,</span> <span>'favicon.ico'</span><span>)</span> <span>}</span><span>]</span><span>,</span>\n    <span>}</span><span>)</span><span>,</span>\n    <span>new</span> <span>HtmlPlugin</span><span>(</span><span>{</span>\n      title<span>:</span> <span>'demo03'</span><span>,</span>\n      template<span>:</span> path<span>.</span><span>resolve</span><span>(</span><span>'public'</span><span>,</span> <span>'index.html'</span><span>)</span><span>,</span>\n    <span>}</span><span>)</span><span>,</span>\n  <span>]</span><span>,</span>\n  module<span>:</span> <span>{</span>\n    rules<span>:</span> <span>[</span>\n      <span>{</span>\n        test<span>:</span> <span><span>/</span><span>\\.jsx?$</span><span>/</span></span><span>,</span>\n        exclude<span>:</span> <span><span>/</span><span>(node_modules|bower_components)</span><span>/</span></span><span>,</span>\n        use<span>:</span> <span>[</span><span>{</span> loader<span>:</span> <span>'babel-loader'</span> <span>}</span><span>]</span><span>,</span>\n      <span>}</span><span>,</span>\n      <span>{</span>\n        test<span>:</span> <span><span>/</span><span>\\.(png|jpg|jpeg|gif)$</span><span>/</span></span><span>,</span>\n        use<span>:</span> <span>[</span>\n          <span>{</span>\n            loader<span>:</span> <span>'url-loader'</span><span>,</span>\n            options<span>:</span> <span>{</span>\n              limit<span>:</span> <span>8192</span><span>,</span>\n              outputPath<span>:</span> <span>'img'</span><span>,</span>\n              publicPath<span>:</span> <span>'img'</span><span>,</span>\n              name<span>:</span> <span>'[name].[contenthash:8].[ext]'</span><span>,</span>\n            <span>}</span><span>,</span>\n          <span>}</span><span>,</span>\n        <span>]</span><span>,</span>\n      <span>}</span><span>,</span>\n      <span>{</span>\n        test<span>:</span> <span><span>/</span><span>\\.(woff|woff2|eot|ttf|otf)$</span><span>/</span></span><span>,</span>\n        use<span>:</span> <span>[</span>\n          <span>{</span>\n            loader<span>:</span> <span>'url-loader'</span><span>,</span>\n            options<span>:</span> <span>{</span>\n              limit<span>:</span> <span>8192</span><span>,</span>\n              outputPath<span>:</span> <span>'fonts'</span><span>,</span>\n              publicPath<span>:</span> <span>'fonts'</span><span>,</span>\n              name<span>:</span> <span>'[name].[contenthash:8].[ext]'</span><span>,</span>\n            <span>}</span><span>,</span>\n          <span>}</span><span>,</span>\n        <span>]</span><span>,</span>\n      <span>}</span><span>,</span>\n    <span>]</span><span>,</span>\n  <span>}</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br></div></div><p>完整的 <code>${PROJECT_DIR}/config/webpack.dev.js</code> 内容也放在下面。除去基本的配置外，还声明了 <code>mode</code>，<code>webpack-dev-server</code>，<code>devtool</code> 和 <code>loader</code>。在这里，我们使用了 <code>style-loader</code>。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/config/webpack.dev.js</span>\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  mode<span>:</span> <span>'development'</span><span>,</span>\n  devServer<span>:</span> <span>{</span>\n    hot<span>:</span> <span>true</span><span>,</span>\n    open<span>:</span> <span>true</span><span>,</span>\n  <span>}</span><span>,</span>\n  devtool<span>:</span> <span>'eval-cheap-source-map'</span><span>,</span>\n  module<span>:</span> <span>{</span>\n    rules<span>:</span> <span>[</span>\n      <span>{</span>\n        test<span>:</span> <span><span>/</span><span>\\.css$</span><span>/</span></span><span>,</span>\n        use<span>:</span> <span>[</span>\n          <span>{</span> loader<span>:</span> <span>'style-loader'</span> <span>}</span><span>,</span>\n          <span>{</span>\n            loader<span>:</span> <span>'css-loader'</span><span>,</span>\n            options<span>:</span> <span>{</span>\n              importLoaders<span>:</span> <span>1</span><span>,</span>\n            <span>}</span><span>,</span>\n          <span>}</span><span>,</span>\n          <span>{</span> loader<span>:</span> <span>'postcss-loader'</span> <span>}</span><span>,</span>\n        <span>]</span><span>,</span>\n      <span>}</span><span>,</span>\n      <span>{</span>\n        test<span>:</span> <span><span>/</span><span>\\.less$</span><span>/</span></span><span>,</span>\n        use<span>:</span> <span>[</span>\n          <span>{</span> loader<span>:</span> <span>'style-loader'</span> <span>}</span><span>,</span>\n          <span>{</span>\n            loader<span>:</span> <span>'css-loader'</span><span>,</span>\n            options<span>:</span> <span>{</span>\n              importLoaders<span>:</span> <span>2</span><span>,</span>\n            <span>}</span><span>,</span>\n          <span>}</span><span>,</span>\n          <span>{</span> loader<span>:</span> <span>'postcss-loader'</span> <span>}</span><span>,</span>\n          <span>{</span> loader<span>:</span> <span>'less-loader'</span> <span>}</span><span>,</span>\n        <span>]</span><span>,</span>\n      <span>}</span><span>,</span>\n      <span>{</span>\n        test<span>:</span> <span><span>/</span><span>\\.s[ac]ss$</span><span>/</span></span><span>,</span>\n        use<span>:</span> <span>[</span>\n          <span>{</span> loader<span>:</span> <span>'style-loader'</span> <span>}</span><span>,</span>\n          <span>{</span>\n            loader<span>:</span> <span>'css-loader'</span><span>,</span>\n            options<span>:</span> <span>{</span>\n              importLoaders<span>:</span> <span>2</span><span>,</span>\n            <span>}</span><span>,</span>\n          <span>}</span><span>,</span>\n          <span>{</span> loader<span>:</span> <span>'postcss-loader'</span> <span>}</span><span>,</span>\n          <span>{</span> loader<span>:</span> <span>'resolve-url-loader'</span> <span>}</span><span>,</span>\n          <span>{</span> loader<span>:</span> <span>'sass-loader'</span> <span>}</span><span>,</span>\n        <span>]</span><span>,</span>\n      <span>}</span><span>,</span>\n    <span>]</span><span>,</span>\n  <span>}</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br></div></div><p>我们再来修改 <code>${PROJECT_DIR}/config/webpack.prod.js</code>，不使用 <code>style-loader</code> 而是使用 <code>mini-css-extract-plugin</code>。</p>\n<p>首先用 <code>mini-css-extract-plugin</code> 附带的 <code>loader</code> 替换掉原本使用的 <code>style-loader</code>。我们还要指定 <code>publicPath</code>，也就是指定代码使用的 <code>.css</code> 文件所在的相对于 <code>output.path</code> 的文件夹。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/config/webpack.prod.js</span>\n<span>...</span>\n<span>const</span> MiniCssExtractPlugin <span>=</span> <span>require</span><span>(</span><span>'mini-css-extract-plugin'</span><span>)</span><span>;</span>\n\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>...</span><span>,</span>\n  module<span>:</span> <span>{</span>\n    rules<span>:</span> <span>[</span>\n      <span>{</span>\n        test<span>:</span> <span><span>/</span><span>\\.css$</span><span>/</span></span><span>,</span>\n        use<span>:</span> <span>[</span>\n          <span>{</span>\n            loader<span>:</span> MiniCssExtractPlugin<span>.</span>loader<span>,</span>\n            options<span>:</span> <span>{</span>\n              publicPath<span>:</span> <span>'css'</span><span>,</span>\n            <span>}</span><span>,</span>\n          <span>}</span><span>,</span>\n          <span>{</span>\n            loader<span>:</span> <span>'css-loader'</span><span>,</span>\n            options<span>:</span> <span>{</span>\n              importLoaders<span>:</span> <span>1</span><span>,</span>\n            <span>}</span><span>,</span>\n          <span>}</span><span>,</span>\n          <span>{</span> loader<span>:</span> <span>'postcss-loader'</span> <span>}</span><span>,</span>\n        <span>]</span><span>,</span>\n      <span>}</span><span>,</span>\n      <span>{</span>\n        test<span>:</span> <span><span>/</span><span>\\.less$</span><span>/</span></span><span>,</span>\n        use<span>:</span> <span>[</span>\n          <span>{</span>\n            loader<span>:</span> MiniCssExtractPlugin<span>.</span>loader<span>,</span>\n            options<span>:</span> <span>{</span>\n              publicPath<span>:</span> <span>'css'</span><span>,</span>\n            <span>}</span><span>,</span>\n          <span>}</span><span>,</span>\n          <span>{</span>\n            loader<span>:</span> <span>'css-loader'</span><span>,</span>\n            options<span>:</span> <span>{</span>\n              importLoaders<span>:</span> <span>2</span><span>,</span>\n            <span>}</span><span>,</span>\n          <span>}</span><span>,</span>\n          <span>{</span> loader<span>:</span> <span>'postcss-loader'</span> <span>}</span><span>,</span>\n          <span>{</span> loader<span>:</span> <span>'less-loader'</span> <span>}</span><span>,</span>\n        <span>]</span><span>,</span>\n      <span>}</span><span>,</span>\n      <span>{</span>\n        test<span>:</span> <span><span>/</span><span>\\.s[ac]ss$</span><span>/</span></span><span>,</span>\n        use<span>:</span> <span>[</span>\n          <span>{</span>\n            loader<span>:</span> MiniCssExtractPlugin<span>.</span>loader<span>,</span>\n            options<span>:</span> <span>{</span>\n              publicPath<span>:</span> <span>'css'</span><span>,</span>\n            <span>}</span><span>,</span>\n          <span>}</span><span>,</span>\n          <span>{</span>\n            loader<span>:</span> <span>'css-loader'</span><span>,</span>\n            options<span>:</span> <span>{</span>\n              importLoaders<span>:</span> <span>2</span><span>,</span>\n            <span>}</span><span>,</span>\n          <span>}</span><span>,</span>\n          <span>{</span> loader<span>:</span> <span>'postcss-loader'</span> <span>}</span><span>,</span>\n          <span>{</span> loader<span>:</span> <span>'resolve-url-loader'</span> <span>}</span><span>,</span>\n          <span>{</span> loader<span>:</span> <span>'sass-loader'</span> <span>}</span><span>,</span>\n        <span>]</span><span>,</span>\n      <span>}</span><span>,</span>\n    <span>]</span><span>,</span>\n  <span>}</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br></div></div><ul>\n<li><code>publicPath: 'css'</code> 表示要使用 <code>${output.path}/css</code> 里的 <code>.css</code> 文件。</li>\n</ul>\n<p>接着，把 <code>mini-css-extract-plugin</code> 加到 <code>plugins</code> 里，指定输出文件名。在前面我们已经指定要使用 <code>${output.path}/css</code> 文件夹里的 <code>.css</code> 文件，在这里我们需要把文件夹名也添加上去，让 <code>.css</code> 文件输出到 <code>${output.path}/css</code> 目录下。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/config/webpack.prod.js</span>\n<span>...</span>\n<span>const</span> MiniCssExtractPlugin <span>=</span> <span>require</span><span>(</span><span>'mini-css-extract-plugin'</span><span>)</span><span>;</span>\n\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>...</span><span>,</span>\n  plugins<span>:</span> <span>[</span>\n    <span>...</span><span>,</span>\n    <span>new</span> <span>MiniCssExtractPlugin</span><span>(</span><span>{</span>\n      filename<span>:</span> <span>'css/[name].[contenthash:8].css'</span><span>,</span>\n    <span>}</span><span>)</span><span>,</span>\n    <span>...</span><span>,</span>\n  <span>]</span><span>,</span>\n  <span>...</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>而要为 <code>entry</code> 对应的输出文件添加文件指纹非常简单，只需要直接使用 <code>chunkhash</code>。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/config/webpack.prod.js</span>\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>...</span><span>,</span>\n  output<span>:</span> <span>{</span>\n    path<span>:</span> path<span>.</span><span>resolve</span><span>(</span><span>'dist'</span><span>)</span><span>,</span>\n    filename<span>:</span> <span>'[name].[chunkhash:8].js'</span><span>,</span>\n  <span>}</span><span>,</span>\n  <span>...</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>完整的 <code>${PROJECT_DIR}/config/webpack.prod.js</code> 如下所示。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/config/webpack.prod.js</span>\n<span>const</span> path <span>=</span> <span>require</span><span>(</span><span>'path'</span><span>)</span><span>;</span>\n<span>const</span> MiniCssExtractPlugin <span>=</span> <span>require</span><span>(</span><span>'mini-css-extract-plugin'</span><span>)</span><span>;</span>\n\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  mode<span>:</span> <span>'production'</span><span>,</span>\n  devtool<span>:</span> <span>'source-map'</span><span>,</span>\n  output<span>:</span> <span>{</span>\n    path<span>:</span> path<span>.</span><span>resolve</span><span>(</span><span>'dist'</span><span>)</span><span>,</span>\n    filename<span>:</span> <span>'[name].[chunkhash:8].js'</span><span>,</span>\n  <span>}</span><span>,</span>\n  plugins<span>:</span> <span>[</span>\n    <span>new</span> <span>MiniCssExtractPlugin</span><span>(</span><span>{</span>\n      filename<span>:</span> <span>'css/[name].[contenthash:8].css'</span><span>,</span>\n    <span>}</span><span>)</span><span>,</span>\n  <span>]</span><span>,</span>\n  module<span>:</span> <span>{</span>\n    rules<span>:</span> <span>[</span>\n      <span>{</span>\n        test<span>:</span> <span><span>/</span><span>\\.css$</span><span>/</span></span><span>,</span>\n        use<span>:</span> <span>[</span>\n          <span>{</span>\n            loader<span>:</span> MiniCssExtractPlugin<span>.</span>loader<span>,</span>\n            options<span>:</span> <span>{</span>\n              publicPath<span>:</span> <span>'css'</span><span>,</span>\n            <span>}</span><span>,</span>\n          <span>}</span><span>,</span>\n          <span>{</span>\n            loader<span>:</span> <span>'css-loader'</span><span>,</span>\n            options<span>:</span> <span>{</span>\n              importLoaders<span>:</span> <span>1</span><span>,</span>\n            <span>}</span><span>,</span>\n          <span>}</span><span>,</span>\n          <span>{</span> loader<span>:</span> <span>'postcss-loader'</span> <span>}</span><span>,</span>\n        <span>]</span><span>,</span>\n      <span>}</span><span>,</span>\n      <span>{</span>\n        test<span>:</span> <span><span>/</span><span>\\.less$</span><span>/</span></span><span>,</span>\n        use<span>:</span> <span>[</span>\n          <span>{</span>\n            loader<span>:</span> MiniCssExtractPlugin<span>.</span>loader<span>,</span>\n            options<span>:</span> <span>{</span>\n              publicPath<span>:</span> <span>'css'</span><span>,</span>\n            <span>}</span><span>,</span>\n          <span>}</span><span>,</span>\n          <span>{</span>\n            loader<span>:</span> <span>'css-loader'</span><span>,</span>\n            options<span>:</span> <span>{</span>\n              importLoaders<span>:</span> <span>2</span><span>,</span>\n            <span>}</span><span>,</span>\n          <span>}</span><span>,</span>\n          <span>{</span> loader<span>:</span> <span>'postcss-loader'</span> <span>}</span><span>,</span>\n          <span>{</span> loader<span>:</span> <span>'less-loader'</span> <span>}</span><span>,</span>\n        <span>]</span><span>,</span>\n      <span>}</span><span>,</span>\n      <span>{</span>\n        test<span>:</span> <span><span>/</span><span>\\.s[ac]ss$</span><span>/</span></span><span>,</span>\n        use<span>:</span> <span>[</span>\n          <span>{</span>\n            loader<span>:</span> MiniCssExtractPlugin<span>.</span>loader<span>,</span>\n            options<span>:</span> <span>{</span>\n              publicPath<span>:</span> <span>'css'</span><span>,</span>\n            <span>}</span><span>,</span>\n          <span>}</span><span>,</span>\n          <span>{</span>\n            loader<span>:</span> <span>'css-loader'</span><span>,</span>\n            options<span>:</span> <span>{</span>\n              importLoaders<span>:</span> <span>2</span><span>,</span>\n            <span>}</span><span>,</span>\n          <span>}</span><span>,</span>\n          <span>{</span> loader<span>:</span> <span>'postcss-loader'</span> <span>}</span><span>,</span>\n          <span>{</span> loader<span>:</span> <span>'resolve-url-loader'</span> <span>}</span><span>,</span>\n          <span>{</span> loader<span>:</span> <span>'sass-loader'</span> <span>}</span><span>,</span>\n        <span>]</span><span>,</span>\n      <span>}</span><span>,</span>\n    <span>]</span><span>,</span>\n  <span>}</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br></div></div><p>其他文件的处理也可以参考以上做法。</p>\n<h3 id=\"移除-js-中的注释以压缩-js\"> 移除 js 中的注释以压缩 js</h3>\n<p>如果我们完成之后打开 <code>${PROJECT_DIR}/dist/js/app.[chunkhash:8].js</code>，就会发现大量 js 代码堆叠到一起，这是正常的压缩现象。但是，文件里还有一些注释，这是生产环境不需要的，我们可以手动配置来去除这些注释，进一步地压缩 <code>.js</code> 文件。</p>\n<p><code>webpack</code> 默认在生产环境下使用 <code>terser-webpack-plugin</code> 来压缩 <code>.js</code> 文件，我们只需要做进一步的配置即可。</p>\n<p>虽然安装 <code>webpack</code> 依赖的时候会自动安装该依赖，但是我们通常会显式安装我们所需要的依赖并指定版本，避免版本不一致的问题。</p>\n<div><pre><code><span>npm</span> i terser-webpack-plugin@~4.2.3 -D\n</code></pre>\n<div><span>1</span><br></div></div><p>我们不是从头配置 <code>terser-webpack-plugin</code>，而是修改 <code>webpack</code> 原本的 <code>terser-webpack-plugin</code> 配置，所以我们是在 <code>optimization</code> 字段中（而不是在 <code>plugins</code> 字段中）使用 <code>terser-webpack-plugin</code>。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/config/webpack.prod.js</span>\n<span>const</span> TerserPlugin <span>=</span> <span>require</span><span>(</span><span>'terser-webpack-plugin'</span><span>)</span><span>;</span>\n\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>...</span><span>,</span>\n  optimization<span>:</span> <span>{</span>\n    minimize<span>:</span> <span>true</span><span>,</span>\n    minimizer<span>:</span> <span>[</span>\n      <span>new</span> <span>TerserPlugin</span><span>(</span><span>{</span>\n        terserOptions<span>:</span> <span>{</span>\n          output<span>:</span> <span>{</span>\n            comments<span>:</span> <span>false</span><span>,</span>\n          <span>}</span><span>,</span>\n        <span>}</span><span>,</span>\n        extractComments<span>:</span> <span>false</span><span>,</span>\n      <span>}</span><span>)</span><span>,</span>\n    <span>]</span><span>,</span>\n  <span>}</span><span>,</span>\n  <span>...</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><ul>\n<li><code>extractComments: false</code> 表示不需要把注释分离到单独的文件里。</li>\n<li><code>terserOptions.output.comments: false</code> 表示最终输出省略注释。</li>\n</ul>\n<p>这个配置也是 <code>terser-webpack-plugin</code> 文档中提供的例子。</p>\n<h3 id=\"压缩-html\"> 压缩 html</h3>\n<p>要压缩 <code>.html</code> 文件，我们可以使用之前用到的 <code>html-webpack-plugin</code>。除了我们之前用到的指定模板的功能，它还有压缩 html 的功能，而且是默认开启的。</p>\n<p>如果我们需要修改 <code>html-webpack-plugin</code> 的压缩选项，我们只需要为 <code>${PROJECT_DIR}/config/webpack.base.js</code> 中的 <code>html-webpack-plugin</code> 的配置添加一个 <code>minify</code> 字段，然后写入自己的配置即可。</p>\n<p>下面是默认的 <code>html-webpack-plugin</code> 的压缩选项。</p>\n<div><pre><code><span>const</span> HtmlPlugin <span>=</span> <span>require</span><span>(</span><span>'html-webpack-plugin'</span><span>)</span><span>;</span>\n\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>...</span><span>,</span>\n  plugins<span>:</span> <span>[</span>\n    <span>...</span><span>,</span>\n    <span>new</span> <span>HtmlPlugin</span><span>(</span><span>{</span>\n      title<span>:</span> <span>'demo03'</span><span>,</span>\n      template<span>:</span> path<span>.</span><span>resolve</span><span>(</span><span>'public'</span><span>,</span> <span>'index.html'</span><span>)</span><span>,</span>\n      minify<span>:</span> <span>{</span>\n        collapseWhitespace<span>:</span> <span>true</span><span>,</span>\n        removeComments<span>:</span> <span>true</span><span>,</span>\n        removeRedundantAttributes<span>:</span> <span>true</span><span>,</span>\n        removeScriptTypeAttributes<span>:</span> <span>true</span><span>,</span>\n        removeStyleLinkTypeAttributes<span>:</span> <span>true</span><span>,</span>\n        useShortDoctype<span>:</span> <span>true</span><span>,</span>\n      <span>}</span><span>,</span>\n    <span>}</span><span>)</span><span>,</span>\n    <span>...</span><span>,</span>\n  <span>]</span><span>,</span>\n  <span>...</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><ul>\n<li><code>collapseWhitespace: true</code> 表示减少 html 中不必要的空白。</li>\n<li><code>removeComments: true</code> 表示移除 html 中的注释。</li>\n<li><code>removeRedundantAttributes: true</code> 表示移除标签上使用了默认值的属性，比如 <code>&lt;input type=&quot;text&quot; /&gt;</code>，可以移除 <code>type=&quot;text&quot;</code>。</li>\n<li><code>removeScriptTypeAttributes: true</code> 表示移除 <code>&lt;script&gt;</code> 标签上的 <code>type=&quot;text/javascript&quot;</code>。</li>\n<li><code>removeStyleLinkTypeAttributes: true</code> 表示移除 <code>&lt;style&gt;</code> 和 <code>&lt;link&gt;</code> 标签上的 <code>type=&quot;text/css&quot;</code>。</li>\n<li><code>useShortDoctype: true</code> 表示使用较短的 html 格式声明。</li>\n</ul>\n<p>一般不需要手动配置，如果有这方面需求，可以翻看文档再做修改。写入的自己的配置不会和默认配置组合使用（默认配置会被覆盖），所以必须确保写入的自己的配置是完整的。</p>\n<h3 id=\"基础依赖的处理\"> 基础依赖的处理</h3>\n<p>项目内往往有一些比较基础的依赖，比如 <code>react</code> 和 <code>react-dom</code>。默认地，<code>webpack</code> 会把这些基础依赖放入 <code>entry</code> 对应的输出文件中。</p>\n<p>这些基础依赖往往比较稳定，不会经常更新，如果打包进 <code>entry</code> 对应的输出文件，就会出现业务代码变化、基础依赖没有变化、但用户需要重新拉取包含了基础依赖的代码的情况，这相当不合理。</p>\n<p>我们可以使用公共 cdn 来加载这些依赖，解决这个问题。首先要在 <code>${PROJECT_DIR}/config/webpack.prod.js</code> 配置 <code>externals</code>，向 <code>webpack</code> 说明无需添加到构建包中的依赖。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/config/webpack.prod.js</span>\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>...</span><span>,</span>\n  externals<span>:</span> <span>{</span>\n    react<span>:</span> <span>'React'</span><span>,</span>\n    <span>'react-dom'</span><span>:</span> <span>'ReactDOM'</span>\n  <span>}</span><span>,</span>\n  <span>...</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p><code>externals</code> 是一个对象 object，它的键就是 <code>webpack</code> 需要排除的依赖名，稍后我们再说明对应的值。上面的配置会让 <code>webpack</code> 构建时排除 <code>react</code> 和 <code>react-dom</code> 两个依赖，不把它们加入到最终构建包中。</p>\n<p>之后，还需要手动加入 <code>react</code> 和 <code>react-dom</code> 的公共 cdn 链接，使得项目能够使用 <code>react</code> 和 <code>react-dom</code> 这两个依赖，否则构建包没办法正常运行。</p>\n<p>这里使用了 <a href=\"https://www.jsdelivr.com/\" target=\"_blank\" rel=\"noopener noreferrer\">jsdelivr</a> 这个公共 cdn，你也可以使用 <a href=\"https://unpkg.com/\" target=\"_blank\" rel=\"noopener noreferrer\">unpkg</a>。</p>\n<div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>\n<span><span><span>&lt;</span>html</span> <span>lang</span><span><span>=</span><span>\"</span>en<span>\"</span></span><span>></span></span>\n  <span><span><span>&lt;</span>head</span><span>></span></span>\n    <span><span><span>&lt;</span>meta</span> <span>charset</span><span><span>=</span><span>\"</span>UTF-8<span>\"</span></span> <span>/></span></span>\n    <span><span><span>&lt;</span>meta</span> <span>name</span><span><span>=</span><span>\"</span>viewport<span>\"</span></span> <span>content</span><span><span>=</span><span>\"</span>width=device-width, initial-scale=1.0<span>\"</span></span> <span>/></span></span>\n    <span><span><span>&lt;</span>meta</span> <span>http-equiv</span><span><span>=</span><span>\"</span>X-UA-Compatible<span>\"</span></span> <span>content</span><span><span>=</span><span>\"</span>IE=edge,chrome=1<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>link</span> <span>href</span><span><span>=</span><span>\"</span>favicon.ico<span>\"</span></span> <span>type</span><span><span>=</span><span>\"</span>image/x-icon<span>\"</span></span> <span>/></span></span>\n    <span><span><span>&lt;</span>title</span><span>></span></span>demo03<span><span><span>&lt;/</span>title</span><span>></span></span>\n  <span><span><span>&lt;/</span>head</span><span>></span></span>\n  <span><span><span>&lt;</span>body</span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>\"</span>root<span>\"</span></span> <span>/></span></span>\n    <span><span><span>&lt;</span>script</span> <span>src</span><span><span>=</span><span>\"</span>https://cdn.jsdelivr.net/npm/react@17.0.1/umd/react.production.min.js<span>\"</span></span><span>></span></span><span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n    <span><span><span>&lt;</span>script</span> <span>src</span><span><span>=</span><span>\"</span>https://cdn.jsdelivr.net/npm/react-dom@17.0.1/umd/react-dom.production.min.js<span>\"</span></span><span>></span></span><span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n  <span><span><span>&lt;/</span>body</span><span>></span></span>\n<span><span><span>&lt;/</span>html</span><span>></span></span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><ul>\n<li>公共 cdn 链接指定的依赖版本，要和项目内使用的依赖版本一致，不然可能导致开发和生产环境的表现不一致。</li>\n<li><code>react</code> 的 cdn 链接中暴露了 <code>React</code> 这个变量，而 <code>react-dom</code> 的 cdn 链接中暴露了 <code>ReactDOM</code> 这个变量，对应地，我们要把这两个变量指定为对应键的值。</li>\n</ul>\n<p>我们尝试构建一下。最终构建的文件中，没有 <code>react</code> 和 <code>react-dom</code> 的存在。运行测试正常。我们也可以借助 <code>html-webpack-externals-plugin</code> 来实现类似的功能，这里不再做相应的演示，感兴趣的可以自行查看资料。</p>\n<p>但是更多时候，比起相信公共 cdn，相信自己更好。不使用公共 cdn，我们可以自行把这些基础依赖抽离出来统一放置。这么做要比使用公共 cdn 更好，无需手动指定、更新公共 cdn 的依赖版本，也无需考虑公共 cdn 的稳定性。</p>\n<p><code>webpack</code> 已经内置了这部分优化，但还需要进一步配置。我们要做的就是配置 <code>optimization.splitChunks</code>，让这部分内置的优化更紧贴我们的项目。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/config/webpack.prod.js</span>\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  mode<span>:</span> <span>'production'</span><span>,</span>\n  <span>...</span><span>,</span>\n  optimization<span>:</span> <span>{</span>\n    <span>...</span><span>,</span>\n    splitChunks<span>:</span> <span>{</span>\n      chunks<span>:</span> <span>'all'</span><span>,</span>\n    <span>}</span><span>,</span>\n    <span>...</span><span>,</span>\n  <span>}</span><span>,</span>\n  <span>...</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><ul>\n<li>使用 <code>optimization.splitChunks</code>，表示我们想要手动配置地分离 <code>chunk</code>，而路径和名称会跟随 <code>output.path</code>。</li>\n<li>指定 <code>chunks: 'all'</code>，表示我们想要把所有引入的库从已有的业务代码中分离出来。</li>\n</ul>\n<p>具体需要怎么分离呢？一个常见的配置是，项目内的组件库单独成一个 <code>chunk</code>，然后 <code>node_modules</code> 文件夹内同步引入的其他依赖单独成一个 <code>chunk</code>，最后是项目内封装的自定义组件（也就是页面公共组件）单独成一个 <code>chunk</code>。</p>\n<p>我们通过 <code>optimization.cacheGroups</code> 来配置。首先是项目内的组件库 <code>zent</code> 单独成一个 <code>chunk</code>。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/config/webpack.prod.js</span>\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  mode<span>:</span> <span>'production'</span><span>,</span>\n  <span>...</span><span>,</span>\n  optimization<span>:</span> <span>{</span>\n    <span>...</span><span>,</span>\n    splitChunks<span>:</span> <span>{</span>\n      chunks<span>:</span> <span>'all'</span><span>,</span>\n      cacheGroups<span>:</span> <span>{</span>\n        zent<span>:</span> <span>{</span>\n          name<span>:</span> <span>'chunk-zent'</span><span>,</span>\n          priority<span>:</span> <span>30</span><span>,</span>\n          test<span>:</span> <span><span>/</span><span>[\\\\/]node_modules[\\\\/]_?zent(.*)</span><span>/</span></span><span>,</span>\n        <span>}</span><span>,</span>\n      <span>}</span><span>,</span>\n    <span>}</span><span>,</span>\n    <span>...</span><span>,</span>\n  <span>}</span><span>,</span>\n  <span>...</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>接着是 <code>node_modules</code> 文件夹内同步引入的其他依赖。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/config/webpack.prod.js</span>\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  mode<span>:</span> <span>'production'</span><span>,</span>\n  <span>...</span><span>,</span>\n  optimization<span>:</span> <span>{</span>\n    <span>...</span><span>,</span>\n    splitChunks<span>:</span> <span>{</span>\n      chunks<span>:</span> <span>'all'</span><span>,</span>\n      cacheGroups<span>:</span> <span>{</span>\n        <span>...</span><span>,</span>\n        vendors<span>:</span> <span>{</span>\n          name<span>:</span> <span>'chunk-vendors'</span><span>,</span>\n          test<span>:</span> <span><span>/</span><span>[\\\\/]node_modules[\\\\/]</span><span>/</span></span><span>,</span>\n          priority<span>:</span> <span>20</span><span>,</span>\n          chunks<span>:</span> <span>'initial'</span><span>,</span>\n        <span>}</span><span>,</span>\n      <span>}</span><span>,</span>\n    <span>}</span><span>,</span>\n    <span>...</span><span>,</span>\n  <span>}</span><span>,</span>\n  <span>...</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><ul>\n<li><code>vendors</code> 的 <code>priority</code> 设置得比 <code>zent</code> 的 <code>priority</code> 低，因此，<code>zent</code> 会优先生成一个 <code>chunk</code>，而 <code>vendors</code> 对应的 <code>chunk</code> 不会再包含 <code>zent</code>。</li>\n<li>设置 <code>vendors.chunks</code> 为 <code>initial</code>，意味着 <code>chunk-vendors</code> 只会包含代码中同步引入的部分，异步引入的部分会加入到 <code>${PROJECT_DIR}/dist/app.[chunkhash:8].js</code> 中。</li>\n</ul>\n<p>最后则是页面公共组件。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/config/webpack.prod.js</span>\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  mode<span>:</span> <span>'production'</span><span>,</span>\n  <span>...</span><span>,</span>\n  optimization<span>:</span> <span>{</span>\n    <span>...</span><span>,</span>\n    splitChunks<span>:</span> <span>{</span>\n      chunks<span>:</span> <span>'all'</span><span>,</span>\n      cacheGroups<span>:</span> <span>{</span>\n        <span>...</span><span>,</span>\n        components<span>:</span> <span>{</span>\n          name<span>:</span> <span>'chunk-components'</span><span>,</span>\n          test<span>:</span> path<span>.</span><span>resolve</span><span>(</span><span>'src'</span><span>,</span> <span>'components'</span><span>)</span><span>,</span>\n          minChunks<span>:</span> <span>2</span><span>,</span>\n          priority<span>:</span> <span>10</span><span>,</span>\n          reuseExistingChunk<span>:</span> <span>true</span><span>,</span>\n        <span>}</span><span>,</span>\n      <span>}</span><span>,</span>\n    <span>}</span><span>,</span>\n    <span>...</span><span>,</span>\n  <span>}</span><span>,</span>\n  <span>...</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><ul>\n<li><code>minChunks</code> 表示最小引用次数，这里设置为 2，即 <code>chunk-components</code> 内的代码都被其他 <code>.js</code> 中的代码引用过 2 次或以上。</li>\n<li><code>reuseExistingChunk: true</code> 表示如果 <code>chunk-components</code> 包含了已经被分离出来的部分（某些代码已经被分进了自定义 <code>chunk</code> 中），这些部分会被复用而不再打包进 <code>chunk-components</code> 中。</li>\n</ul>\n<p>我们可以构建一下，看看效果。查看构建文件可以发现，<code>html-webpack-plugin</code> 已经自动引入了各个 <code>chunk</code>，无需我们操心。</p>\n<p>下面是我在构建后的截图（并非最新版本，仅供参考）。</p>\n<p><img src=\"https://ae01.alicdn.com/kf/U9cbdde6f3a1f4b728dcb3f9902ac9300C.jpg\" alt=\"有 splitChunks 构建效果图\" /></p>\n<ul>\n<li>列 <code>Asset</code> 给出了打包出来的各个文件的位置和名称。</li>\n<li>列 <code>Size</code> 给出了打包出来的各个文件的大小。</li>\n<li>列 <code>Chunks</code> 和 <code>Chunk Names</code> 是我们所要关注的重点。\n<ul>\n<li><code>Chunk Names</code> 一共三个：<code>app</code>，<code>chunk-zent</code> 和 <code>chunk-vendors</code>。</li>\n<li><code>app</code> 就是我们设置的 <code>entry</code> 键值，也就是说，<code>entry</code> 本身就会生成一个 <code>chunk</code>。</li>\n<li><code>chunk-zent</code> 和 <code>chunk-vendors</code> 是我们配置后从 <code>chunk app</code> 中分离出来的 <code>chunk</code>，位置和命名会跟随 <code>output.filename</code>（也就是 <code>${PROJECT_DIR}/dist/[name]:[chunkhash:8].js</code>）。</li>\n<li><code>react</code> 和 <code>react-dom</code> 已经被加入到 <code>chunk-vendors</code> 中。</li>\n<li>我们如果修改 <code>${PROJECT_DIR}/src/index.js</code>，就会发现只有 <code>app</code> 对应的文件指纹发生了变化，而 <code>chunk-zent</code> 和 <code>chunk-vendors</code> 的文件指纹没有发生变化。这样就使得这两个部分能有效地缓存，减少请求时间。</li>\n<li>没有 <code>chunk-components</code>，这是因为我们目前没有使用任何的页面公共组件。</li>\n</ul>\n</li>\n</ul>\n<p>没有 <code>splitChunks</code> 的构建后的截图如下所示。</p>\n<p><img src=\"https://ae01.alicdn.com/kf/Uabea4a17c0224557bf1213cd32339ea01.jpg\" alt=\"没有 splitChunks 构建效果图\" /></p>\n<p>可以看到，如果不使用 <code>splitChunks</code>，几乎所有的代码都会挤到 <code>app.[chunkhash:8].js</code> 里，在比较大的项目中，文件就会变得非常大。如果不更新基础库，用户就要耗费大量时间在获取包含了基础库代码的文件上。而使用了 <code>splitChunks</code>，在不更新基础库的前提下，用户只需要获取包含了最新业务代码的相关文件（也就是 <code>app</code> 相关的文件），缩短了获取的时间。</p>\n<p>但使用了 <code>splitChunks</code> 后，另一个问题也暴露出来了，那就是所有 <code>.js</code> 文件都放到了 <code>${PROJECT_DIR}/dist</code> 目录下，这并不利于管理。</p>\n<p>和前面对字体、图片、<code>.css</code> 文件的配置类似，我们可以让 <code>.js</code> 文件都放入特定的文件夹中。我们修改 <code>output.filename</code>，使得所有的 <code>.js</code> 文件都会放入 <code>${PROJECT_DIR}/dist/js</code> 文件夹里。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/config/webpack.prod.js</span>\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>...</span><span>,</span>\n  output<span>:</span> <span>{</span>\n    path<span>:</span> path<span>.</span><span>resolve</span><span>(</span><span>'dist'</span><span>)</span><span>,</span>\n    filename<span>:</span> <span>'js/[name].[chunkhash:8].js'</span><span>,</span>\n  <span>}</span><span>,</span>\n  <span>...</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h3 id=\"使用-gzip-文件\"> 使用 gzip 文件</h3>\n<p>gzip 是一种数据压缩格式，或者说是一种文件格式。在生产环境打包的最后阶段，为生成的文件生成对应的 <code>.gz</code> 文件，可以有效地减小文件体积，让支持 gzip 的浏览器更快地加载页面。</p>\n<div><pre><code><span>npm</span> i compression-webpack-plugin@~6.1.1 -D\n</code></pre>\n<div><span>1</span><br></div></div><p>然后我们在 <code>${PROJECT_DIR}/config/webpack.prod.js</code> 里配置它。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/config/webpack.prod.js</span>\n<span>...</span>\n<span>const</span> CompressionPlugin <span>=</span> <span>require</span><span>(</span><span>'compression-webpack-plugin'</span><span>)</span><span>;</span>\n\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>...</span><span>,</span>\n  plugins<span>:</span> <span>[</span>\n    <span>...</span><span>,</span>\n    <span>new</span> <span>CompressionPlugin</span><span>(</span><span>{</span>\n      test<span>:</span> <span><span>/</span><span>\\.(html|css|js|png|jpg|jpeg|gif|woff|woff2|eot|ttf|otf)$</span><span>/</span></span><span>,</span>\n    <span>}</span><span>)</span><span>,</span>\n  <span>]</span><span>,</span>\n  <span>...</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>在上面，我们配置了 <code>compression-webpack-plugin</code> 去处理生成的 <code>.html</code>，<code>.css</code>，<code>.js</code>，<code>.png</code> 等文件。默认地，它会使用 gzip 算法去压缩处理。</p>\n<p>但 <code>compression-webpack-plugin</code> 还有一个默认的限制，那就是如果生成的 <code>.gz</code> 文件的大小不能达到原文件的 80% 或以下，就不会去生成<code>.gz</code>文件。这是为了减少不必要的压缩，提高处理速度，在大型项目里提高的速度尤为明显。</p>\n<p>我们可以构建一下，看看效果。查看构建文件可以发现，文件基本都出现了对应的 <code>.gz</code> 文件。</p>\n<h3 id=\"环境变量和模式\"> 环境变量和模式</h3>\n<p>在实际开发的时候，<code>development</code> 和 <code>production</code> 两个模式还不够，我们往往还需要第三个甚至第四个模式，每个模式可能还会有不同的环境变量，但配置基本都是使用 <code>development</code> 模式或 <code>production</code> 模式的配置。</p>\n<p>首先安装相关的依赖。</p>\n<div><pre><code><span>npm</span> i dotenv@~8.2.0 -D\n</code></pre>\n<div><span>1</span><br></div></div><p>接着来修改一下 <code>${PROJECT_DIR}/config/webpack.config.js</code>。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/config/webpack.config.js</span>\n<span>const</span> devConfig <span>=</span> <span>require</span><span>(</span><span>'./webpack.dev.js'</span><span>)</span><span>;</span>\n<span>const</span> prodConfig <span>=</span> <span>require</span><span>(</span><span>'./webpack.prod.js'</span><span>)</span><span>;</span>\n\nmodule<span>.</span><span>exports</span> <span>=</span> <span>(</span><span>env<span>,</span> argv</span><span>)</span> <span>=></span> <span>{</span>\n  <span>const</span> mode <span>=</span> argv<span>.</span>mode <span>||</span> <span>'production'</span><span>;</span>\n\n  process<span>.</span>env<span>.</span><span>NODE_ENV</span> <span>=</span> process<span>.</span>env<span>.</span><span>NODE_ENV</span> <span>||</span> <span>'production'</span><span>;</span>\n\n  <span>switch</span> <span>(</span>process<span>.</span>env<span>.</span><span>NODE_ENV</span><span>)</span> <span>{</span>\n    <span>case</span> <span>'development'</span><span>:</span>\n      <span>return</span> devConfig<span>;</span>\n    <span>default</span><span>:</span>\n      <span>return</span> prodConfig<span>;</span>\n  <span>}</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><ul>\n<li>把 <code>module.exports</code> 改写成函数形式，第一个参数 <code>env</code> 是 <code>webpack</code> 命令里使用 <code>--env</code> 设置的值组成的对象，第二个参数是所有命令参数组成的对象。</li>\n<li>为 <code>process.env.NODE_ENV</code> 设置一个默认值 <code>production</code>。</li>\n<li><code>env</code> 和 <code>process.env</code> 是两个不同的对象，<code>env</code> 是 <code>webpack</code> 生成的，而 <code>process.env</code> 是由 node 生成的，可以在 <code>webpack</code> 配置文件中直接使用。</li>\n<li>一般地，我们用 <code>process.env.NODE_ENV</code> 来指定构建模式，一般只有 <code>development</code> 和 <code>production</code> 两种取值。</li>\n</ul>\n<p>然后修改 <code>${PROJECT_DIR}/package.json</code> 里面的 <code>scripts</code>。非复杂情况下，<code>cross-env</code> 可以不再使用，复杂情况可以参考 uni-app 官方模板，为了在统一模式下构建不同端的代码，需要用到 <code>cross-env</code> 来指定不同端的 <code>process.env.UNI_PLATFORM</code>。</p>\n<div><pre><code><span>{</span>\n  ...<span>,</span>\n  <span>\"scripts\"</span><span>:</span> <span>{</span>\n    <span>\"dev\"</span><span>:</span> <span>\"webpack serve --config ./config/webpack.config.js --progress --mode=development\"</span><span>,</span>\n    <span>\"build\"</span><span>:</span> <span>\"webpack --config ./config/webpack.config.js --mode=production\"</span>\n  <span>}</span><span>,</span>\n  ...\n<span>}</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><ul>\n<li><code>--mode=development</code> 指定了 <code>argv.mode</code> 和 <code>process.env.NODE_ENV</code> 为 <code>development</code>。</li>\n<li><code>--mode=production</code> 指定了 <code>argv.mode</code> 和 <code>process.env.NODE_ENV</code> 为 <code>production</code>。</li>\n<li>这里的 <code>mode</code> 仅用于指定模式，以读取对应的环境变量。</li>\n</ul>\n<p>我们再来为已有的两种模式添加环境变量。一般对于环境变量有以下的约定，内容优先级依次递增。</p>\n<table>\n<thead>\n<tr>\n<th>文件</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>${PROJECT_DIR}/.env</code></td>\n<td>所有模式的环境变量</td>\n</tr>\n<tr>\n<td><code>${PROJECT_DIR}/.env.local</code></td>\n<td>所有模式的环境变量，本地使用</td>\n</tr>\n<tr>\n<td><code>${PROJECT_DIR}/.env.[mode]</code></td>\n<td>特定模式的环境变量</td>\n</tr>\n<tr>\n<td><code>${PROJECT_DIR}/.env.[mode].local</code></td>\n<td>特定模式的环境变量，本地使用</td>\n</tr>\n</tbody>\n</table>\n<p>而环境变量文件只会包含环境变量的键值对，下面是我们将要使用的三个文件。</p>\n<div><pre><code><span># env.development</span>\n<span>NODE_ENV</span><span>=</span>development\n<span>APP_MODE</span><span>=</span>development\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><div><pre><code><span># env.staging</span>\n<span>NODE_ENV</span><span>=</span>production\n<span>APP_MODE</span><span>=</span>staging\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><div><pre><code><span># env.production</span>\n<span>NODE_ENV</span><span>=</span>production\n<span>APP_MODE</span><span>=</span>production\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>之后，我们在 <code>${PROJECT_DIR}/config/webpack.config.js</code> 里根据 <code>mode</code> 读取对应的环境变量文件并添加到 <code>process.env</code> 里。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/config/webpack.config.js</span>\n<span>const</span> dotenv <span>=</span> <span>require</span><span>(</span><span>'dotenv'</span><span>)</span><span>;</span>\n<span>const</span> fs <span>=</span> <span>require</span><span>(</span><span>'fs'</span><span>)</span><span>;</span>\n<span>const</span> path <span>=</span> <span>require</span><span>(</span><span>'path'</span><span>)</span><span>;</span>\n<span>const</span> <span>{</span> merge <span>}</span> <span>=</span> <span>require</span><span>(</span><span>'webpack-merge'</span><span>)</span><span>;</span>\n<span>const</span> SpeedMeasurePlugin <span>=</span> <span>require</span><span>(</span><span>'speed-measure-webpack-plugin'</span><span>)</span><span>;</span>\n<span>const</span> baseConfig <span>=</span> <span>require</span><span>(</span><span>'./webpack.base.js'</span><span>)</span><span>;</span>\n<span>const</span> devConfig <span>=</span> <span>require</span><span>(</span><span>'./webpack.dev.js'</span><span>)</span><span>;</span>\n<span>const</span> prodConfig <span>=</span> <span>require</span><span>(</span><span>'./webpack.prod.js'</span><span>)</span><span>;</span>\n\nmodule<span>.</span><span>exports</span> <span>=</span> <span>(</span><span>env<span>,</span> argv</span><span>)</span> <span>=></span> <span>{</span>\n  <span>const</span> mode <span>=</span> argv<span>.</span>mode <span>||</span> <span>'production'</span><span>;</span>\n\n  <span>const</span> envConfig <span>=</span> <span>{</span><span>}</span><span>;</span>\n  <span>let</span> tmpEnvConfig <span>=</span> <span>{</span><span>}</span><span>;</span>\n  <span>const</span> envFiles <span>=</span> <span>[</span><span>'.env'</span><span>,</span> <span>'.env.local'</span><span>,</span> <span><span>`</span><span>.env.</span><span><span>${</span>mode<span>}</span></span><span>`</span></span><span>,</span> <span><span>`</span><span>.env.</span><span><span>${</span>mode<span>}</span></span><span>.local</span><span>`</span></span><span>]</span><span>;</span>\n  envFiles<span>.</span><span>forEach</span><span>(</span><span>(</span><span>envFile</span><span>)</span> <span>=></span> <span>{</span>\n    <span>const</span> envFilePath <span>=</span> path<span>.</span><span>resolve</span><span>(</span>envFile<span>)</span><span>;</span>\n    <span>if</span> <span>(</span>fs<span>.</span><span>existsSync</span><span>(</span>envFilePath<span>)</span><span>)</span> <span>{</span>\n      tmpEnvConfig <span>=</span> dotenv<span>.</span><span>parse</span><span>(</span>fs<span>.</span><span>readFileSync</span><span>(</span>envFilePath<span>)</span><span>)</span><span>;</span>\n      <span>const</span> keys <span>=</span> Object<span>.</span><span>keys</span><span>(</span>tmpEnvConfig<span>)</span><span>;</span>\n      keys<span>.</span><span>forEach</span><span>(</span><span>(</span><span>k</span><span>)</span> <span>=></span> <span>{</span>\n        envConfig<span>[</span>k<span>]</span> <span>=</span> tmpEnvConfig<span>[</span>k<span>]</span><span>;</span>\n      <span>}</span><span>)</span><span>;</span>\n    <span>}</span>\n  <span>}</span><span>)</span><span>;</span>\n  envConfig<span>.</span><span>NODE_ENV</span> <span>=</span> envConfig<span>.</span><span>NODE_ENV</span> <span>||</span> <span>'production'</span><span>;</span>\n  <span>const</span> keys <span>=</span> Object<span>.</span><span>keys</span><span>(</span>envConfig<span>)</span><span>;</span>\n  keys<span>.</span><span>forEach</span><span>(</span><span>(</span><span>k</span><span>)</span> <span>=></span> <span>{</span>\n    process<span>.</span>env<span>[</span>k<span>]</span> <span>=</span> envConfig<span>[</span>k<span>]</span><span>;</span>\n  <span>}</span><span>)</span><span>;</span>\n\n  <span>switch</span> <span>(</span>process<span>.</span>env<span>.</span><span>NODE_ENV</span><span>)</span> <span>{</span>\n    <span>case</span> <span>'development'</span><span>:</span>\n      <span>return</span> <span>merge</span><span>(</span>baseConfig<span>,</span> devConfig<span>)</span><span>;</span>\n    <span>default</span><span>:</span>\n      <span>return</span> <span>merge</span><span>(</span>baseConfig<span>,</span> prodConfig<span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br></div></div><ul>\n<li><code>dotenv</code> 是一个用于处理环境变量文件的库，使用 <code>dotenv.parse</code> 可以解析环境变量文件的内容，得到一个对象。</li>\n<li><code>fs</code> 是 node 的内置库，<code>fs.existsSync</code> 可以检查对应路径的文件是否存在，如果存在就调用 <code>fs.readFileSync</code> 来读取文件内容，并传递给 <code>dotenv.parse</code> 做解析。</li>\n</ul>\n<p>另外修改 <code>package.json</code> 里面的 <code>scripts</code> 字段。</p>\n<div><pre><code><span>{</span>\n  ...<span>,</span>\n  <span>\"scripts\"</span><span>:</span> <span>{</span>\n    <span>\"dev\"</span><span>:</span> <span>\"webpack serve --config ./config/webpack.config.js --progress --mode=development\"</span><span>,</span>\n    <span>\"staging-build\"</span><span>:</span> <span>\"webpack serve --config ./config/webpack.config.js --mode=staging\"</span><span>,</span>\n    <span>\"build\"</span><span>:</span> <span>\"webpack --config ./config/webpack.config.js --mode=production\"</span>\n  <span>}</span><span>,</span>\n  ...\n<span>}</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>现在，我们就已经添加了一个 <code>staging</code> 环境，它会使用 <code>production</code> 模式的构建配置。</p>\n<p>为了在 js 里也能直接使用环境变量，我们还需要使用 <code>webpack.DefinePlugin</code> 指定对应的值。下面是完整的配置文件。</p>\n<div><pre><code><span>const</span> dotenv <span>=</span> <span>require</span><span>(</span><span>'dotenv'</span><span>)</span><span>;</span>\n<span>const</span> fs <span>=</span> <span>require</span><span>(</span><span>'fs'</span><span>)</span><span>;</span>\n<span>const</span> path <span>=</span> <span>require</span><span>(</span><span>'path'</span><span>)</span><span>;</span>\n<span>const</span> <span>{</span> merge <span>}</span> <span>=</span> <span>require</span><span>(</span><span>'webpack-merge'</span><span>)</span><span>;</span>\n<span>const</span> SpeedMeasurePlugin <span>=</span> <span>require</span><span>(</span><span>'speed-measure-webpack-plugin'</span><span>)</span><span>;</span>\n<span>const</span> webpack <span>=</span> <span>require</span><span>(</span><span>'webpack'</span><span>)</span><span>;</span>\n<span>const</span> baseConfig <span>=</span> <span>require</span><span>(</span><span>'./webpack.base.js'</span><span>)</span><span>;</span>\n<span>const</span> devConfig <span>=</span> <span>require</span><span>(</span><span>'./webpack.dev.js'</span><span>)</span><span>;</span>\n<span>const</span> prodConfig <span>=</span> <span>require</span><span>(</span><span>'./webpack.prod.js'</span><span>)</span><span>;</span>\n\nmodule<span>.</span><span>exports</span> <span>=</span> <span>(</span><span>env<span>,</span> argv</span><span>)</span> <span>=></span> <span>{</span>\n  <span>const</span> mode <span>=</span> argv<span>.</span>mode <span>||</span> <span>'production'</span><span>;</span>\n\n  <span>const</span> envConfig <span>=</span> <span>{</span><span>}</span><span>;</span>\n  <span>let</span> tmpEnvConfig <span>=</span> <span>{</span><span>}</span><span>;</span>\n  <span>const</span> envFiles <span>=</span> <span>[</span><span>'.env'</span><span>,</span> <span>'.env.local'</span><span>,</span> <span><span>`</span><span>.env.</span><span><span>${</span>mode<span>}</span></span><span>`</span></span><span>,</span> <span><span>`</span><span>.env.</span><span><span>${</span>mode<span>}</span></span><span>.local</span><span>`</span></span><span>]</span><span>;</span>\n  envFiles<span>.</span><span>forEach</span><span>(</span><span>(</span><span>envFile</span><span>)</span> <span>=></span> <span>{</span>\n    <span>const</span> envFilePath <span>=</span> path<span>.</span><span>resolve</span><span>(</span>envFile<span>)</span><span>;</span>\n    <span>if</span> <span>(</span>fs<span>.</span><span>existsSync</span><span>(</span>envFilePath<span>)</span><span>)</span> <span>{</span>\n      tmpEnvConfig <span>=</span> dotenv<span>.</span><span>parse</span><span>(</span>fs<span>.</span><span>readFileSync</span><span>(</span>envFilePath<span>)</span><span>)</span><span>;</span>\n      <span>const</span> keys <span>=</span> Object<span>.</span><span>keys</span><span>(</span>tmpEnvConfig<span>)</span><span>;</span>\n      keys<span>.</span><span>forEach</span><span>(</span><span>(</span><span>k</span><span>)</span> <span>=></span> <span>{</span>\n        envConfig<span>[</span>k<span>]</span> <span>=</span> tmpEnvConfig<span>[</span>k<span>]</span><span>;</span>\n      <span>}</span><span>)</span><span>;</span>\n    <span>}</span>\n  <span>}</span><span>)</span><span>;</span>\n  envConfig<span>.</span><span>NODE_ENV</span> <span>=</span> envConfig<span>.</span><span>NODE_ENV</span> <span>||</span> <span>'production'</span><span>;</span>\n\n  <span>const</span> definePluginOptions <span>=</span> <span>{</span><span>}</span><span>;</span>\n  <span>const</span> keys <span>=</span> Object<span>.</span><span>keys</span><span>(</span>envConfig<span>)</span><span>;</span>\n  keys<span>.</span><span>forEach</span><span>(</span><span>(</span><span>k</span><span>)</span> <span>=></span> <span>{</span>\n    process<span>.</span>env<span>[</span>k<span>]</span> <span>=</span> envConfig<span>[</span>k<span>]</span><span>;</span>\n    definePluginOptions<span>[</span><span><span>`</span><span>process.env.</span><span><span>${</span>k<span>}</span></span><span>`</span></span><span>]</span> <span>=</span> <span>JSON</span><span>.</span><span>stringify</span><span>(</span>envConfig<span>[</span>k<span>]</span><span>)</span><span>;</span>\n  <span>}</span><span>)</span><span>;</span>\n  <span>const</span> plugins <span>=</span> <span>[</span><span>new</span> <span>webpack<span>.</span>DefinePlugin</span><span>(</span>definePluginOptions<span>)</span><span>]</span><span>;</span>\n\n  <span>switch</span> <span>(</span>process<span>.</span>env<span>.</span><span>NODE_ENV</span><span>)</span> <span>{</span>\n    <span>case</span> <span>'development'</span><span>:</span>\n      <span>return</span> <span>merge</span><span>(</span>baseConfig<span>,</span> devConfig<span>,</span> <span>{</span>\n        plugins<span>,</span>\n      <span>}</span><span>)</span><span>;</span>\n    <span>default</span><span>:</span>\n      <span>return</span> <span>merge</span><span>(</span>baseConfig<span>,</span> prodConfig<span>,</span> <span>{</span>\n        plugins<span>,</span>\n      <span>}</span><span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br></div></div><p>到这里，我们已经添加了一个新构建模式 <code>staging</code>，并且可以在 js 代码里使用 <code>process.env.NODE_ENV</code> 和 <code>process.env.APP_MODE</code> 来获取构建模式对应的环境变量了，甚至你可以在 <code>${PROJECT_DIR}/public/index.html</code> 里使用它们（<a href=\"https://github.com/jantimon/html-webpack-plugin#writing-your-own-templates\" target=\"_blank\" rel=\"noopener noreferrer\">参考</a>）。</p>\n<h3 id=\"格式化和检验代码\"> 格式化和检验代码</h3>\n<p><code>eslint</code> 是现在最热门的 js 校验工具，我们也可以在 <code>webpack</code> 中使用 <code>eslint</code>。</p>\n<div><pre><code><span>npm</span> i @modyqyw/fabric@~1.14.0 -D\n<span>npm</span> i eslint@~7.19.0 -D\n<span>npm</span> i eslint-webpack-plugin@~2.5.0 -D\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p><code>eslint-webpack-plugin</code> 是 <code>eslint-loader</code> 的替代品，配置相差不大，而且 <code>eslint-webpack-plugin</code> 还修复了一些问题，推荐使用。</p>\n<p>安装完依赖之后，我们可以在根目录下建立一个新文件 <code>.eslintrc.js</code> 作为 <code>eslint</code> 的配置文件。这里用我自己封装的 <code>eslint</code> 规则来演示。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/.eslintrc.js</span>\n<span>/* eslint-disable import/no-extraneous-dependencies */</span>\n<span>const</span> config <span>=</span> <span>require</span><span>(</span><span>'@modyqyw/fabric/eslint/react'</span><span>)</span><span>;</span>\n\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>...</span>config<span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>无论是开发环境还是生产环境都需要使用到 <code>eslint</code> 在构建过程中校验，所以我们需要在公共的配置文件里加入 <code>eslint-webpack-plugin</code>。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/config/webpack.base.js</span>\n<span>/* eslint-disable import/no-extraneous-dependencies */</span>\n<span>...</span>\n<span>const</span> ESLintPlugin <span>=</span> <span>require</span><span>(</span><span>'eslint-webpack-plugin'</span><span>)</span><span>;</span>\n\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>...</span><span>,</span>\n  plugins<span>:</span> <span>[</span>\n    <span>...</span><span>,</span>\n    <span>new</span> <span>ESLintPlugin</span><span>(</span><span>{</span>\n      files<span>:</span> <span>'src'</span><span>,</span>\n      extensions<span>:</span> <span>[</span><span>'js'</span><span>,</span> <span>'jsx'</span><span>,</span> <span>'ts'</span><span>,</span> <span>'tsx'</span><span>]</span><span>,</span>\n      fix<span>:</span> <span>true</span><span>,</span>\n    <span>}</span><span>)</span><span>,</span>\n  <span>]</span><span>,</span>\n  <span>...</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><ul>\n<li><code>/* eslint-disable import/no-extraneous-dependencies */</code> 表示让 <code>eslint</code> 在这个文件内忽略 <code>eslint-plugin-import</code> 里面的 <code>no-extraneous-dependencies</code> 规则，减少不必要的麻烦。</li>\n<li><code>files: src</code> 表示需要校验 <code>src</code> 目录，默认地，等同于 <code>${PROJECT_DIR}/src</code>。</li>\n<li><code>extensions: ['js', 'jsx', 'ts', 'tsx']</code> 表示需要校验 <code>.js</code>，<code>.jsx</code>，<code>.ts</code>，<code>.tsx</code>。</li>\n<li><code>fix: true</code>表示开启自动修复功能。</li>\n</ul>\n<p>现在，我们执行命令 <code>npm run dev</code> 和 <code>npm run build</code>，<code>eslint</code> 会自动执行。如果出现了不能自动修复的错误，会在命令行里面提示错误。</p>\n<div><pre><code> ERROR  Failed to compile with <span>1</span> errors\n\n error\n\n\n<span>..</span>./webpack4-demos/demo03/src/App.jsx\n  <span>14</span>:5  error  Do not use <span>'new'</span> <span>for</span> side effects  no-new\n  <span>26</span>:11  error  img elements must have an alt prop, either with meaningful text, or an empty string <span>for</span> decorative images  jsx-a11y/alt-text\n\n✖ <span>2</span> problem <span>(</span><span>2</span> errors, <span>0</span> warnings<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>我们只需要提示对应地改一下就可以了。前面加入 <code>Promise</code> 只是为了验证我们的配置，现在可以直接去掉。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/src/App.jsx</span>\n<span>import</span> React<span>,</span> <span>{</span> useEffect <span>}</span> <span>from</span> <span>'react'</span><span>;</span>\n<span>import</span> <span>{</span>\n  LayoutRow <span>as</span> Row<span>,</span>\n  LayoutCol <span>as</span> Col<span>,</span>\n  LayoutGrid <span>as</span> Grid<span>,</span>\n  Button<span>,</span>\n  Icon<span>,</span>\n<span>}</span> <span>from</span> <span>'zent'</span><span>;</span>\n<span>import</span> iconWebpack <span>from</span> <span>'./assets/webpack.png'</span><span>;</span>\n<span>import</span> <span>'./App.scss'</span><span>;</span>\n\n<span>const</span> <span>App</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n  <span>useEffect</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n    <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n      document<span>.</span>title <span>=</span> <span>'Hello World!'</span><span>;</span>\n    <span>}</span><span>,</span> <span>5000</span><span>)</span><span>;</span>\n  <span>}</span><span>,</span> <span>[</span><span>]</span><span>)</span><span>;</span>\n\n  <span>return</span> <span>(</span>\n    <span>&lt;</span>Grid<span>></span>\n      <span>&lt;</span>Row<span>></span>\n        <span>&lt;</span>Col span<span>=</span><span>{</span><span>24</span><span>}</span><span>></span>\n          <span>&lt;</span>img alt<span>=</span><span>\"webpack\"</span> className<span>=</span><span>\"icon\"</span> src<span>=</span><span>{</span>iconWebpack<span>}</span> <span>/</span><span>></span>\n          <span>&lt;</span>Button type<span>=</span><span>\"primary\"</span><span>></span>\n            <span>&lt;</span>Icon type<span>=</span><span>\"youzan\"</span> <span>/</span><span>></span>\n            Hello Zent<span>!</span>\n          <span>&lt;</span><span>/</span>Button<span>></span>\n        <span>&lt;</span><span>/</span>Col<span>></span>\n      <span>&lt;</span><span>/</span>Row<span>></span>\n    <span>&lt;</span><span>/</span>Grid<span>></span>\n  <span>)</span><span>;</span>\n<span>}</span><span>;</span>\n\n<span>export</span> <span>default</span> App<span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br></div></div><p>而 <code>stylelint</code> 是 css，less，sass，scss 等样式语言的校验工具，我们也可以在 <code>webpack</code> 中使用 <code>stylelint</code>。</p>\n<div><pre><code><span>npm</span> i stylelint@~13.9.0 -D\n<span>npm</span> i stylelint-webpack-plugin@~2.1.1 -D\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>安装完依赖之后，我们可以在根目录下建立一个新文件 <code>stylelint.config.js</code> 作为 <code>stylelint</code> 的配置文件。这里用我自己封装的 <code>stylelint</code> 规则来演示。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/stylelint.config.js</span>\n<span>/* eslint-disable import/no-extraneous-dependencies */</span>\n<span>const</span> config <span>=</span> <span>require</span><span>(</span><span>'@modyqyw/fabric/stylelint/scss'</span><span>)</span><span>;</span>\n\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>...</span>config<span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>无论是开发环境还是生产环境都需要使用到 <code>stylelint</code>，所以我们需要在公共的配置文件里加入 <code>stylelint-webpack-plugin</code>。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/config/webpack.config.js</span>\n<span>const</span> StylelintPlugin <span>=</span> <span>require</span><span>(</span><span>'stylelint-webpack-plugin'</span><span>)</span><span>;</span>\n\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>...</span><span>,</span>\n  plugins<span>:</span> <span>[</span>\n    <span>...</span><span>,</span>\n    <span>new</span> <span>StylelintPlugin</span><span>(</span><span>{</span>\n      files<span>:</span> <span>'src/**/*.scss'</span><span>,</span>\n      fix<span>:</span> <span>true</span><span>,</span>\n    <span>}</span><span>)</span><span>,</span>\n  <span>]</span><span>,</span>\n  <span>...</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><ul>\n<li><code>files: 'src/**/*.scss'</code> 表示让 <code>stylelint</code> 校验 <code>src</code> 目录下所有的 <code>.scss</code> 文件。</li>\n<li><code>fix: true</code> 表示开启自动修复功能。</li>\n</ul>\n<p>现在，我们执行命令 <code>npm run dev</code> 和 <code>npm run build</code>，<code>stylelint</code> 会自动执行。如果出现了不能自动修复的错误，会在命令行里面提示错误。</p>\n<p>考虑到我们的代码仓库大部分都是需要协作的 git 仓库，还有必要考虑使用 <code>editorconfig</code>，<code>prettier</code>，<code>commitizen</code>, <code>commitlint</code>，<code>husky</code>，<code>lint-staged</code> 等工具。因为和 <code>webpack</code> 关系不大，所以这里不做展开，但源代码中有给出示例配置。</p>\n<h3 id=\"优化日志显示\"> 优化日志显示</h3>\n<p>你可能会注意到，运行 <code>npm run build</code> 输出的信息，要比 <code>npm run dev</code> 输出的信息多得多。这是因为我们控制了 <code>webpack-dev-server</code> 输出的信息，类似地我们也可以控制 <code>webpack</code> 输出的信息。</p>\n<p>要控制 <code>webpack</code> 输出的信息很简单，只需要在 <code>${PROJECT_DIR}/config/webpack.prod.js</code> 中设置 <code>stats</code> 字段。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/webpack.prod.js</span>\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>...</span><span>,</span>\n  stats<span>:</span> <span>'minimal'</span><span>,</span>\n  <span>...</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p><code>stats</code> 用于控制显示哪些信息，默认为 <code>normal</code>。修改成 <code>minimal</code>，就可以达到和 <code>webpack-dev-server</code> 的配置一样的效果。但在需要分析时，我更建议使用 <code>normal</code>。</p>\n<h3 id=\"构建分析\"> 构建分析</h3>\n<p>在开发大型项目的时候，往往需要根据实际情况去做特定的优化，所以我们需要一些分析工具。</p>\n<div><pre><code><span>npm</span> i webpack-bundle-analyzer@~4.4.0 -D\n<span>npm</span> i speed-measure-webpack-plugin@~1.4.2 -D\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>使用 <code>webpack-bundle-analyzer</code> 来确定对应 <code>chunk</code> 的大小，然后考虑是否还需要调整。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/config/webpack.prod.js</span>\n<span>const</span> <span>{</span> merge <span>}</span> <span>=</span> <span>require</span><span>(</span><span>'webpack-merge'</span><span>)</span><span>;</span>\n<span>const</span> <span>{</span> BundleAnalyzerPlugin <span>}</span> <span>=</span> <span>require</span><span>(</span><span>'webpack-bundle-analyzer'</span><span>)</span><span>;</span>\n\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>...</span><span>,</span>\n  plugins<span>:</span> <span>[</span>\n    <span>new</span> <span>BundleAnalyzerPlugin</span><span>(</span><span>{</span>\n      analyzerMode<span>:</span> <span>'static'</span><span>,</span>\n      defaultSizes<span>:</span> <span>'stat'</span><span>,</span>\n      openAnalyzer<span>:</span> <span>false</span><span>,</span>\n    <span>}</span><span>)</span><span>,</span>\n    <span>...</span><span>,</span>\n  <span>]</span><span>,</span>\n  <span>...</span><span>,</span>\n<span>}</span><span>;</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>现在执行 <code>npm run build</code>，会生成一个分析文件 <code>${PROJECT_DIR}/dist/report.html</code>，它里面的内容就是各个 <code>chunk</code> 的大小，可以据此来做适当的调整，具体调整方案和实际情况相关。</p>\n<p>而考量不同阶段打包的时间，就需要使用 <code>speed-measure-webpack-plugin</code>。</p>\n<div><pre><code><span>// ${PROJECT_DIR}/config/webpack.config.js</span>\n<span>const</span> <span>{</span> merge <span>}</span> <span>=</span> <span>require</span><span>(</span><span>'webpack-merge'</span><span>)</span><span>;</span>\n<span>const</span> SpeedMeasurePlugin <span>=</span> <span>require</span><span>(</span><span>'speed-measure-webpack-plugin'</span><span>)</span><span>;</span>\n<span>const</span> webpack <span>=</span> <span>require</span><span>(</span><span>'webpack'</span><span>)</span><span>;</span>\n<span>const</span> baseConfig <span>=</span> <span>require</span><span>(</span><span>'./webpack.base.js'</span><span>)</span><span>;</span>\n<span>const</span> devConfig <span>=</span> <span>require</span><span>(</span><span>'./webpack.dev.js'</span><span>)</span><span>;</span>\n<span>const</span> prodConfig <span>=</span> <span>require</span><span>(</span><span>'./webpack.prod.js'</span><span>)</span><span>;</span>\n\nmodule<span>.</span><span>exports</span> <span>=</span> <span>(</span><span>env<span>,</span> argv</span><span>)</span> <span>=></span> <span>{</span>\n  <span>...</span>\n  <span>switch</span> <span>(</span>process<span>.</span>env<span>.</span><span>NODE_ENV</span><span>)</span> <span>{</span>\n    <span>case</span> <span>'development'</span><span>:</span>\n      <span>return</span> <span>merge</span><span>(</span>baseConfig<span>,</span> devConfig<span>,</span> <span>{</span>\n        plugins<span>,</span>\n      <span>}</span><span>)</span><span>;</span>\n    <span>default</span><span>:</span>\n      <span>return</span> <span>new</span> <span>SpeedMeasurePlugin</span><span>(</span><span>)</span><span>.</span><span>wrap</span><span>(</span>\n        <span>merge</span><span>(</span>baseConfig<span>,</span> prodConfig<span>,</span> <span>{</span>\n          plugins<span>,</span>\n        <span>}</span><span>)</span><span>,</span>\n      <span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span><span>;</span>\n\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><p>现在执行 <code>npm run build</code>，命令行里面会显示我们使用的 <code>plugin</code> 和 <code>loader</code> 的耗时。我们可以根据这些耗时来做适当的调整，缩短等待时间。</p>\n<p>🎉恭喜，你的第三个 webpack demo 已经完成啦～</p>\n<p>参考源代码见 <a href=\"https://github.com/ModyQyW/webpack4-demos/tree/master/demo03\" target=\"_blank\" rel=\"noopener noreferrer\">modyqyw/webpack-demos/demo03</a>。</p>\n<h2 id=\"一些简单的拓展\"> 一些简单的拓展</h2>\n<ul>\n<li>Scope Hoisting 作用域提升</li>\n</ul>\n<p>js 里面有变量提升和函数提升的概念，也就是把变量和函数的声明提升到当前作用域顶部。<code>webpack</code> 里面的作用域提升和它们类似，在某些情况下，<code>webpack</code> 会把被引入的 js 文件提升到引入者的顶部，减少创建的代码作用域，使得代码体积和内存开销变小。</p>\n<p>构建模式是 <code>production</code> 时，<code>webpack</code> 会自动开启作用域提升，你也可以用 <code>ModuleConcatenationPlugin</code> 来手动开启。</p>\n<p>作用域提升是针对 ESM 的，非 ESM 的情况下，<code>webpack</code> 会自动回退，不使用作用域提升。</p>\n<ul>\n<li>Hot Module Reload 模块热更新</li>\n</ul>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/12/1/16ec13499800dfce\" alt=\"热更新原理图\" /></p>\n<p><a href=\"https://juejin.im/post/6844904008432222215\" target=\"_blank\" rel=\"noopener noreferrer\">图源</a></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/9/2/16cf203824359397\" alt=\"热更新原理图\" /></p>\n<p><a href=\"https://juejin.cn/post/6844903933157048333\" target=\"_blank\" rel=\"noopener noreferrer\">图源</a></p>\n<ul>\n<li>Tree Shaking 摇树优化</li>\n</ul>\n<p>使用摇树优化是为了删除一些没有被使用的代码，同样，它也是依赖于 ESM 的。</p>\n<h2 id=\"结束\"> 结束</h2>\n<p>这篇笔记和示例到这里就结束了。当然，你的学习还没有结束，毕竟这里没有提及、深入很多东西，比如 CSS Modules 支持，MPA 的实践，SSR 支持，<code>webpack</code> 配置封装，使用 <code>webpack</code> 构建 <code>vue</code> 应用等等。不要忘了阅读参考部分，那里列举了大量参考资料。你也可以去查看 <code>create-react-app</code>，<code>@vue/cli</code>，<code>poi</code> 等优秀源码，学习更多的 <code>webpack</code> 配置。真正开发的时候，建议直接使用 cli。</p>\n<p>如果你发现任何问题，欢迎在下面评论提意见，或者提交 issue / pr。感谢你的阅读 😄</p>\n<h2 id=\"参考\"> 参考</h2>\n<ul>\n<li><a href=\"https://nodejs.org/dist/latest-v12.x/docs/api/path.html\" target=\"_blank\" rel=\"noopener noreferrer\">nodejs 12.x - path</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/CommonJS\" target=\"_blank\" rel=\"noopener noreferrer\">CommonJS</a></li>\n<li><a href=\"https://v4.webpack.js.org\" target=\"_blank\" rel=\"noopener noreferrer\">webpack</a></li>\n<li><a href=\"https://juejin.im/post/5d2b300de51d45775b419c76\" target=\"_blank\" rel=\"noopener noreferrer\">理解 webpack chunk</a></li>\n<li><a href=\"https://github.com/johnagan/clean-webpack-plugin#readme\" target=\"_blank\" rel=\"noopener noreferrer\">clean-webpack-plugin</a></li>\n<li><a href=\"https://github.com/webpack-contrib/copy-webpack-plugin#readme\" target=\"_blank\" rel=\"noopener noreferrer\">copy-webpack-plugin</a></li>\n<li><a href=\"https://github.com/geowarin/friendly-errors-webpack-plugin#readme\" target=\"_blank\" rel=\"noopener noreferrer\">friendly-errors-webpack-plugin</a></li>\n<li><a href=\"https://github.com/jantimon/html-webpack-plugin#readme\" target=\"_blank\" rel=\"noopener noreferrer\">html-webpack-plugin</a></li>\n<li><a href=\"https://stackoverflow.com/questions/41470771/webpack-does-the-order-of-plugins-matter\" target=\"_blank\" rel=\"noopener noreferrer\">webpack plugins 的顺序会影响什么吗？</a></li>\n<li><a href=\"https://babeljs.io/\" target=\"_blank\" rel=\"noopener noreferrer\">babel</a></li>\n<li><a href=\"https://github.com/babel/babel-loader#readme\" target=\"_blank\" rel=\"noopener noreferrer\">babel-loader</a></li>\n<li><a href=\"https://www.jiangruitao.com/docs/babel/\" target=\"_blank\" rel=\"noopener noreferrer\">babel 教程</a></li>\n<li><a href=\"https://github.com/browserslist/browserslist#readme\" target=\"_blank\" rel=\"noopener noreferrer\">browserslist</a></li>\n<li><a href=\"https://babeljs.io/docs/en/babel-preset-env\" target=\"_blank\" rel=\"noopener noreferrer\">@babel/preset-env</a></li>\n<li><a href=\"https://babeljs.io/docs/en/babel-preset-react\" target=\"_blank\" rel=\"noopener noreferrer\">@babel/preset-react</a></li>\n<li><a href=\"https://babeljs.io/docs/en/babel-plugin-transform-runtime\" target=\"_blank\" rel=\"noopener noreferrer\">@babel/plugin-transform-runtime</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/147083132\" target=\"_blank\" rel=\"noopener noreferrer\">@babel/plugin-transform-runtime 到底是什么</a></li>\n<li><a href=\"https://babeljs.io/docs/en/babel-polyfill\" target=\"_blank\" rel=\"noopener noreferrer\">@babel/polyfill</a></li>\n<li><a href=\"https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/babel-preset-app\" target=\"_blank\" rel=\"noopener noreferrer\">@vue/babel-preset-app</a></li>\n<li><a href=\"https://github.com/zloirock/core-js#readme\" target=\"_blank\" rel=\"noopener noreferrer\">core-js</a></li>\n<li><a href=\"https://github.com/facebook/regenerator/tree/master/packages/regenerator-runtime\" target=\"_blank\" rel=\"noopener noreferrer\">regenerator-runtime</a></li>\n<li><a href=\"https://github.com/webpack-contrib/style-loader#readme\" target=\"_blank\" rel=\"noopener noreferrer\">style-loader</a></li>\n<li><a href=\"https://github.com/webpack-contrib/css-loader#readme\" target=\"_blank\" rel=\"noopener noreferrer\">css-loader</a></li>\n<li><a href=\"http://lesscss.org/\" target=\"_blank\" rel=\"noopener noreferrer\">less</a></li>\n<li><a href=\"https://github.com/webpack-contrib/less-loader#readme\" target=\"_blank\" rel=\"noopener noreferrer\">less-loader</a></li>\n<li><a href=\"https://sass-lang.com/\" target=\"_blank\" rel=\"noopener noreferrer\">sass</a></li>\n<li><a href=\"https://github.com/webpack-contrib/sass-loader#readme\" target=\"_blank\" rel=\"noopener noreferrer\">sass-loader</a></li>\n<li><a href=\"https://github.com/bholloway/resolve-url-loader#readme\" target=\"_blank\" rel=\"noopener noreferrer\">resolve-url-loader</a></li>\n<li><a href=\"https://stylus-lang.com/\" target=\"_blank\" rel=\"noopener noreferrer\">stylus</a></li>\n<li><a href=\"https://github.com/shama/stylus-loader#readme\" target=\"_blank\" rel=\"noopener noreferrer\">stylus-loader</a></li>\n<li><a href=\"https://postcss.org/\" target=\"_blank\" rel=\"noopener noreferrer\">postcss</a></li>\n<li><a href=\"https://www.zhihu.com/question/20597072\" target=\"_blank\" rel=\"noopener noreferrer\">CSS 3 中 -webkit-, -moz-, -o-, -ms- 这些私有前缀什么时候可以移除？</a></li>\n<li><a href=\"https://github.com/postcss/autoprefixer#readme\" target=\"_blank\" rel=\"noopener noreferrer\">autoprefixer</a></li>\n<li><a href=\"https://github.com/csstools/postcss-preset-env#readme\" target=\"_blank\" rel=\"noopener noreferrer\">postcss-preset-env</a></li>\n<li><a href=\"https://cssnano.co/\" target=\"_blank\" rel=\"noopener noreferrer\">cssnano</a></li>\n<li><a href=\"https://youzan.github.io/zent/zh/\" target=\"_blank\" rel=\"noopener noreferrer\">zent</a></li>\n<li><a href=\"https://github.com/webpack-contrib/file-loader#readme\" target=\"_blank\" rel=\"noopener noreferrer\">file-loader</a></li>\n<li><a href=\"https://github.com/webpack-contrib/url-loader#readme\" target=\"_blank\" rel=\"noopener noreferrer\">url-loader</a></li>\n<li><a href=\"https://github.com/webpack-contrib/html-loader#readme\" target=\"_blank\" rel=\"noopener noreferrer\">html-loader</a></li>\n<li><a href=\"https://github.com/kentcdodds/cross-env\" target=\"_blank\" rel=\"noopener noreferrer\">cross-env</a></li>\n<li><a href=\"https://github.com/survivejs/webpack-merge#readme\" target=\"_blank\" rel=\"noopener noreferrer\">webpack-merge</a></li>\n<li><a href=\"https://github.com/gaearon/react-hot-loader#readme\" target=\"_blank\" rel=\"noopener noreferrer\">react-hot-loader</a></li>\n<li><a href=\"https://jkfhto.github.io/2019-10-18/webpack/webpack-%E6%96%87%E4%BB%B6%E6%8C%87%E7%BA%B9%E7%AD%96%E7%95%A5%EF%BC%9Achunkhash%E3%80%81contenthash%E5%92%8Chash/\" target=\"_blank\" rel=\"noopener noreferrer\">webpack 文件指纹策略</a></li>\n<li><a href=\"https://github.com/webpack-contrib/mini-css-extract-plugin#readme\" target=\"_blank\" rel=\"noopener noreferrer\">mini-css-extract-plugin</a></li>\n<li><a href=\"https://github.com/webpack-contrib/terser-webpack-plugin/#readme\" target=\"_blank\" rel=\"noopener noreferrer\">terser-webpack-plugin</a></li>\n<li><a href=\"https://github.com/webpack-contrib/compression-webpack-plugin#readme\" target=\"_blank\" rel=\"noopener noreferrer\">compression-webpack-plugin</a></li>\n<li><a href=\"https://github.com/motdotla/dotenv#readme\" target=\"_blank\" rel=\"noopener noreferrer\">dotenv</a></li>\n<li><a href=\"https://eslint.org/\" target=\"_blank\" rel=\"noopener noreferrer\">eslint</a></li>\n<li><a href=\"https://github.com/webpack-contrib/eslint-loader#readme\" target=\"_blank\" rel=\"noopener noreferrer\">eslint-loader</a></li>\n<li><a href=\"https://github.com/webpack-contrib/eslint-webpack-plugin#readme\" target=\"_blank\" rel=\"noopener noreferrer\">eslint-webpack-plugin</a></li>\n<li><a href=\"https://stylelint.io/\" target=\"_blank\" rel=\"noopener noreferrer\">stylelint</a></li>\n<li><a href=\"https://github.com/webpack-contrib/stylelint-webpack-plugin#readme\" target=\"_blank\" rel=\"noopener noreferrer\">stylelint-webpack-plugin</a></li>\n<li><a href=\"https://github.com/MillCloud/fabric#readme\" target=\"_blank\" rel=\"noopener noreferrer\">@modyqyw/fabric</a></li>\n<li><a href=\"https://github.com/webpack-contrib/awesome-webpack#readme\" target=\"_blank\" rel=\"noopener noreferrer\">awesome-webpack</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html\" target=\"_blank\" rel=\"noopener noreferrer\">阮一峰 - JavaScript Source Map 详解</a></li>\n<li><a href=\"https://juejin.im/post/5b56909a518825195f499806\" target=\"_blank\" rel=\"noopener noreferrer\">潘嘉晨 - 手摸手，带你用合理的姿势使用 webpack4（上）</a></li>\n<li><a href=\"https://juejin.im/post/5b5d6d6f6fb9a04fea58aabc\" target=\"_blank\" rel=\"noopener noreferrer\">潘嘉晨 - 手摸手，带你用合理的姿势使用 webpack4（下）</a></li>\n<li><a href=\"https://v4.webpack.js.org/plugins/module-concatenation-plugin/\" target=\"_blank\" rel=\"noopener noreferrer\">webpack - ModuleConcatenationPlugin</a></li>\n<li><a href=\"https://v2.parceljs.org/features/scope-hoisting/\" target=\"_blank\" rel=\"noopener noreferrer\">Parcel - Scope Hoisting</a></li>\n<li><a href=\"https://juejin.im/post/6844904008432222215\" target=\"_blank\" rel=\"noopener noreferrer\">轻松理解 webpack 热更新原理</a></li>\n<li><a href=\"https://juejin.cn/post/6844903933157048333\" target=\"_blank\" rel=\"noopener noreferrer\">搞懂 webpack 热更新原理</a></li>\n<li><a href=\"https://v4.webpack.js.org/guides/tree-shaking/\" target=\"_blank\" rel=\"noopener noreferrer\">webpack - Tree Shaking</a></li>\n<li><a href=\"https://www.rollupjs.org/guide/en/#tree-shaking\" target=\"_blank\" rel=\"noopener noreferrer\">rollup - Tree Shaking</a></li>\n</ul>\n<h2 id=\"致谢\"> 致谢</h2>\n<ul>\n<li><a href=\"https://github.com/XuXianTao\" target=\"_blank\" rel=\"noopener noreferrer\">XuXianTao</a> - 阅读了初稿并提供了弥足珍贵的建议和意见</li>\n</ul>\n",
      "image": "https://ae01.alicdn.com/kf/Hc2861d3d0e2b4ad89bfab9c37be5ecbcK.jpg",
      "date_published": "2021-07-05T05:18:00.000Z",
      "date_modified": "2021-07-05T05:18:00.000Z",
      "authors": [
        {
          "name": "ModyQyW <wurui7@mail3.sysu.edu.cn>"
        }
      ],
      "tags": []
    }
  ]
}